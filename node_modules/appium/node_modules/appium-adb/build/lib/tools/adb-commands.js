'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _loggerJs = require('../logger.js');

var _loggerJs2 = _interopRequireDefault(_loggerJs);

var _helpersJs = require('../helpers.js');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var _net = require('net');

var _net2 = _interopRequireDefault(_net);

var _logcat = require('../logcat');

var _logcat2 = _interopRequireDefault(_logcat);

var _asyncbox = require('asyncbox');

var _teen_process = require('teen_process');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _shellQuote = require('shell-quote');

var SETTINGS_HELPER_ID = 'io.appium.settings';
var WIFI_CONNECTION_SETTING_RECEIVER = SETTINGS_HELPER_ID + '/.receivers.WiFiConnectionSettingReceiver';
var WIFI_CONNECTION_SETTING_ACTION = SETTINGS_HELPER_ID + '.wifi';
var DATA_CONNECTION_SETTING_RECEIVER = SETTINGS_HELPER_ID + '/.receivers.DataConnectionSettingReceiver';
var DATA_CONNECTION_SETTING_ACTION = SETTINGS_HELPER_ID + '.data_connection';
var ANIMATION_SETTING_RECEIVER = SETTINGS_HELPER_ID + '/.receivers.AnimationSettingReceiver';
var ANIMATION_SETTING_ACTION = SETTINGS_HELPER_ID + '.animation';
var LOCALE_SETTING_RECEIVER = SETTINGS_HELPER_ID + '/.receivers.LocaleSettingReceiver';
var LOCALE_SETTING_ACTION = SETTINGS_HELPER_ID + '.locale';
var LOCATION_SERVICE = SETTINGS_HELPER_ID + '/.LocationService';
var MAX_SHELL_BUFFER_LENGTH = 1000;

var methods = {};

/**
 * Get the path to adb executable amd assign it
 * to this.executable.path and this.binaries.adb properties.
 *
 * @return {string} Full path to adb executable.
 */
methods.getAdbWithCorrectAdbPath = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getSdkBinaryPath("adb"));

      case 2:
        this.executable.path = context$1$0.sent;

        this.binaries.adb = this.executable.path;
        return context$1$0.abrupt('return', this.adb);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Get the full path to aapt tool and assign it to
 * this.binaries.aapt property
 */
methods.initAapt = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getSdkBinaryPath("aapt"));

      case 2:
        this.binaries.aapt = context$1$0.sent;

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Get the full path to zipalign tool and assign it to
 * this.binaries.zipalign property
 */
methods.initZipAlign = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getSdkBinaryPath("zipalign"));

      case 2:
        this.binaries.zipalign = context$1$0.sent;

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Retrieve the API level of the device under test.
 *
 * @return {number} The API level as integer number, for example 21 for
 *                  Android Lollipop. The result of this method is cached, so all the further
 * calls return the same value as the first one.
 */
methods.getApiLevel = function callee$0$0() {
  var strOutput;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (_lodash2['default'].isInteger(this._apiLevel)) {
          context$1$0.next = 13;
          break;
        }

        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.getDeviceProperty('ro.build.version.sdk'));

      case 4:
        strOutput = context$1$0.sent;

        this._apiLevel = parseInt(strOutput.trim(), 10);

        if (!isNaN(this._apiLevel)) {
          context$1$0.next = 8;
          break;
        }

        throw new Error('The actual output "' + strOutput + '" cannot be converted to an integer');

      case 8:
        context$1$0.next = 13;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](1);
        throw new Error('Error getting device API level. Original error: ' + context$1$0.t0.message);

      case 13:
        _loggerJs2['default'].debug('Device API level: ' + this._apiLevel);
        return context$1$0.abrupt('return', this._apiLevel);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 10]]);
};

/**
 * Retrieve the platform version of the device under test.
 *
 * @return {string} The platform version as a string, for example '5.0' for
 * Android Lollipop.
 */
methods.getPlatformVersion = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].info("Getting device platform version");
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.getDeviceProperty('ro.build.version.release'));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);
        throw new Error('Error getting device platform version. Original error: ' + context$1$0.t0.message);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7]]);
};

/**
 * Verify whether a device is connected.
 *
 * @return {boolean} True if at least one device is visible to adb.
 */
methods.isDeviceConnected = function callee$0$0() {
  var devices;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getConnectedDevices());

      case 2:
        devices = context$1$0.sent;
        return context$1$0.abrupt('return', devices.length > 0);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Recursively create a new folder on the device under test.
 *
 * @param {string} remotePath - The new path to be created.
 * @return {string} mkdir command output.
 */
methods.mkdir = function callee$0$0(remotePath) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['mkdir', '-p', remotePath]));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Verify whether the given argument is a
 * valid class name.
 *
 * @param {string} classString - The actual class name to be verified.
 * @return {?Array.<Match>} The result of Regexp.exec operation
 *                          or _null_ if no matches are found.
 */
methods.isValidClass = function (classString) {
  // some.package/some.package.Activity
  return new RegExp(/^[a-zA-Z0-9\./_]+$/).exec(classString);
};

/**
 * Force application to stop on the device under test.
 *
 * @param {string} pkg - The package name to be stopped.
 * @return {string} The output of the corresponding adb command.
 */
methods.forceStop = function callee$0$0(pkg) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['am', 'force-stop', pkg]));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/*
 * Kill application
 *
 * @param {string} pkg - The package name to be stopped.
 * @return {string} The output of the corresponding adb command.
 */
methods.killPackage = function killPackage(pkg) {
  return _regeneratorRuntime.async(function killPackage$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['am', 'kill', pkg]));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Clear the user data of the particular application on the device
 * under test.
 *
 * @param {string} pkg - The package name to be cleared.
 * @return {string} The output of the corresponding adb command.
 */
methods.clear = function callee$0$0(pkg) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['pm', 'clear', pkg]));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Grant all permissions requested by the particular package.
 * This method is only useful on Android 6.0+ and for applications
 * that support components-based permissions setting.
 *
 * @param {string} pkg - The package name to be processed.
 * @param {string} apk - The path to the actual apk file.
 * @return {string|boolean} The output of the corresponding adb command
 *                          or _false_ if there was an error during command execution.
 */
methods.grantAllPermissions = function callee$0$0(pkg, apk) {
  var apiLevel, targetSdk, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _ret;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 2:
        apiLevel = context$1$0.sent;
        targetSdk = null;
        context$1$0.prev = 4;

        if (apk) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.targetSdkVersionUsingPKG(pkg));

      case 8:
        targetSdk = context$1$0.sent;
        context$1$0.next = 14;
        break;

      case 11:
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(this.targetSdkVersionFromManifest(apk));

      case 13:
        targetSdk = context$1$0.sent;

      case 14:
        context$1$0.next = 19;
        break;

      case 16:
        context$1$0.prev = 16;
        context$1$0.t0 = context$1$0['catch'](4);

        //avoiding logging error stack, as calling library function would have logged
        _loggerJs2['default'].warn('Ran into problem getting target SDK version; ignoring...');

      case 19:
        if (!(apiLevel >= 23 && targetSdk >= 23)) {
          context$1$0.next = 25;
          break;
        }

        context$1$0.next = 22;
        return _regeneratorRuntime.awrap((function callee$1$0() {
          var stdout, requestedPermissions, grantedPermissions, permissonsToGrant, cmds, cmdChunk, permission, nextCmd, result, lastError, cmd;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.shell(['pm', 'dump', pkg]));

              case 2:
                stdout = context$2$0.sent;
                context$2$0.next = 5;
                return _regeneratorRuntime.awrap(this.getReqPermissions(pkg, stdout));

              case 5:
                requestedPermissions = context$2$0.sent;
                context$2$0.next = 8;
                return _regeneratorRuntime.awrap(this.getGrantedPermissions(pkg, stdout));

              case 8:
                grantedPermissions = context$2$0.sent;
                permissonsToGrant = requestedPermissions.filter(function (x) {
                  return grantedPermissions.indexOf(x) < 0;
                });

                if (permissonsToGrant.length) {
                  context$2$0.next = 13;
                  break;
                }

                _loggerJs2['default'].info(pkg + ' contains no permissions available for granting.');
                return context$2$0.abrupt('return', {
                  v: true
                });

              case 13:
                cmds = [];
                cmdChunk = [];
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                context$2$0.prev = 18;

                for (_iterator = _getIterator(permissonsToGrant); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  permission = _step.value;
                  nextCmd = ['pm', 'grant', pkg, permission, ';'];

                  if (nextCmd.join(' ').length + cmdChunk.join(' ').length >= MAX_SHELL_BUFFER_LENGTH) {
                    cmds.push(cmdChunk);
                    cmdChunk = [];
                  }
                  cmdChunk = cmdChunk.concat(nextCmd);
                }
                context$2$0.next = 26;
                break;

              case 22:
                context$2$0.prev = 22;
                context$2$0.t0 = context$2$0['catch'](18);
                _didIteratorError = true;
                _iteratorError = context$2$0.t0;

              case 26:
                context$2$0.prev = 26;
                context$2$0.prev = 27;

                if (!_iteratorNormalCompletion && _iterator['return']) {
                  _iterator['return']();
                }

              case 29:
                context$2$0.prev = 29;

                if (!_didIteratorError) {
                  context$2$0.next = 32;
                  break;
                }

                throw _iteratorError;

              case 32:
                return context$2$0.finish(29);

              case 33:
                return context$2$0.finish(26);

              case 34:
                if (cmdChunk.length) {
                  cmds.push(cmdChunk);
                }
                _loggerJs2['default'].debug('Got the following command chunks to execute: ' + cmds);
                result = true;
                lastError = null;
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                context$2$0.prev = 41;
                _iterator2 = _getIterator(cmds);

              case 43:
                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                  context$2$0.next = 61;
                  break;
                }

                cmd = _step2.value;
                context$2$0.prev = 45;
                context$2$0.next = 48;
                return _regeneratorRuntime.awrap(this.shell(cmd));

              case 48:
                context$2$0.t1 = context$2$0.sent;

                if (!context$2$0.t1) {
                  context$2$0.next = 51;
                  break;
                }

                context$2$0.t1 = result;

              case 51:
                result = context$2$0.t1;
                context$2$0.next = 58;
                break;

              case 54:
                context$2$0.prev = 54;
                context$2$0.t2 = context$2$0['catch'](45);

                // this is to give the method a chance to assign all the requested permissions
                // before to quit in case we'd like to ignore the error on the higher level
                lastError = context$2$0.t2;
                result = false;

              case 58:
                _iteratorNormalCompletion2 = true;
                context$2$0.next = 43;
                break;

              case 61:
                context$2$0.next = 67;
                break;

              case 63:
                context$2$0.prev = 63;
                context$2$0.t3 = context$2$0['catch'](41);
                _didIteratorError2 = true;
                _iteratorError2 = context$2$0.t3;

              case 67:
                context$2$0.prev = 67;
                context$2$0.prev = 68;

                if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                  _iterator2['return']();
                }

              case 70:
                context$2$0.prev = 70;

                if (!_didIteratorError2) {
                  context$2$0.next = 73;
                  break;
                }

                throw _iteratorError2;

              case 73:
                return context$2$0.finish(70);

              case 74:
                return context$2$0.finish(67);

              case 75:
                if (!lastError) {
                  context$2$0.next = 77;
                  break;
                }

                throw lastError;

              case 77:
                return context$2$0.abrupt('return', {
                  v: result
                });

              case 78:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this, [[18, 22, 26, 34], [27,, 29, 33], [41, 63, 67, 75], [45, 54], [68,, 70, 74]]);
        })());

      case 22:
        _ret = context$1$0.sent;

        if (!(typeof _ret === 'object')) {
          context$1$0.next = 25;
          break;
        }

        return context$1$0.abrupt('return', _ret.v);

      case 25:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[4, 16]]);
};

/**
 * Grant single permission for the particular package.
 *
 * @param {string} pkg - The package name to be processed.
 * @param {string} permission - The full name of the permission to be granted.
 * @throws {Error} If there was an error while changing permissions.
 */
methods.grantPermission = function callee$0$0(pkg, permission) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.shell(['pm', 'grant', pkg, permission]));

      case 3:
        context$1$0.next = 9;
        break;

      case 5:
        context$1$0.prev = 5;
        context$1$0.t0 = context$1$0['catch'](0);

        if (context$1$0.t0.message.includes("not a changeable permission type")) {
          context$1$0.next = 9;
          break;
        }

        throw context$1$0.t0;

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 5]]);
};

/**
 * Revoke single permission from the particular package.
 *
 * @param {string} pkg - The package name to be processed.
 * @param {string} permission - The full name of the permission to be revoked.
 * @throws {Error} If there was an error while changing permissions.
 */
methods.revokePermission = function callee$0$0(pkg, permission) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.shell(['pm', 'revoke', pkg, permission]));

      case 3:
        context$1$0.next = 9;
        break;

      case 5:
        context$1$0.prev = 5;
        context$1$0.t0 = context$1$0['catch'](0);

        if (context$1$0.t0.message.includes("not a changeable permission type")) {
          context$1$0.next = 9;
          break;
        }

        throw context$1$0.t0;

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 5]]);
};

/**
 * Retrieve the list of granted permissions for the particular package.
 *
 * @param {string} pkg - The package name to be processed.
 * @param {string} cmdOutput [null] - Optional parameter containing command output of
 *                                    _pm dump_ command. It speeds this method up
 *                                    if present.
 * @return {array} The list of granted permissions or an empty list.
 * @throws {Error} If there was an error while changing permissions.
 */
methods.getGrantedPermissions = function callee$0$0(pkg) {
  var cmdOutput = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  var stdout, match;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.t0 = cmdOutput;

        if (context$1$0.t0) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.shell(['pm', 'dump', pkg]));

      case 4:
        context$1$0.t0 = context$1$0.sent;

      case 5:
        stdout = context$1$0.t0;
        match = new RegExp(/(install permissions:|User 0)([\s\S]*?)DUMP OF SERVICE activity:/g).exec(stdout);

        if (match) {
          context$1$0.next = 9;
          break;
        }

        throw new Error('Unable to get granted permissions');

      case 9:
        return context$1$0.abrupt('return', (match[0].match(/android\.permission\.\w+:\sgranted=true/g) || []).map(function (x) {
          return x.replace(/:\sgranted=true/g, '');
        }));

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Retrieve the list of denied permissions for the particular package.
 *
 * @param {string} pkg - The package name to be processed.
 * @param {string} cmdOutput [null] - Optional parameter containing command output of
 *                                    _pm dump_ command. It speeds this method up
 *                                    if present.
 * @return {array} The list of denied permissions or an empty list.
 */
methods.getDeniedPermissions = function callee$0$0(pkg) {
  var cmdOutput = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  var stdout, match;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.t0 = cmdOutput;

        if (context$1$0.t0) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.shell(['pm', 'dump', pkg]));

      case 4:
        context$1$0.t0 = context$1$0.sent;

      case 5:
        stdout = context$1$0.t0;
        match = new RegExp(/(install permissions:|User 0)([\s\S]*?)DUMP OF SERVICE activity:/g).exec(stdout);

        if (match) {
          context$1$0.next = 9;
          break;
        }

        throw new Error('Unable to get denied permissions');

      case 9:
        return context$1$0.abrupt('return', (match[0].match(/android\.permission\.\w+:\sgranted=false/g) || []).map(function (x) {
          return x.replace(/:\sgranted=false/g, '');
        }));

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Retrieve the list of requested permissions for the particular package.
 *
 * @param {string} pkg - The package name to be processed.
 * @param {string} cmdOutput [null] - Optional parameter containing command output of
 *                                    _pm dump_ command. It speeds this method up
 *                                    if present.
 * @return {array} The list of requested permissions or an empty list.
 */
methods.getReqPermissions = function callee$0$0(pkg) {
  var cmdOutput = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  var stdout, match;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.t0 = cmdOutput;

        if (context$1$0.t0) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.shell(['pm', 'dump', pkg]));

      case 4:
        context$1$0.t0 = context$1$0.sent;

      case 5:
        stdout = context$1$0.t0;
        match = new RegExp(/requested permissions:([\s\S]*?)(install permissions:|User 0)/g).exec(stdout);

        if (match) {
          context$1$0.next = 9;
          break;
        }

        throw new Error('Unable to get requested permissions');

      case 9:
        return context$1$0.abrupt('return', match[0].match(/android\.permission\.\w+/g) || []);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Retrieve the list of location providers for the device under test.
 *
 * @return {Array.<String>} The list of available location providers or an empty list.
 */
methods.getLocationProviders = function callee$0$0() {
  var stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getSetting('secure', 'location_providers_allowed'));

      case 2:
        stdout = context$1$0.sent;
        return context$1$0.abrupt('return', stdout.trim().split(',').map(function (p) {
          return p.trim();
        }).filter(Boolean));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Toggle the state of GPS location provider.
 *
 * @param {boolean} enabled - Whether to enable (true) or disable (false) the GPS provider.
 */
methods.toggleGPSLocationProvider = function callee$0$0(enabled) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setSetting('secure', 'location_providers_allowed', (enabled ? "+" : "-") + 'gps'));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Set hidden api policy to manage access to non-SDK APIs.
 * https://developer.android.com/preview/restrictions-non-sdk-interfaces
 *
 * @param {number|string} value - The API enforcement policy.
 *     0: Disable non-SDK API usage detection. This will also disable logging, and also break the strict mode API,
 *        detectNonSdkApiUsage(). Not recommended.
 *     1: "Just warn" - permit access to all non-SDK APIs, but keep warnings in the log.
 *        The strict mode API will keep working.
 *     2: Disallow usage of dark grey and black listed APIs.
 *     3: Disallow usage of blacklisted APIs, but allow usage of dark grey listed APIs.
 */
methods.setHiddenApiPolicy = function callee$0$0(value) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setSetting('global', 'hidden_api_policy_pre_p_apps', value));

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.setSetting('global', 'hidden_api_policy_p_apps', value));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Reset access to non-SDK APIs to its default setting.
 * https://developer.android.com/preview/restrictions-non-sdk-interfaces
 */
methods.setDefaultHiddenApiPolicy = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['settings', 'delete', 'global', 'hidden_api_policy_pre_p_apps']));

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.shell(['settings', 'delete', 'global', 'hidden_api_policy_p_apps']));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Stop the particular package if it is running and clears its application data.
 *
 * @param {string} pkg - The package name to be processed.
 */
methods.stopAndClear = function callee$0$0(pkg) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.forceStop(pkg));

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.clear(pkg));

      case 5:
        context$1$0.next = 10;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](0);
        throw new Error('Cannot stop and clear ' + pkg + '. Original error: ' + context$1$0.t0.message);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 7]]);
};

/**
 * Retrieve the target SDK version for the particular package.
 *
 * @param {string} pkg - The package name to be processed.
 * @return {string} The parsed SDK version.
 */
methods.getTargetSdkUsingPKG = function callee$0$0(pkg) {
  var stdout, targetSdk;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['pm', 'dump', pkg]));

      case 2:
        stdout = context$1$0.sent;
        targetSdk = new RegExp(/targetSdk=([^\s\s]+)/g).exec(stdout)[1];
        return context$1$0.abrupt('return', targetSdk);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Retrieve the list of available input methods (IMEs) for the device under test.
 *
 * @return {Array.<String>} The list of IME names or an empty list.
 */
methods.availableIMEs = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.shell(['ime', 'list', '-a']));

      case 3:
        context$1$0.t0 = context$1$0.sent;
        return context$1$0.abrupt('return', (0, _helpersJs.getIMEListFromOutput)(context$1$0.t0));

      case 7:
        context$1$0.prev = 7;
        context$1$0.t1 = context$1$0['catch'](0);
        throw new Error('Error getting available IME\'s. Original error: ' + context$1$0.t1.message);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 7]]);
};

/**
 * Retrieve the list of enabled input methods (IMEs) for the device under test.
 *
 * @return {Array.<String>} The list of enabled IME names or an empty list.
 */
methods.enabledIMEs = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.shell(['ime', 'list']));

      case 3:
        context$1$0.t0 = context$1$0.sent;
        return context$1$0.abrupt('return', (0, _helpersJs.getIMEListFromOutput)(context$1$0.t0));

      case 7:
        context$1$0.prev = 7;
        context$1$0.t1 = context$1$0['catch'](0);
        throw new Error('Error getting enabled IME\'s. Original error: ' + context$1$0.t1.message);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 7]]);
};

/**
 * Enable the particular input method on the device under test.
 *
 * @param {string} imeId - One of existing IME ids.
 */
methods.enableIME = function callee$0$0(imeId) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['ime', 'enable', imeId]));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Disable the particular input method on the device under test.
 *
 * @param {string} imeId - One of existing IME ids.
 */
methods.disableIME = function callee$0$0(imeId) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['ime', 'disable', imeId]));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Set the particular input method on the device under test.
 *
 * @param {string} imeId - One of existing IME ids.
 */
methods.setIME = function callee$0$0(imeId) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['ime', 'set', imeId]));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Get the default input method on the device under test.
 *
 * @return {string} The name of the default input method.
 */
methods.defaultIME = function callee$0$0() {
  var engine;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.getSetting('secure', 'default_input_method'));

      case 3:
        engine = context$1$0.sent;
        return context$1$0.abrupt('return', engine.trim());

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](0);
        throw new Error('Error getting default IME. Original error: ' + context$1$0.t0.message);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 7]]);
};

/**
 * Send the particular keycode to the device under test.
 *
 * @param {string|number} keycode - The actual key code to be sent.
 */
methods.keyevent = function callee$0$0(keycode) {
  var code;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        code = parseInt(keycode, 10);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.shell(['input', 'keyevent', code]));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Send the particular text to the device under test.
 *
 * @param {string} text - The actual text to be sent.
 */
methods.inputText = function callee$0$0(text) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        /* jshint ignore:start */
        // need to escape whitespace and ( ) < > | ; & * \ ~ " '
        text = text.replace(/\\/g, '\\\\').replace(/\(/g, '\(').replace(/\)/g, '\)').replace(/</g, '\<').replace(/>/g, '\>').replace(/\|/g, '\|').replace(/;/g, '\;').replace(/&/g, '\&').replace(/\*/g, '\*').replace(/~/g, '\~').replace(/"/g, '\"').replace(/'/g, "\'").replace(/ /g, '%s');
        /* jshint ignore:end */
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.shell(['input', 'text', text]));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Clear the active text field on the device under test by sending
 * special keyevents to it.
 *
 * @param {number} length [100] - The maximum length of the text in the field to be cleared.
 */
methods.clearTextField = function callee$0$0() {
  var length = arguments.length <= 0 || arguments[0] === undefined ? 100 : arguments[0];
  var args, i;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        // assumes that the EditText field already has focus
        _loggerJs2['default'].debug('Clearing up to ' + length + ' characters');

        if (!(length === 0)) {
          context$1$0.next = 3;
          break;
        }

        return context$1$0.abrupt('return');

      case 3:
        args = ['input', 'keyevent'];

        for (i = 0; i < length; i++) {
          // we cannot know where the cursor is in the text field, so delete both before
          // and after so that we get rid of everything
          // https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DEL
          // https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_FORWARD_DEL
          args.push('67', '112');
        }
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.shell(args));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Send the special keycode to the device under test in order to lock it.
 */
methods.lock = function callee$0$0() {
  var timeoutMs;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.isScreenLocked());

      case 2:
        if (!context$1$0.sent) {
          context$1$0.next = 5;
          break;
        }

        _loggerJs2['default'].debug("Screen is already locked. Doing nothing.");
        return context$1$0.abrupt('return');

      case 5:
        _loggerJs2['default'].debug("Pressing the KEYCODE_POWER button to lock screen");
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.keyevent(26));

      case 8:
        timeoutMs = 5000;
        context$1$0.prev = 9;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.isScreenLocked());

              case 2:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 3:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this2);
        }, {
          waitMs: timeoutMs,
          intervalMs: 500
        }));

      case 12:
        context$1$0.next = 17;
        break;

      case 14:
        context$1$0.prev = 14;
        context$1$0.t0 = context$1$0['catch'](9);
        throw new Error('The device screen is still locked after ' + timeoutMs + 'ms timeout');

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[9, 14]]);
};

/**
 * Send the special keycode to the device under test in order to emulate
 * Back button tap.
 */
methods.back = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug("Pressing the BACK button");
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.keyevent(4));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Send the special keycode to the device under test in order to emulate
 * Home button tap.
 */
methods.goToHome = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug("Pressing the HOME button");
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.keyevent(3));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * @return {string} the actual path to adb executable.
 */
methods.getAdbPath = function () {
  return this.executable.path;
};

/**
 * Retrieve current screen orientation of the device under test.
 *
 * @return {number} The current orientation encoded as an integer number.
 */
methods.getScreenOrientation = function callee$0$0() {
  var stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['dumpsys', 'input']));

      case 2:
        stdout = context$1$0.sent;
        return context$1$0.abrupt('return', (0, _helpersJs.getSurfaceOrientation)(stdout));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Retrieve the screen lock state of the device under test.
 *
 * @return {boolean} True if the device is locked.
 */
methods.isScreenLocked = function callee$0$0() {
  var stdout, dumpsysFile;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['dumpsys', 'window']));

      case 2:
        stdout = context$1$0.sent;

        if (!process.env.APPIUM_LOG_DUMPSYS) {
          context$1$0.next = 8;
          break;
        }

        dumpsysFile = _path2['default'].resolve(process.cwd(), "dumpsys.log");

        _loggerJs2['default'].debug('Writing dumpsys output to ' + dumpsysFile);
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(dumpsysFile, stdout));

      case 8:
        return context$1$0.abrupt('return', (0, _helpersJs.isShowingLockscreen)(stdout) || (0, _helpersJs.isCurrentFocusOnKeyguard)(stdout) || !(0, _helpersJs.isScreenOnFully)(stdout));

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Retrieve the state of the software keyboard on the device under test.
 *
 * @return {boolean} True if the software keyboard is present.
 */
methods.isSoftKeyboardPresent = function callee$0$0() {
  var stdout, isKeyboardShown, canCloseKeyboard, inputShownMatch, isInputViewShownMatch;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.shell(['dumpsys', 'input_method']));

      case 3:
        stdout = context$1$0.sent;
        isKeyboardShown = false, canCloseKeyboard = false, inputShownMatch = /mInputShown=\w+/gi.exec(stdout);

        if (inputShownMatch && inputShownMatch[0]) {
          isKeyboardShown = inputShownMatch[0].split('=')[1] === 'true';
          isInputViewShownMatch = /mIsInputViewShown=\w+/gi.exec(stdout);

          if (isInputViewShownMatch && isInputViewShownMatch[0]) {
            canCloseKeyboard = isInputViewShownMatch[0].split('=')[1] === 'true';
          }
        }
        return context$1$0.abrupt('return', { isKeyboardShown: isKeyboardShown, canCloseKeyboard: canCloseKeyboard });

      case 9:
        context$1$0.prev = 9;
        context$1$0.t0 = context$1$0['catch'](0);
        throw new Error('Error finding softkeyboard. Original error: ' + context$1$0.t0.message);

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 9]]);
};

/**
 * Send an arbitrary Telnet command to the device under test.
 *
 * @param {string} command - The command to be sent.
 *
 * @return {string} The actual output of the given command.
 */
methods.sendTelnetCommand = function callee$0$0(command) {
  var port;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Sending telnet command to device: ' + command);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.getEmulatorPort());

      case 3:
        port = context$1$0.sent;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(new _bluebird2['default'](function (resolve, reject) {
          var conn = _net2['default'].createConnection(port, 'localhost'),
              connected = false,
              readyRegex = /^OK$/m,
              dataStream = "",
              res = null;
          conn.on('connect', function () {
            _loggerJs2['default'].debug("Socket connection to device created");
          });
          conn.on('data', function (data) {
            data = data.toString('utf8');
            if (!connected) {
              if (readyRegex.test(data)) {
                connected = true;
                _loggerJs2['default'].debug("Socket connection to device ready");
                conn.write(command + '\n');
              }
            } else {
              dataStream += data;
              if (readyRegex.test(data)) {
                res = dataStream.replace(readyRegex, "").trim();
                res = _lodash2['default'].last(res.trim().split('\n'));
                _loggerJs2['default'].debug('Telnet command got response: ' + res);
                conn.write("quit\n");
              }
            }
          });
          conn.on('error', function (err) {
            // eslint-disable-line promise/prefer-await-to-callbacks
            _loggerJs2['default'].debug('Telnet command error: ' + err.message);
            reject(err);
          });
          conn.on('close', function () {
            if (res === null) {
              reject(new Error("Never got a response from command"));
            } else {
              resolve(res);
            }
          });
        }));

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Check the state of Airplane mode on the device under test.
 *
 * @return {boolean} True if Airplane mode is enabled.
 */
methods.isAirplaneModeOn = function callee$0$0() {
  var stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getSetting('global', 'airplane_mode_on'));

      case 2:
        stdout = context$1$0.sent;
        return context$1$0.abrupt('return', parseInt(stdout, 10) !== 0);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Change the state of Airplane mode in Settings on the device under test.
 *
 * @param {boolean} on - True to enable the Airplane mode in Settings and false to disable it.
 */
methods.setAirplaneMode = function callee$0$0(on) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setSetting('global', 'airplane_mode_on', on ? 1 : 0));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Broadcast the state of Airplane mode on the device under test.
 * This method should be called after {@link #setAirplaneMode}, otherwise
 * the mode change is not going to be applied for the device.
 *
 * @param {boolean} on - True to broadcast enable and false to broadcast disable.
 */
methods.broadcastAirplaneMode = function callee$0$0(on) {
  var args;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        args = ['am', 'broadcast', '-a', 'android.intent.action.AIRPLANE_MODE', '--ez', 'state', on ? 'true' : 'false'];
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.shell(args));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Check the state of WiFi on the device under test.
 *
 * @return {boolean} True if WiFi is enabled.
 */
methods.isWifiOn = function callee$0$0() {
  var stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getSetting('global', 'wifi_on'));

      case 2:
        stdout = context$1$0.sent;
        return context$1$0.abrupt('return', parseInt(stdout, 10) !== 0);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Change the state of WiFi on the device under test.
 *
 * @param {boolean} on - True to enable and false to disable it.
 * @param {boolean} isEmulator [false] - Set it to true if the device under test
 *                                       is an emulator rather than a real device.
 */
methods.setWifiState = function callee$0$0(on) {
  var isEmulator = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
  var isRoot;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!isEmulator) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.root());

      case 3:
        isRoot = context$1$0.sent;
        context$1$0.prev = 4;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.shell(['svc', 'wifi', on ? 'enable' : 'disable']));

      case 7:
        context$1$0.prev = 7;

        if (!isRoot) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.unroot());

      case 11:
        return context$1$0.finish(7);

      case 12:
        context$1$0.next = 16;
        break;

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.shell(['am', 'broadcast', '-a', WIFI_CONNECTION_SETTING_ACTION, '-n', WIFI_CONNECTION_SETTING_RECEIVER, '--es', 'setstatus', on ? 'enable' : 'disable']));

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[4,, 7, 12]]);
};

/**
 * Check the state of Data transfer on the device under test.
 *
 * @return {boolean} True if Data transfer is enabled.
 */
methods.isDataOn = function callee$0$0() {
  var stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getSetting('global', 'mobile_data'));

      case 2:
        stdout = context$1$0.sent;
        return context$1$0.abrupt('return', parseInt(stdout, 10) !== 0);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Change the state of Data transfer on the device under test.
 *
 * @param {boolean} on - True to enable and false to disable it.
 * @param {boolean} isEmulator [false] - Set it to true if the device under test
 *                                       is an emulator rather than a real device.
 */
methods.setDataState = function callee$0$0(on) {
  var isEmulator = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
  var isRoot;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!isEmulator) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.root());

      case 3:
        isRoot = context$1$0.sent;
        context$1$0.prev = 4;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.shell(['svc', 'data', on ? 'enable' : 'disable']));

      case 7:
        context$1$0.prev = 7;

        if (!isRoot) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.unroot());

      case 11:
        return context$1$0.finish(7);

      case 12:
        context$1$0.next = 16;
        break;

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.shell(['am', 'broadcast', '-a', DATA_CONNECTION_SETTING_ACTION, '-n', DATA_CONNECTION_SETTING_RECEIVER, '--es', 'setstatus', on ? 'enable' : 'disable']));

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[4,, 7, 12]]);
};

/**
 * Change the state of WiFi and/or Data transfer on the device under test.
 *
 * @param {boolean} wifi - True to enable and false to disable WiFi.
 * @param {boolean} data - True to enable and false to disable Data transfer.
 * @param {boolean} isEmulator [false] - Set it to true if the device under test
 *                                       is an emulator rather than a real device.
 */
methods.setWifiAndData = function callee$0$0(_ref) {
  var wifi = _ref.wifi;
  var data = _ref.data;
  var isEmulator = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!_appiumSupport.util.hasValue(wifi)) {
          context$1$0.next = 3;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.setWifiState(wifi, isEmulator));

      case 3:
        if (!_appiumSupport.util.hasValue(data)) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.setDataState(data, isEmulator));

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Change the state of animation on the device under test.
 * Animation on the device is controlled by the following global properties:
 * [ANIMATOR_DURATION_SCALE]{@link https://developer.android.com/reference/android/provider/Settings.Global.html#ANIMATOR_DURATION_SCALE},
 * [TRANSITION_ANIMATION_SCALE]{@link https://developer.android.com/reference/android/provider/Settings.Global.html#TRANSITION_ANIMATION_SCALE},
 * [WINDOW_ANIMATION_SCALE]{@link https://developer.android.com/reference/android/provider/Settings.Global.html#WINDOW_ANIMATION_SCALE}.
 * This method sets all this properties to 0.0 to disable (1.0 to enable) animation.
 *
 * Turning off animation might be useful to improve stability
 * and reduce tests execution time.
 *
 * @param {boolean} on - True to enable and false to disable it.
 */
methods.setAnimationState = function callee$0$0(on) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['am', 'broadcast', '-a', ANIMATION_SETTING_ACTION, '-n', ANIMATION_SETTING_RECEIVER, '--es', 'setstatus', on ? 'enable' : 'disable']));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Check the state of animation on the device under test.
 *
 * @return {boolean} True if at least one of animation scale settings
 *                   is not equal to '0.0'.
 */
methods.isAnimationOn = function callee$0$0() {
  var animator_duration_scale, transition_animation_scale, window_animation_scale;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getSetting('global', 'animator_duration_scale'));

      case 2:
        animator_duration_scale = context$1$0.sent;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.getSetting('global', 'transition_animation_scale'));

      case 5:
        transition_animation_scale = context$1$0.sent;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.getSetting('global', 'window_animation_scale'));

      case 8:
        window_animation_scale = context$1$0.sent;
        return context$1$0.abrupt('return', _lodash2['default'].some([animator_duration_scale, transition_animation_scale, window_animation_scale], function (setting) {
          return setting !== '0.0';
        }));

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Change the locale on the device under test. Don't need to reboot the device after changing the locale.
 * This method sets an arbitrary locale following:
 *   https://developer.android.com/reference/java/util/Locale.html
 *   https://developer.android.com/reference/java/util/Locale.html#Locale(java.lang.String,%20java.lang.String)
 *
 * @param {string} language - Language. e.g. en, ja
 * @param {string} country - Country. e.g. US, JP
 */
methods.setDeviceSysLocaleViaSettingApp = function callee$0$0(language, country) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['am', 'broadcast', '-a', LOCALE_SETTING_ACTION, '-n', LOCALE_SETTING_RECEIVER, '--es', 'lang', language.toLowerCase(), '--es', 'country', country.toUpperCase()]));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * @typedef {Object} Location
 * @property {float|string} longitude - Valid longitude value.
 * @property {float|string} latitude - Valid latitude value.
 */

/**
 * Emulate geolocation coordinates on the device under test.
 *
 * @param {Location} location - Location object.
 * @param {boolean} isEmulator [false] - Set it to true if the device under test
 *                                       is an emulator rather than a real device.
 */
methods.setGeoLocation = function callee$0$0(location) {
  var isEmulator = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
  var longitude, latitude;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        longitude = parseFloat(location.longitude);

        if (!isNaN(longitude)) {
          context$1$0.next = 3;
          break;
        }

        throw new Error('location.longitude is expected to be a valid float number. \'' + location.longitude + '\' is given instead');

      case 3:
        longitude = '' + _lodash2['default'].ceil(longitude, 5);
        latitude = parseFloat(location.latitude);

        if (!isNaN(latitude)) {
          context$1$0.next = 7;
          break;
        }

        throw new Error('location.latitude is expected to be a valid float number. \'' + location.latitude + '\' is given instead');

      case 7:
        latitude = '' + _lodash2['default'].ceil(latitude, 5);

        if (!isEmulator) {
          context$1$0.next = 17;
          break;
        }

        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.resetTelnetAuthToken());

      case 11:
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(this.adbExec(['emu', 'geo', 'fix', longitude, latitude]));

      case 13:
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(this.adbExec(['emu', 'geo', 'fix', longitude.replace('.', ','), latitude.replace('.', ',')]));

      case 15:
        context$1$0.next = 20;
        break;

      case 17:
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(this.shell(['am', 'startservice', '-e', 'longitude', longitude, '-e', 'latitude', latitude, LOCATION_SERVICE]));

      case 19:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Forcefully recursively remove a path on the device under test.
 * Be careful while calling this method.
 *
 * @param {string} path - The path to be removed recursively.
 */
methods.rimraf = function callee$0$0(path) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['rm', '-rf', path]));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Send a file to the device under test.
 *
 * @param {string} localPath - The path to the file on the local file system.
 * @param {string} remotePath - The destination path on the remote device.
 * @param {object} opts - Additional options mapping. See
 *                        https://github.com/appium/node-teen_process,
 *                        _exec_ method options, for more information about available
 *                        options.
 */
methods.push = function callee$0$0(localPath, remotePath, opts) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adbExec(['push', localPath, remotePath], opts));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Receive a file from the device under test.
 *
 * @param {string} remotePath - The source path on the remote device.
 * @param {string} localPath - The destination path to the file on the local file system.
 */
methods.pull = function callee$0$0(remotePath, localPath) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adbExec(['pull', remotePath, localPath], { timeout: 60000 }));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Check whether the process with the particular name is running on the device
 * under test.
 *
 * @param {string} processName - The name of the process to be checked.
 * @return {boolean} True if the given process is running.
 * @throws {error} If the given process name is not a valid class name.
 */
methods.processExists = function callee$0$0(processName) {
  var stdout, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, line, pkgColumn;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;

        if (this.isValidClass(processName)) {
          context$1$0.next = 3;
          break;
        }

        throw new Error('Invalid process name: ' + processName);

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.shell("ps"));

      case 5:
        stdout = context$1$0.sent;
        _iteratorNormalCompletion3 = true;
        _didIteratorError3 = false;
        _iteratorError3 = undefined;
        context$1$0.prev = 9;
        _iterator3 = _getIterator(stdout.split(/\r?\n/));

      case 11:
        if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
          context$1$0.next = 20;
          break;
        }

        line = _step3.value;

        line = line.trim().split(/\s+/);
        pkgColumn = line[line.length - 1];

        if (!(pkgColumn && pkgColumn.indexOf(processName) !== -1)) {
          context$1$0.next = 17;
          break;
        }

        return context$1$0.abrupt('return', true);

      case 17:
        _iteratorNormalCompletion3 = true;
        context$1$0.next = 11;
        break;

      case 20:
        context$1$0.next = 26;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t0 = context$1$0['catch'](9);
        _didIteratorError3 = true;
        _iteratorError3 = context$1$0.t0;

      case 26:
        context$1$0.prev = 26;
        context$1$0.prev = 27;

        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
          _iterator3['return']();
        }

      case 29:
        context$1$0.prev = 29;

        if (!_didIteratorError3) {
          context$1$0.next = 32;
          break;
        }

        throw _iteratorError3;

      case 32:
        return context$1$0.finish(29);

      case 33:
        return context$1$0.finish(26);

      case 34:
        return context$1$0.abrupt('return', false);

      case 37:
        context$1$0.prev = 37;
        context$1$0.t1 = context$1$0['catch'](0);
        throw new Error('Error finding if process exists. Original error: ' + context$1$0.t1.message);

      case 40:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 37], [9, 22, 26, 34], [27,, 29, 33]]);
};

/**
 * Get TCP port forwarding with adb on the device under test.
 * @return {Array.<String>} The output of the corresponding adb command. An array contains each forwarding line of output
 */
methods.getForwardList = function callee$0$0() {
  var connections;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('List forwarding ports');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adbExec(['forward', '--list']));

      case 3:
        connections = context$1$0.sent;
        return context$1$0.abrupt('return', connections.split('\n'));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Setup TCP port forwarding with adb on the device under test.
 *
 * @param {string|number} systemPort - The number of the local system port.
 * @param {string|number} devicePort - The number of the remote device port.
 */
methods.forwardPort = function callee$0$0(systemPort, devicePort) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Forwarding system: ' + systemPort + ' to device: ' + devicePort);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adbExec(['forward', 'tcp:' + systemPort, 'tcp:' + devicePort]));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Remove TCP port forwarding with adb on the device under test. The forwarding
 * for the given port should be setup with {@link #forwardPort} first.
 *
 * @param {string|number} systemPort - The number of the local system port
 *                                     to remove forwarding on.
 */
methods.removePortForward = function callee$0$0(systemPort) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Removing forwarded port socket connection: ' + systemPort + ' ');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adbExec(['forward', '--remove', 'tcp:' + systemPort]));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Setup TCP port forwarding with adb on the device under test. The difference
 * between {@link #forwardPort} is that this method does setup for an abstract
 * local port.
 *
 * @param {string|number} systemPort - The number of the local system port.
 * @param {string|number} devicePort - The number of the remote device port.
 */
methods.forwardAbstractPort = function callee$0$0(systemPort, devicePort) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Forwarding system: ' + systemPort + ' to abstract device: ' + devicePort);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adbExec(['forward', 'tcp:' + systemPort, 'localabstract:' + devicePort]));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Execute ping shell command on the device under test.
 *
 * @return {boolean} True if the command output contains 'ping' substring.
 * @throws {error} If there was an error while executing 'ping' command on the
 *                 device under test.
 */
methods.ping = function callee$0$0() {
  var stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(["echo", "ping"]));

      case 2:
        stdout = context$1$0.sent;

        if (!(stdout.indexOf("ping") === 0)) {
          context$1$0.next = 5;
          break;
        }

        return context$1$0.abrupt('return', true);

      case 5:
        throw new Error('ADB ping failed, returned ' + stdout);

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Restart the device under test using adb commands.
 *
 * @throws {error} If start fails.
 */
methods.restart = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.stopLogcat());

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.restartAdb());

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.waitForDevice(60));

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.startLogcat());

      case 9:
        context$1$0.next = 14;
        break;

      case 11:
        context$1$0.prev = 11;
        context$1$0.t0 = context$1$0['catch'](0);
        throw new Error('Restart failed. Orginial error: ' + context$1$0.t0.message);

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 11]]);
};

/**
 * Start the logcat process to gather logs.
 *
 * @throws {error} If restart fails.
 */
methods.startLogcat = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (_lodash2['default'].isEmpty(this.logcat)) {
          context$1$0.next = 2;
          break;
        }

        throw new Error("Trying to start logcat capture but it's already started!");

      case 2:
        this.logcat = new _logcat2['default']({
          adb: this.executable,
          debug: false,
          debugTrace: false,
          clearDeviceLogsOnStart: !!this.clearDeviceLogsOnStart
        });
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.logcat.startCapture());

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Stop the active logcat process which gathers logs.
 * The call will be ignored if no logcat process is running.
 */
methods.stopLogcat = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!_lodash2['default'].isEmpty(this.logcat)) {
          context$1$0.next = 2;
          break;
        }

        return context$1$0.abrupt('return');

      case 2:
        context$1$0.prev = 2;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.logcat.stopCapture());

      case 5:
        context$1$0.prev = 5;

        this.logcat = null;
        return context$1$0.finish(5);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2,, 5, 8]]);
};

/**
 * Retrieve the output from the currently running logcat process.
 * The logcat process should be executed by {2link #startLogcat} method.
 *
 * @return {string} The collected logcat output.
 * @throws {Error} If logcat process is not running.
 */
methods.getLogcatLogs = function () {
  if (_lodash2['default'].isEmpty(this.logcat)) {
    throw new Error("Can't get logcat logs since logcat hasn't started");
  }
  return this.logcat.getLogs();
};

/**
 * Set the callback for the logcat output event.
 *
 * @param {Function} listener - The listener function, which accepts one argument. The argument is
 *                              a log record object with `timestamp`, `level` and `message` properties.
 * @throws {Error} If logcat process is not running.
 */
methods.setLogcatListener = function (listener) {
  if (_lodash2['default'].isEmpty(this.logcat)) {
    throw new Error("Logcat process hasn't been started");
  }
  this.logcat.on('output', listener);
};

/**
 * Removes the previously set callback for the logcat output event.
 *
 * @param {Function} listener - The listener function, which has been previously
 *                              passed to `setLogcatListener`
 * @throws {Error} If logcat process is not running.
 */
methods.removeLogcatListener = function (listener) {
  if (_lodash2['default'].isEmpty(this.logcat)) {
    throw new Error("Logcat process hasn't been started");
  }
  this.logcat.removeListener('output', listener);
};

/**
 * Get the list of process ids for the particular process on the device under test.
 *
 * @param {string} name - The part of process name.
 * @return {Array.<number>} The list of matched process IDs or an empty list.
 */
methods.getPIDsByName = function callee$0$0(name) {
  var stdout, pids, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, line, match;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Getting all processes with ' + name);
        context$1$0.prev = 1;

        // ps <comm> where comm is last 15 characters of package name
        if (name.length > 15) {
          name = name.substr(name.length - 15);
        }
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.shell(["ps"]));

      case 5:
        stdout = context$1$0.sent.trim();
        pids = [];
        _iteratorNormalCompletion4 = true;
        _didIteratorError4 = false;
        _iteratorError4 = undefined;
        context$1$0.prev = 10;
        _iterator4 = _getIterator(stdout.split("\n"));

      case 12:
        if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
          context$1$0.next = 24;
          break;
        }

        line = _step4.value;

        if (!(line.indexOf(name) !== -1)) {
          context$1$0.next = 21;
          break;
        }

        match = /[^\t ]+[\t ]+([0-9]+)/.exec(line);

        if (!match) {
          context$1$0.next = 20;
          break;
        }

        pids.push(parseInt(match[1], 10));
        context$1$0.next = 21;
        break;

      case 20:
        throw new Error('Could not extract PID from ps output: ' + line);

      case 21:
        _iteratorNormalCompletion4 = true;
        context$1$0.next = 12;
        break;

      case 24:
        context$1$0.next = 30;
        break;

      case 26:
        context$1$0.prev = 26;
        context$1$0.t0 = context$1$0['catch'](10);
        _didIteratorError4 = true;
        _iteratorError4 = context$1$0.t0;

      case 30:
        context$1$0.prev = 30;
        context$1$0.prev = 31;

        if (!_iteratorNormalCompletion4 && _iterator4['return']) {
          _iterator4['return']();
        }

      case 33:
        context$1$0.prev = 33;

        if (!_didIteratorError4) {
          context$1$0.next = 36;
          break;
        }

        throw _iteratorError4;

      case 36:
        return context$1$0.finish(33);

      case 37:
        return context$1$0.finish(30);

      case 38:
        return context$1$0.abrupt('return', pids);

      case 41:
        context$1$0.prev = 41;
        context$1$0.t1 = context$1$0['catch'](1);
        throw new Error('Unable to get pids for ' + name + '. Orginial error: ' + context$1$0.t1.message);

      case 44:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 41], [10, 26, 30, 38], [31,, 33, 37]]);
};

/**
 * Get the list of process ids for the particular process on the device under test.
 *
 * @param {string} name - The part of process name.
 * @return {Array.<number>} The list of matched process IDs or an empty list.
 */
methods.killProcessesByName = function callee$0$0(name) {
  var pids, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, pid;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;

        _loggerJs2['default'].debug('Attempting to kill all ' + name + ' processes');
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.getPIDsByName(name));

      case 4:
        pids = context$1$0.sent;

        if (!(pids.length < 1)) {
          context$1$0.next = 8;
          break;
        }

        _loggerJs2['default'].info('No ' + name + ' process found to kill, continuing...');
        return context$1$0.abrupt('return');

      case 8:
        _iteratorNormalCompletion5 = true;
        _didIteratorError5 = false;
        _iteratorError5 = undefined;
        context$1$0.prev = 11;
        _iterator5 = _getIterator(pids);

      case 13:
        if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
          context$1$0.next = 20;
          break;
        }

        pid = _step5.value;
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(this.killProcessByPID(pid));

      case 17:
        _iteratorNormalCompletion5 = true;
        context$1$0.next = 13;
        break;

      case 20:
        context$1$0.next = 26;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t0 = context$1$0['catch'](11);
        _didIteratorError5 = true;
        _iteratorError5 = context$1$0.t0;

      case 26:
        context$1$0.prev = 26;
        context$1$0.prev = 27;

        if (!_iteratorNormalCompletion5 && _iterator5['return']) {
          _iterator5['return']();
        }

      case 29:
        context$1$0.prev = 29;

        if (!_didIteratorError5) {
          context$1$0.next = 32;
          break;
        }

        throw _iteratorError5;

      case 32:
        return context$1$0.finish(29);

      case 33:
        return context$1$0.finish(26);

      case 34:
        context$1$0.next = 39;
        break;

      case 36:
        context$1$0.prev = 36;
        context$1$0.t1 = context$1$0['catch'](0);
        throw new Error('Unable to kill ' + name + ' processes. Original error: ' + context$1$0.t1.message);

      case 39:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 36], [11, 22, 26, 34], [27,, 29, 33]]);
};

/**
 * Kill the particular process on the device under test.
 *
 * @param {string|number} pid - The ID of the process to be killed.
 * @return {string} Kill command stdout.
 * @throws {Error} If the process with given ID is not present or cannot be killed.
 */
methods.killProcessByPID = function callee$0$0(pid) {
  var timeoutMs, stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this3 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Attempting to kill process ' + pid);
        // Just to check if the process exists and throw an exception otherwise
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.shell(['kill', '-0', pid]));

      case 3:
        timeoutMs = 1000;
        stdout = undefined;
        context$1$0.prev = 5;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.prev = 0;
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(this.shell(['kill', pid]));

              case 3:
                stdout = context$2$0.sent;
                return context$2$0.abrupt('return', false);

              case 7:
                context$2$0.prev = 7;
                context$2$0.t0 = context$2$0['catch'](0);
                return context$2$0.abrupt('return', true);

              case 10:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this3, [[0, 7]]);
        }, { waitMs: timeoutMs, intervalMs: 300 }));

      case 8:
        context$1$0.next = 16;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](5);

        _loggerJs2['default'].warn('Cannot kill process ' + pid + ' in ' + timeoutMs + ' ms. Trying to force kill...');
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(this.shell(['kill', '-9', pid]));

      case 15:
        stdout = context$1$0.sent;

      case 16:
        return context$1$0.abrupt('return', stdout);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[5, 10]]);
};

/**
 * Broadcast process killing on the device under test.
 *
 * @param {string} intent - The name of the intent to broadcast to.
 * @param {string} processName - The name of the killed process.
 * @throws {error} If the process was not killed.
 */
methods.broadcastProcessEnd = function callee$0$0(intent, processName) {
  var start, timeoutMs;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        // start the broadcast without waiting for it to finish.
        this.broadcast(intent);
        // wait for the process to end
        start = Date.now();
        timeoutMs = 40000;
        context$1$0.prev = 3;

      case 4:
        if (!(Date.now() - start < timeoutMs)) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.processExists(processName));

      case 7:
        if (!context$1$0.sent) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 10;
        return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(400));

      case 10:
        return context$1$0.abrupt('continue', 4);

      case 11:
        return context$1$0.abrupt('return');

      case 14:
        throw new Error('Process never died within ' + timeoutMs + ' ms');

      case 17:
        context$1$0.prev = 17;
        context$1$0.t0 = context$1$0['catch'](3);
        throw new Error('Unable to broadcast process end. Original error: ' + context$1$0.t0.message);

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[3, 17]]);
};

/**
 * Broadcast a message to the given intent.
 *
 * @param {string} intent - The name of the intent to broadcast to.
 * @throws {error} If intent name is not a valid class name.
 */
methods.broadcast = function callee$0$0(intent) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isValidClass(intent)) {
          context$1$0.next = 2;
          break;
        }

        throw new Error('Invalid intent ' + intent);

      case 2:
        _loggerJs2['default'].debug('Broadcasting: ' + intent);
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.shell(['am', 'broadcast', '-a', intent]));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Kill Android instruments if they are currently running.
 */
methods.endAndroidCoverage = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(this.instrumentProc && this.instrumentProc.isRunning)) {
          context$1$0.next = 3;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.instrumentProc.stop());

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Instrument the particular activity.
 *
 * @param {string} pkg - The name of the package to be instrumented.
 * @param {string} activity - The name of the main activity in this package.
 * @param {string} instrumentWith - The name of the package to instrument
 *                                  the activity with.
 * @throws {error} If any exception is reported by adb shell.
 */
methods.instrument = function callee$0$0(pkg, activity, instrumentWith) {
  var pkgActivity, stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (activity[0] !== ".") {
          pkg = "";
        }
        pkgActivity = (pkg + activity).replace(/\.+/g, '.');
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.shell(['am', 'instrument', '-e', 'main_activity', pkgActivity, instrumentWith]));

      case 4:
        stdout = context$1$0.sent;

        if (!(stdout.indexOf("Exception") !== -1)) {
          context$1$0.next = 7;
          break;
        }

        throw new Error('Unknown exception during instrumentation. ' + ('Original error ' + stdout.split("\n")[0]));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Collect Android coverage by instrumenting the particular activity.
 *
 * @param {string} instrumentClass - The name of the instrumentation class.
 * @param {string} waitPkg - The name of the package to be instrumented.
 * @param {string} waitActivity - The name of the main activity in this package.
 *
 * @return {promise} The promise is successfully resolved if the instrumentation starts
 *                   without errors.
 */
methods.androidCoverage = function callee$0$0(instrumentClass, waitPkg, waitActivity) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this4 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isValidClass(instrumentClass)) {
          context$1$0.next = 2;
          break;
        }

        throw new Error('Invalid class ' + instrumentClass);

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(new _bluebird2['default'](function callee$1$0(resolve, reject) {
          var args;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                args = this.executable.defaultArgs.concat(['shell', 'am', 'instrument', '-e', 'coverage', 'true', '-w']).concat([instrumentClass]);

                _loggerJs2['default'].debug('Collecting coverage data with: ' + [this.executable.path].concat(args).join(' '));
                context$2$0.prev = 2;

                // am instrument runs for the life of the app process.
                this.instrumentProc = new _teen_process.SubProcess(this.executable.path, args);
                context$2$0.next = 6;
                return _regeneratorRuntime.awrap(this.instrumentProc.start(0));

              case 6:
                this.instrumentProc.on('output', function (stdout, stderr) {
                  if (stderr) {
                    reject(new Error('Failed to run instrumentation. Original error: ' + stderr));
                  }
                });
                context$2$0.next = 9;
                return _regeneratorRuntime.awrap(this.waitForActivity(waitPkg, waitActivity));

              case 9:
                resolve();
                context$2$0.next = 15;
                break;

              case 12:
                context$2$0.prev = 12;
                context$2$0.t0 = context$2$0['catch'](2);

                reject(new Error('Android coverage failed. Original error: ' + context$2$0.t0.message));

              case 15:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this4, [[2, 12]]);
        }));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Get the particular property of the device under test.
 *
 * @param {string} property - The name of the property. This name should
 *                            be known to _adb shell getprop_ tool.
 *
 * @return {string} The value of the given property.
 */
methods.getDeviceProperty = function callee$0$0(property) {
  var stdout, val;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['getprop', property]));

      case 2:
        stdout = context$1$0.sent;
        val = stdout.trim();

        _loggerJs2['default'].debug('Current device property \'' + property + '\': ' + val);
        return context$1$0.abrupt('return', val);

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Set the particular property of the device under test.
 *
 * @param {string} property - The name of the property. This name should
 *                            be known to _adb shell setprop_ tool.
 * @param {string} val - The new property value.
 *
 * @throws {error} If _setprop_ utility fails to change property value.
 */
methods.setDeviceProperty = function callee$0$0(prop, val) {
  var apiLevel, err;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 2:
        apiLevel = context$1$0.sent;

        if (!(apiLevel >= 26)) {
          context$1$0.next = 7;
          break;
        }

        _loggerJs2['default'].debug('Running adb root, Android O needs adb to be rooted to setDeviceProperty');
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.root());

      case 7:
        _loggerJs2['default'].debug('Setting device property \'' + prop + '\' to \'' + val + '\'');
        err = undefined;
        context$1$0.prev = 9;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.shell(['setprop', prop, val]));

      case 12:
        context$1$0.next = 17;
        break;

      case 14:
        context$1$0.prev = 14;
        context$1$0.t0 = context$1$0['catch'](9);

        err = context$1$0.t0;

      case 17:
        if (!(apiLevel >= 26)) {
          context$1$0.next = 21;
          break;
        }

        _loggerJs2['default'].debug('Removing adb root for setDeviceProperty');
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(this.unroot());

      case 21:
        if (!err) {
          context$1$0.next = 23;
          break;
        }

        throw err;

      case 23:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[9, 14]]);
};

/**
 * @return {string} Current system language on the device under test.
 */
// eslint-disable-line curly
methods.getDeviceSysLanguage = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceProperty("persist.sys.language"));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Set the new system language on the device under test.
 *
 * @param {string} language - The new language value.
 */
methods.setDeviceSysLanguage = function callee$0$0(language) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setDeviceProperty("persist.sys.language", language.toLowerCase()));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * @return {string} Current country name on the device under test.
 */
methods.getDeviceSysCountry = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceProperty("persist.sys.country"));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Set the new system country on the device under test.
 *
 * @param {string} country - The new country value.
 */
methods.setDeviceSysCountry = function callee$0$0(country) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setDeviceProperty("persist.sys.country", country.toUpperCase()));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * @return {string} Current system locale name on the device under test.
 */
methods.getDeviceSysLocale = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceProperty("persist.sys.locale"));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Set the new system locale on the device under test.
 *
 * @param {string} locale - The new locale value.
 */
methods.setDeviceSysLocale = function callee$0$0(locale) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setDeviceProperty("persist.sys.locale", locale));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * @return {string} Current product language name on the device under test.
 */
methods.getDeviceProductLanguage = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceProperty("ro.product.locale.language"));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * @return {string} Current product country name on the device under test.
 */
methods.getDeviceProductCountry = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceProperty("ro.product.locale.region"));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * @return {string} Current product locale name on the device under test.
 */
methods.getDeviceProductLocale = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceProperty("ro.product.locale"));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * @return {string} The model name of the device under test.
 */
methods.getModel = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceProperty("ro.product.model"));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * @return {string} The manufacturer name of the device under test.
 */
methods.getManufacturer = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceProperty("ro.product.manufacturer"));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Get the current screen size.
 *
 * @return {string} Device screen size as string in format 'WxH' or
 *                  _null_ if it cannot be determined.
 */
methods.getScreenSize = function callee$0$0() {
  var stdout, size;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['wm', 'size']));

      case 2:
        stdout = context$1$0.sent;
        size = new RegExp(/Physical size: ([^\r?\n]+)*/g).exec(stdout);

        if (!(size && size.length >= 2)) {
          context$1$0.next = 6;
          break;
        }

        return context$1$0.abrupt('return', size[1].trim());

      case 6:
        return context$1$0.abrupt('return', null);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Get the current screen density in dpi
 *
 * @return {?number} Device screen density as a number or _null_ if it
 *                  cannot be determined
 */
methods.getScreenDensity = function callee$0$0() {
  var stdout, density, densityNumber;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['wm', 'density']));

      case 2:
        stdout = context$1$0.sent;
        density = new RegExp(/Physical density: ([^\r?\n]+)*/g).exec(stdout);

        if (!(density && density.length >= 2)) {
          context$1$0.next = 7;
          break;
        }

        densityNumber = parseInt(density[1].trim(), 10);
        return context$1$0.abrupt('return', isNaN(densityNumber) ? null : densityNumber);

      case 7:
        return context$1$0.abrupt('return', null);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Setup HTTP proxy in device settings.
 *
 * @param {string} proxyHost - The host name of the proxy.
 * @param {string|number} proxyPort - The port number to be set.
 */
methods.setHttpProxy = function callee$0$0(proxyHost, proxyPort) {
  var proxy;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        proxy = proxyHost + ':' + proxyPort;

        if (!_lodash2['default'].isUndefined(proxyHost)) {
          context$1$0.next = 3;
          break;
        }

        throw new Error('Call to setHttpProxy method with undefined proxy_host: ' + proxy);

      case 3:
        if (!_lodash2['default'].isUndefined(proxyPort)) {
          context$1$0.next = 5;
          break;
        }

        throw new Error('Call to setHttpProxy method with undefined proxy_port ' + proxy);

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.setSetting('global', 'http_proxy', proxy));

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.setSetting('secure', 'http_proxy', proxy));

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.setSetting('system', 'http_proxy', proxy));

      case 11:
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(this.setSetting('system', 'global_http_proxy_host', proxyHost));

      case 13:
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(this.setSetting('system', 'global_http_proxy_port', proxyPort));

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Set device property.
 * [android.provider.Settings]{@link https://developer.android.com/reference/android/provider/Settings.html}
 *
 * @param {string} namespace - one of {system, secure, global}, case-insensitive.
 * @param {string} setting - property name.
 * @param {string|number} value - property value.
 * @return {string} command output.
 */
methods.setSetting = function callee$0$0(namespace, setting, value) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['settings', 'put', namespace, setting, value]));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Get device property.
 * [android.provider.Settings]{@link https://developer.android.com/reference/android/provider/Settings.html}
 *
 * @param {string} namespace - one of {system, secure, global}, case-insensitive.
 * @param {string} setting - property name.
 * @return {string} property value.
 */
methods.getSetting = function callee$0$0(namespace, setting) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['settings', 'get', namespace, setting]));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Retrieve the `adb bugreport` command output. This
 * operation may take up to several minutes.
 *
 * @param {?number} timeout [120000] - Command timeout in milliseconds
 * @returns {string} Command stdout
 */
methods.bugreport = function callee$0$0() {
  var timeout = arguments.length <= 0 || arguments[0] === undefined ? 120000 : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adbExec(['bugreport'], { timeout: timeout }));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * @typedef {Object} ScreenrecordOptions
 * @property {?string} videoSize - The format is widthxheight.
 *                  The default value is the device's native display resolution (if supported),
 *                  1280x720 if not. For best results,
 *                  use a size supported by your device's Advanced Video Coding (AVC) encoder.
 *                  For example, "1280x720"
 * @property {?boolean} bugReport - Set it to `true` in order to display additional information on the video overlay,
 *                                  such as a timestamp, that is helpful in videos captured to illustrate bugs.
 *                                  This option is only supported since API level 27 (Android P).
 * @property {?string|number} timeLimit - The maximum recording time, in seconds.
 *                                        The default (and maximum) value is 180 (3 minutes).
 * @property {?string|number} bitRate - The video bit rate for the video, in megabits per second.
 *                The default value is 4. You can increase the bit rate to improve video quality,
 *                but doing so results in larger movie files.
 */

/**
 * Initiate screenrecord utility on the device
 *
 * @param {string} destination - Full path to the writable media file destination
 *                               on the device file system.
 * @param {?ScreenrecordOptions} options [{}]
 * @returns {SubProcess} screenrecord process, which can be then controlled by the client code
 */
methods.screenrecord = function (destination) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var cmd = ['screenrecord'];
  var videoSize = options.videoSize;
  var bitRate = options.bitRate;
  var timeLimit = options.timeLimit;
  var bugReport = options.bugReport;

  if (_appiumSupport.util.hasValue(videoSize)) {
    cmd.push('--size', videoSize);
  }
  if (_appiumSupport.util.hasValue(timeLimit)) {
    cmd.push('--time-limit', timeLimit);
  }
  if (_appiumSupport.util.hasValue(bitRate)) {
    cmd.push('--bit-rate', bitRate);
  }
  if (bugReport) {
    cmd.push('--bugreport');
  }
  cmd.push(destination);

  var fullCmd = [].concat(_toConsumableArray(this.executable.defaultArgs), ['shell'], cmd);
  _loggerJs2['default'].debug('Building screenrecord process with the command line: adb ' + (0, _shellQuote.quote)(fullCmd));
  return new _teen_process.SubProcess(this.executable.path, fullCmd);
};

exports['default'] = methods;
module.exports = exports['default'];

/**
 * If apk not provided, considering apk already installed on the device
 * and fetching targetSdk using package name.
 */

/**
 * If the device is running Android 6.0(API 23) or higher, and your app's target SDK is 23 or higher:
 * The app has to list the permissions in the manifest.
 * refer: https://developer.android.com/training/permissions/requesting.html
 */

// As it consumes more time for granting each permission,
// trying to grant all permission by forming equivalent command.
// Also, it is necessary to split long commands into chunks, since the maximum length of
// adb shell buffer is limited

// keycode must be an int.

// optional debugging
// if the method is not working, turn it on and send us the output

// A workaround for https://code.google.com/p/android/issues/detail?id=206180

// pull folder can take more time, increasing time out to 60 secs

// kill returns non-zero code if the process is already killed

// cool down
// Fix pkg..activity error
//# sourceMappingURL=data:application/json;charset=utf8;base64,
