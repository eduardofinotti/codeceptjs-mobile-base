'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _2 = require('../..');

var _3 = _interopRequireDefault(_2);

var _libBasedriverImageElement = require('../../lib/basedriver/image-element');

var _libProtocolProtocol = require('../../lib/protocol/protocol');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var defRect = { x: 100, y: 110, width: 50, height: 25 };
var defTemplate = 'iVBORasdf';

describe('ImageElement', function () {
  var driver = new _3['default']();

  describe('.size', function () {
    it('should return the width and height of the image el', function () {
      var el = new _2.ImageElement(defTemplate, defRect);
      el.size.should.eql({ width: defRect.width, height: defRect.height });
    });
  });

  describe('.location', function () {
    it('should return the location of the image el', function () {
      var el = new _2.ImageElement(defTemplate, defRect);
      el.location.should.eql({ x: defRect.x, y: defRect.y });
    });
  });

  describe('.center', function () {
    it('should return the center location of the image el', function () {
      var el = new _2.ImageElement(defTemplate, defRect);
      el.center.should.eql({
        x: defRect.x + defRect.width / 2,
        y: defRect.y + defRect.height / 2
      });
    });
  });

  describe('.asElement', function () {
    it('should get the webdriver object representation of the element', function () {
      var el = new _2.ImageElement(defTemplate, defRect);
      el.asElement("ELEMENT").ELEMENT.should.match(/^appium-image-el/);
    });
  });

  describe('.equals', function () {
    it('should say two image elements with same rect are equal', function () {
      var el1 = new _2.ImageElement('foo', defRect);
      var el2 = new _2.ImageElement('bar', defRect);
      el1.equals(el2).should.be['true'];
      el2.equals(el1).should.be['true'];
    });
    it('should say two image elements with different rect are not equal', function () {
      var el1 = new _2.ImageElement(defTemplate, _extends({}, defRect, { x: 0 }));
      var el2 = new _2.ImageElement(defTemplate, defRect);
      el1.equals(el2).should.be['false'];
      el2.equals(el1).should.be['false'];
    });
  });

  describe('.click', function () {
    it('should reject an invalid tap strategy', function callee$2$0() {
      var d, el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new _3['default']();
            el = new _2.ImageElement(defTemplate, defRect);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(d.settings.update({ imageElementTapStrategy: 'bad' }));

          case 4:
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(el.click(d).should.eventually.be.rejectedWith(/Incorrect imageElementTapStrategy/));

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should try to check for image element staleness, and throw if stale', function callee$2$0() {
      var d, el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new _3['default']();

            _sinon2['default'].stub(d, 'findByImage').throws();
            el = new _2.ImageElement(defTemplate, defRect);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(d.settings.update({
              checkForImageElementStaleness: true,
              autoUpdateImageElementPosition: false
            }));

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(el.click(d).should.eventually.be.rejectedWith(/no longer attached/));

          case 7:
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(d.settings.update({
              checkForImageElementStaleness: false,
              autoUpdateImageElementPosition: true
            }));

          case 9:
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(el.click(d).should.eventually.be.rejectedWith(/no longer attached/));

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should auto-update element position if requested', function callee$2$0() {
      var d, el, newRect, elPos2;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new _3['default']();

            d.performActions = _lodash2['default'].noop;
            _sinon2['default'].stub(d, 'performActions');
            el = new _2.ImageElement(defTemplate, defRect);
            newRect = _extends({}, defRect, { x: defRect.x + 10, y: defRect.y + 5 });
            elPos2 = new _2.ImageElement(defTemplate, newRect);

            _sinon2['default'].stub(d, 'findByImage').returns(elPos2);
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(d.settings.update({
              autoUpdateImageElementPosition: true
            }));

          case 9:
            el.rect.should.not.eql(newRect);
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(el.click(d));

          case 12:
            el.rect.should.eql(newRect);

          case 13:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should tap the center of an element using w3c actions by default', function callee$2$0() {
      var d, actionStub, el, pointerMoveAction;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new _3['default']();

            d.performActions = _lodash2['default'].noop;
            actionStub = _sinon2['default'].stub(d, 'performActions');
            el = new _2.ImageElement(defTemplate, defRect);
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(d.settings.update({
              checkForImageElementStaleness: false
            }));

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(el.click(d));

          case 8:
            pointerMoveAction = actionStub.args[0][0][0].actions[0];

            pointerMoveAction.x.should.equal(el.center.x);
            pointerMoveAction.y.should.equal(el.center.y);

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should fall back to touchactions if w3c actions do not exist on driver', function callee$2$0() {
      var d, actionStub, el, action;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new _3['default']();

            d.performTouch = _lodash2['default'].noop;
            actionStub = _sinon2['default'].stub(d, 'performTouch');
            el = new _2.ImageElement(defTemplate, defRect);
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(d.settings.update({
              checkForImageElementStaleness: false
            }));

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(el.click(d));

          case 8:
            action = actionStub.args[0][0][0].options;

            action.x.should.equal(el.center.x);
            action.y.should.equal(el.center.y);

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should use touchactions if requested', function callee$2$0() {
      var d, w3cStub, touchStub, el, action;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new _3['default']();

            d.performActions = _lodash2['default'].noop;
            w3cStub = _sinon2['default'].stub(d, 'performActions');

            d.performTouch = _lodash2['default'].noop;
            touchStub = _sinon2['default'].stub(d, 'performTouch');
            el = new _2.ImageElement(defTemplate, defRect);
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(d.settings.update({
              checkForImageElementStaleness: false,
              imageElementTapStrategy: 'touchActions'
            }));

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(el.click(d));

          case 10:
            action = touchStub.args[0][0][0].options;

            action.x.should.equal(el.center.x);
            action.y.should.equal(el.center.y);
            w3cStub.callCount.should.eql(0);

          case 14:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw if driver does not implement any type of action', function callee$2$0() {
      var d, el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new _3['default']();
            el = new _2.ImageElement(defTemplate, defRect);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(d.settings.update({
              checkForImageElementStaleness: false
            }));

          case 4:
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(el.click(d).should.eventually.be.rejectedWith(/did not implement/));

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('#execute', function () {
    var imgEl = new _2.ImageElement(defTemplate, defRect);
    var clickStub = _sinon2['default'].stub(imgEl, 'click');

    before(function () {
      driver._imgElCache.set(imgEl.id, imgEl);
      clickStub.returns(true);
    });

    after(function () {
      driver._imgElCache.reset();
      clickStub.restore();
    });

    it('should reject executions on elements not in the cache', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_2.ImageElement.execute(driver, 'click', 'appium-image-element-foo').should.eventually.be.rejectedWith(/element could not be located/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should reject executions for unsupported commands', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_2.ImageElement.execute(driver, 'foobar', imgEl.id).should.eventually.be.rejectedWith(/not yet been implemented/));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get displayed status of element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_2.ImageElement.execute(driver, 'elementDisplayed', imgEl.id).should.eventually.be['true']);

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get size of element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_2.ImageElement.execute(driver, 'getSize', imgEl.id).should.eventually.eql({ width: defRect.width, height: defRect.height }));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get location of element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_2.ImageElement.execute(driver, 'getLocation', imgEl.id).should.eventually.eql({ x: defRect.x, y: defRect.y }));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get location in view of element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_2.ImageElement.execute(driver, 'getLocation', imgEl.id).should.eventually.eql({ x: defRect.x, y: defRect.y }));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should get rect of element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_2.ImageElement.execute(driver, 'getElementRect', imgEl.id).should.eventually.eql(defRect));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should click element', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_2.ImageElement.execute(driver, 'click', imgEl.id).should.eventually.be['true']);

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});

describe('image element LRU cache', function () {
  it('should accept and cache image elements', function () {
    var el1 = new _2.ImageElement(defTemplate, defRect);
    var el2 = new _2.ImageElement(defTemplate, defRect);
    var cache = (0, _libBasedriverImageElement.makeImageElementCache)();
    cache.set(el1.id, el1);
    el1.equals(cache.get(el1.id)).should.be['true'];
    _lodash2['default'].isUndefined(cache.get(el2.id)).should.be['true'];
    cache.has(el1.id).should.be['true'];
    cache.has(el2.id).should.be['false'];
  });
  it('once cache reaches max size, should eject image elements', function () {
    var el1 = new _2.ImageElement(defTemplate, defRect);
    var el2 = new _2.ImageElement(defTemplate, defRect);
    var cache = (0, _libBasedriverImageElement.makeImageElementCache)(defTemplate.length + 1);
    cache.set(el1.id, el1);
    cache.has(el1.id).should.be['true'];
    cache.set(el2.id, el2);
    cache.has(el2.id).should.be['true'];
    cache.has(el1.id).should.be['false'];
  });
});

describe('getImgElFromArgs', function () {
  it('should return the image element id from json obj in args', function () {
    var imgEl = _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'foo';
    var args = [1, 'foo', imgEl];
    (0, _libBasedriverImageElement.getImgElFromArgs)(args).should.eql(imgEl);
  });
  it('should not return anything if image element id not in args', function () {
    var args = [1, 'foo'];
    _lodash2['default'].isUndefined((0, _libBasedriverImageElement.getImgElFromArgs)(args)).should.be['true'];
  });
  it('should not find image element id in anything but prefix', function () {
    var notImgEl = 'foo' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX;
    var args = [1, 'foo', notImgEl];
    _lodash2['default'].isUndefined((0, _libBasedriverImageElement.getImgElFromArgs)(args)).should.be['true'];
  });
});

// we need to check for staleness if explicitly requested to do so

// and also if we are updating the element position

// skip the staleness check for this test

// skip the staleness check for this test

// skip the staleness check for this test

// skip the staleness check for this test
//# sourceMappingURL=data:application/json;charset=utf8;base64,
