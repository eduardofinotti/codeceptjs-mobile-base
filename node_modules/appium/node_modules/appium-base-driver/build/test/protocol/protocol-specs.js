require('source-map-support').install();

'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

require('../..');

// NOTE: For some reason this file needs to be imported to prevent a babel error

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _libProtocolProtocol = require('../../lib/protocol/protocol');

var _libBasedriverDriver = require('../../lib/basedriver/driver');

var _libBasedriverDriver2 = _interopRequireDefault(_libBasedriverDriver);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Protocol', function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:

        describe('#parseProtocol', function () {
          it('should parse {protocol: "MJSONWP"} as MJSONWP', function () {
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'MJSONWP', value: undefined }).should.eql({ isW3C: false, isMJSONWP: true, value: undefined });
          });
          it('should parse {protocol: "W3C"} as W3C', function () {
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'W3C', value: undefined }).should.eql({ isW3C: true, isMJSONWP: false, value: undefined });
          });
          it('should parse {protocol: "MJSONWP", value: false} as MJSONWP with value: false', function () {
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'MJSONWP', value: false }).should.eql({ isW3C: false, isMJSONWP: true, value: false });
          });
          it('should parse {protocol: "W3C", value: 0} as W3C with value: 0', function () {
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'W3C', value: 0 }).should.eql({ isW3C: true, isMJSONWP: false, value: 0 });
          });
          it('should parse {protocol: "MJSONWP", value: "string"}', function () {
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'MJSONWP', value: "string" }).should.eql({ isW3C: false, isMJSONWP: true, value: "string" });
          });
          it('should parse {protocol: "W3C", value: {obj}}', function () {
            var value = { hello: 'world', goodbye: 'whirl' };
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'MJSONWP', value: value }).should.eql({ isW3C: false, isMJSONWP: true, value: value });
          });
          it('should throw if {protocol: "MJSONWP", error}', function () {
            var error = new Error('some error');
            (0, _libProtocolProtocol.parseProtocol)({ protocol: 'W3C', error: error }).error.should.equal(error);
          });
        });

        describe('#driverShouldDoJwpProxy', function () {
          it('should not proxy if an image element is found in request url', function () {
            var d = new _libBasedriverDriver2['default']();
            _sinon2['default'].stub(d, 'proxyActive').returns(true);
            _sinon2['default'].stub(d, 'proxyRouteIsAvoided').returns(false);
            var hasImageElements = ['/wd/hub/session/:sessionId/element/' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'bar', '/wd/hub/session/:sessionId/element/' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'bar/click', '/wd/hub/session/:sessionId/element/' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'bar/submit', '/wd/hub/session/:sessionId/screenshot/' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'bar'];
            var noImageElements = ['/wd/hub/session/:sessionId/element/' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX, '/wd/hub/session/:sessionId/screenshot/' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX, '/wd/hub/session/:sessionId/element/bar' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX, '/wd/hub/session/:sessionId/element/element123', '/wd/hub/session/:sessionId/title', '/wd/hub/session/:sessionId/notelement/' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'bar'];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = _getIterator(hasImageElements), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var testCase = _step.value;

                var req = { body: {}, params: {}, originalUrl: testCase };
                (0, _libProtocolProtocol.driverShouldDoJwpProxy)(d, req, null).should.be['false'];
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator['return']) {
                  _iterator['return']();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = _getIterator(noImageElements), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var testCase = _step2.value;

                var req = { body: {}, params: {}, originalUrl: testCase };
                (0, _libProtocolProtocol.driverShouldDoJwpProxy)(d, req, null).should.be['true'];
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                  _iterator2['return']();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          });
          it('should not proxy if an image element is found in request body', function () {
            var d = new _libBasedriverDriver2['default']();
            _sinon2['default'].stub(d, 'proxyActive').returns(true);
            _sinon2['default'].stub(d, 'proxyRouteIsAvoided').returns(false);
            var hasImageElements = [_defineProperty({}, _libProtocolProtocol.W3C_ELEMENT_KEY, _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'bar'), _defineProperty({}, _libProtocolProtocol.W3C_ELEMENT_KEY, _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'foo'), _defineProperty({}, _libProtocolProtocol.MJSONWP_ELEMENT_KEY, _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'bar')];
            var noImageElements = [_defineProperty({}, _libProtocolProtocol.IMAGE_ELEMENT_PREFIX, 'foo'), _defineProperty({}, _libProtocolProtocol.W3C_ELEMENT_KEY, '' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX), _defineProperty({}, _libProtocolProtocol.MJSONWP_ELEMENT_KEY, '' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX), {
              foo: 'bar'
            }, _defineProperty({}, _libProtocolProtocol.W3C_ELEMENT_KEY, 'bar'), _defineProperty({}, _libProtocolProtocol.MJSONWP_ELEMENT_KEY, 'bar'), {
              foo: _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'bar'
            }, {
              foo: 'bar' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX
            }, _defineProperty({}, _libProtocolProtocol.W3C_ELEMENT_KEY, 'bar' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX), _defineProperty({}, _libProtocolProtocol.MJSONWP_ELEMENT_KEY, 'bar' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX)];
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              for (var _iterator3 = _getIterator(hasImageElements), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var testCase = _step3.value;

                var req = { body: testCase, params: {} };
                (0, _libProtocolProtocol.driverShouldDoJwpProxy)(d, req, null).should.be['false'];
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                  _iterator3['return']();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = _getIterator(noImageElements), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var testCase = _step4.value;

                var req = { body: testCase, params: {} };
                (0, _libProtocolProtocol.driverShouldDoJwpProxy)(d, req, null).should.be['true'];
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4['return']) {
                  _iterator4['return']();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }
          });
        });

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
