'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function isNumber(o) {
  return _lodash2['default'].isNumber(o) || !_lodash2['default'].isNaN(parseInt(o, 10)) || !_lodash2['default'].isNaN(parseFloat(o));
}

function msValidator(ms) {
  if (!_lodash2['default'].isNumber(ms) || ms < 0) {
    throw new Error('Wait ms must be a number equal to 0 or greater');
  }
}

var validators = {
  setUrl: function setUrl(url) {
    // either an `xyz://`, `about:`, or `data:` scheme is allowed
    if (!url || !url.match(/^([a-zA-Z0-9_+.-]+:\/\/)|(about:)|(data:)/)) {
      throw new Error('Url or Uri must start with <scheme>://');
    }
  },
  implicitWait: function implicitWait(ms) {
    msValidator(ms);
  },
  asyncScriptTimeout: function asyncScriptTimeout(ms) {
    msValidator(ms);
  },
  clickCurrent: function clickCurrent(button) {
    if (!(isNumber(button) || _lodash2['default'].isUndefined(button)) || button < 0 || button > 2) {
      throw new Error('Click button must be 0, 1, or 2');
    }
  },
  setNetworkConnection: function setNetworkConnection(type) {
    if (!isNumber(type) || [0, 1, 2, 4, 6].indexOf(type) === -1) {
      throw new Error('Network type must be one of 0, 1, 2, 4, 6');
    }
  }
};

exports.validators = validators;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wcm90b2NvbC92YWxpZGF0b3JzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O3NCQUFjLFFBQVE7Ozs7QUFFdEIsU0FBUyxRQUFRLENBQUUsQ0FBQyxFQUFFO0FBQ3BCLFNBQU8sb0JBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLG9CQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM5RTs7QUFFRCxTQUFTLFdBQVcsQ0FBRSxFQUFFLEVBQUU7QUFDeEIsTUFBSSxDQUFDLG9CQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFO0FBQzdCLFVBQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQztHQUNuRTtDQUNGOztBQUVELElBQU0sVUFBVSxHQUFHO0FBQ2pCLFFBQU0sRUFBRSxnQkFBQyxHQUFHLEVBQUs7O0FBRWYsUUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsMkNBQTJDLENBQUMsRUFBRTtBQUNuRSxZQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7S0FDM0Q7R0FDRjtBQUNELGNBQVksRUFBRSxzQkFBQyxFQUFFLEVBQUs7QUFDcEIsZUFBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ2pCO0FBQ0Qsb0JBQWtCLEVBQUUsNEJBQUMsRUFBRSxFQUFLO0FBQzFCLGVBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztHQUNqQjtBQUNELGNBQVksRUFBRSxzQkFBQyxNQUFNLEVBQUs7QUFDeEIsUUFBSSxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxvQkFBRSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUEsQUFBQyxJQUFLLE1BQU0sR0FBRyxDQUFDLElBQUksTUFBTSxHQUFHLENBQUMsQUFBQyxFQUFFO0FBQzlFLFlBQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztLQUNwRDtHQUNGO0FBQ0Qsc0JBQW9CLEVBQUUsOEJBQUMsSUFBSSxFQUFLO0FBQzlCLFFBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO0FBQzNELFlBQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztLQUM5RDtHQUNGO0NBQ0YsQ0FBQzs7UUFFTyxVQUFVLEdBQVYsVUFBVSIsImZpbGUiOiJsaWIvcHJvdG9jb2wvdmFsaWRhdG9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyIChvKSB7XG4gIHJldHVybiBfLmlzTnVtYmVyKG8pIHx8ICFfLmlzTmFOKHBhcnNlSW50KG8sIDEwKSkgfHwgIV8uaXNOYU4ocGFyc2VGbG9hdChvKSk7XG59XG5cbmZ1bmN0aW9uIG1zVmFsaWRhdG9yIChtcykge1xuICBpZiAoIV8uaXNOdW1iZXIobXMpIHx8IG1zIDwgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignV2FpdCBtcyBtdXN0IGJlIGEgbnVtYmVyIGVxdWFsIHRvIDAgb3IgZ3JlYXRlcicpO1xuICB9XG59XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB7XG4gIHNldFVybDogKHVybCkgPT4ge1xuICAgIC8vIGVpdGhlciBhbiBgeHl6Oi8vYCwgYGFib3V0OmAsIG9yIGBkYXRhOmAgc2NoZW1lIGlzIGFsbG93ZWRcbiAgICBpZiAoIXVybCB8fCAhdXJsLm1hdGNoKC9eKFthLXpBLVowLTlfKy4tXSs6XFwvXFwvKXwoYWJvdXQ6KXwoZGF0YTopLykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVXJsIG9yIFVyaSBtdXN0IHN0YXJ0IHdpdGggPHNjaGVtZT46Ly8nKTtcbiAgICB9XG4gIH0sXG4gIGltcGxpY2l0V2FpdDogKG1zKSA9PiB7XG4gICAgbXNWYWxpZGF0b3IobXMpO1xuICB9LFxuICBhc3luY1NjcmlwdFRpbWVvdXQ6IChtcykgPT4ge1xuICAgIG1zVmFsaWRhdG9yKG1zKTtcbiAgfSxcbiAgY2xpY2tDdXJyZW50OiAoYnV0dG9uKSA9PiB7XG4gICAgaWYgKCEoaXNOdW1iZXIoYnV0dG9uKSB8fCBfLmlzVW5kZWZpbmVkKGJ1dHRvbikpIHx8IChidXR0b24gPCAwIHx8IGJ1dHRvbiA+IDIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NsaWNrIGJ1dHRvbiBtdXN0IGJlIDAsIDEsIG9yIDInKTtcbiAgICB9XG4gIH0sXG4gIHNldE5ldHdvcmtDb25uZWN0aW9uOiAodHlwZSkgPT4ge1xuICAgIGlmICghaXNOdW1iZXIodHlwZSkgfHwgWzAsIDEsIDIsIDQsIDZdLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05ldHdvcmsgdHlwZSBtdXN0IGJlIG9uZSBvZiAwLCAxLCAyLCA0LCA2Jyk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgeyB2YWxpZGF0b3JzIH07XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
