'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _2 = require('../..');

var _lruCache = require('lru-cache');

var _lruCache2 = _interopRequireDefault(_lruCache);

var _protocolProtocol = require('../protocol/protocol');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _uuidJs = require('uuid-js');

var _uuidJs2 = _interopRequireDefault(_uuidJs);

var MAX_CACHE_SIZE = 1024 * 1024 * 40; // 40mb
var TAP_DURATION_MS = 125;
var IMAGE_EL_TAP_STRATEGY_W3C = 'w3cActions';
var IMAGE_EL_TAP_STRATEGY_MJSONWP = 'touchActions';
var IMAGE_TAP_STRATEGIES = [IMAGE_EL_TAP_STRATEGY_MJSONWP, IMAGE_EL_TAP_STRATEGY_W3C];

/**
 * @typedef {Object} Rect
 * @property {int} x - x-coordinate of top-left corner
 * @property {int} y - y-coordinate of top-left corner
 * @property {int} width - width of rect
 * @property {int} height - height of rect
 */

/**
 * @typedef {Object} Dimension
 * @property {int} width - width of rect
 * @property {int} height - height of rect
 */

/**
 * @typedef {Object} Position
 * @property {int} x - x coordinate
 * @property {int} y - y coordinate
 */

/**
 * Representation of an "image element", which is simply a set of coordinates
 * and methods that can be used on that set of coordinates via the driver
 */

var ImageElement = (function () {

  /**
   * @param {string} b64Template - the base64-encoded image which was used to
   * find this ImageElement
   * @param {Rect} rect - bounds of matched image element
   *
   * @returns {ImageElement}
   */

  function ImageElement(b64Template, rect) {
    _classCallCheck(this, ImageElement);

    this.template = b64Template;
    this.rect = rect;
    this.id = '' + _protocolProtocol.IMAGE_ELEMENT_PREFIX + _uuidJs2['default'].create().hex;
  }

  /**
   * @returns {Dimension} - dimension of element
   */

  _createClass(ImageElement, [{
    key: 'asElement',

    /**
     * @param {string} protocolKey - the protocol-specific JSON key for
     * a WebElement
     *
     * @returns {WebElement} - this image element as a WebElement
     */
    value: function asElement(protocolKey) {
      return _defineProperty({}, protocolKey, this.id);
    }

    /**
     * @param {ImageElement} other - an ImageElement to compare with this one
     *
     * @returns {boolean} - whether the other element and this one have the same
     * properties
     */
  }, {
    key: 'equals',
    value: function equals(other) {
      return this.rect.x === other.rect.x && this.rect.y === other.rect.y && this.rect.width === other.rect.width && this.rect.height === other.rect.height;
    }

    /**
     * Use a driver to tap the screen at the center of this ImageElement's
     * position
     *
     * @param {BaseDriver} driver - driver for calling actions with
     */
  }, {
    key: 'click',
    value: function click(driver) {
      var newImgEl, _driver$settings$getSettings, updatePos, checkForImageElementStaleness, imageElementTapStrategy, _center, x, y, _action, action;

      return _regeneratorRuntime.async(function click$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            newImgEl = undefined;
            _driver$settings$getSettings = driver.settings.getSettings();
            updatePos = _driver$settings$getSettings.autoUpdateImageElementPosition;
            checkForImageElementStaleness = _driver$settings$getSettings.checkForImageElementStaleness;
            imageElementTapStrategy = _driver$settings$getSettings.imageElementTapStrategy;

            if (IMAGE_TAP_STRATEGIES.includes(imageElementTapStrategy)) {
              context$2$0.next = 7;
              break;
            }

            throw new Error('Incorrect imageElementTapStrategy setting ' + ('\'' + imageElementTapStrategy + '\'. Must be one of ') + JSON.stringify(IMAGE_TAP_STRATEGIES));

          case 7:
            if (!(checkForImageElementStaleness || updatePos)) {
              context$2$0.next = 19;
              break;
            }

            _logger2['default'].info('Checking image element for staleness before clicking');
            context$2$0.prev = 9;
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(driver.findByImage(this.template, {
              shouldCheckStaleness: true
            }));

          case 12:
            newImgEl = context$2$0.sent;
            context$2$0.next = 18;
            break;

          case 15:
            context$2$0.prev = 15;
            context$2$0.t0 = context$2$0['catch'](9);
            throw new _2.errors.StaleElementReferenceError();

          case 18:

            if (!this.equals(newImgEl)) {
              _logger2['default'].warn('When trying to click on an image element, the image changed ' + 'position from where it was originally found. It is now at ' + (JSON.stringify(newImgEl.rect) + ' and was originally at ') + (JSON.stringify(this.rect) + '.'));
              if (updatePos) {
                _logger2['default'].warn('Click will proceed at new coordinates');
                this.rect = _lodash2['default'].clone(newImgEl.rect);
              } else {
                _logger2['default'].warn("Click will take place at original coordinates. If you " + "would like Appium to automatically click the new " + "coordinates, set the 'autoUpdateImageElementPosition' " + "setting to true");
              }
            }

          case 19:
            _center = this.center;
            x = _center.x;
            y = _center.y;

            _logger2['default'].info('Will tap on image element at coordinate [' + x + ', ' + y + ']');

            if (!(imageElementTapStrategy === IMAGE_EL_TAP_STRATEGY_W3C)) {
              context$2$0.next = 31;
              break;
            }

            // set up a W3C action to click on the image by position
            _logger2['default'].info('Will tap using W3C actions');
            _action = {
              type: 'pointer',
              id: 'mouse',
              parameters: { pointerType: 'touch' },
              actions: [{ type: 'pointerMove', x: x, y: y, duration: 0 }, { type: 'pointerDown' }, { type: 'pause', duration: TAP_DURATION_MS }, { type: 'pointerUp' }]
            };

            if (!driver.performActions) {
              context$2$0.next = 30;
              break;
            }

            context$2$0.next = 29;
            return _regeneratorRuntime.awrap(driver.performActions([_action]));

          case 29:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 30:

            // if not, warn and fall back to the other method
            _logger2['default'].warn('Driver does not seem to implement W3C actions, falling back ' + 'to TouchActions');

          case 31:

            // if the w3c strategy was not requested, do the only other option (mjsonwp
            // touch actions)
            _logger2['default'].info('Will tap using MJSONWP TouchActions');
            action = {
              action: 'tap',
              options: { x: x, y: y }
            };

            if (!driver.performTouch) {
              context$2$0.next = 37;
              break;
            }

            context$2$0.next = 36;
            return _regeneratorRuntime.awrap(driver.performTouch([action]));

          case 36:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 37:
            throw new Error("Driver did not implement the 'performTouch' command. " + "For drivers to support finding image elements, they " + "should support 'performTouch' and 'performActions'");

          case 38:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[9, 15]]);
    }

    /**
     * Handle various Appium commands that involve an image element
     *
     * @param {BaseDriver} driver - the driver to use for commands
     * @param {string} cmd - the name of the driver command
     * @param {string} imgElId - the id of the ImageElement to work with
     *
     * @returns {Object} - the result of running a command
     */
  }, {
    key: 'size',
    get: function get() {
      return { width: this.rect.width, height: this.rect.height };
    }

    /**
     * @returns {Position} - coordinates of top-left corner of element
     */
  }, {
    key: 'location',
    get: function get() {
      return { x: this.rect.x, y: this.rect.y };
    }

    /**
     * @returns {Position} - coordinates of center of element
     */
  }, {
    key: 'center',
    get: function get() {
      return {
        x: this.rect.x + this.rect.width / 2,
        y: this.rect.y + this.rect.height / 2
      };
    }
  }], [{
    key: 'execute',
    value: function execute(driver, cmd, imgElId) {
      var imgEl;
      return _regeneratorRuntime.async(function execute$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (driver._imgElCache.has(imgElId)) {
              context$2$0.next = 2;
              break;
            }

            throw new _2.errors.NoSuchElementError();

          case 2:
            imgEl = driver._imgElCache.get(imgElId);
            context$2$0.t0 = cmd;
            context$2$0.next = context$2$0.t0 === 'click' ? 6 : context$2$0.t0 === 'elementDisplayed' ? 9 : context$2$0.t0 === 'getSize' ? 10 : context$2$0.t0 === 'getLocation' ? 11 : context$2$0.t0 === 'getLocationInView' ? 11 : context$2$0.t0 === 'getElementRect' ? 12 : 13;
            break;

          case 6:
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(imgEl.click(driver));

          case 8:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 9:
            return context$2$0.abrupt('return', true);

          case 10:
            return context$2$0.abrupt('return', imgEl.size);

          case 11:
            return context$2$0.abrupt('return', imgEl.location);

          case 12:
            return context$2$0.abrupt('return', imgEl.rect);

          case 13:
            throw new _2.errors.NotYetImplementedError();

          case 14:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return ImageElement;
})();

function makeImageElementCache() {
  var max = arguments.length <= 0 || arguments[0] === undefined ? MAX_CACHE_SIZE : arguments[0];

  return (0, _lruCache2['default'])({
    max: max,
    length: function length(el) {
      return el.template.length;
    }
  });
}

function getImgElFromArgs(args) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(args), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var arg = _step.value;

      if (_lodash2['default'].isString(arg) && arg.startsWith(_protocolProtocol.IMAGE_ELEMENT_PREFIX)) {
        return arg;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

exports.ImageElement = ImageElement;
exports.getImgElFromArgs = getImgElFromArgs;
exports.makeImageElementCache = makeImageElementCache;
exports.IMAGE_EL_TAP_STRATEGY_MJSONWP = IMAGE_EL_TAP_STRATEGY_MJSONWP;
exports.IMAGE_EL_TAP_STRATEGY_W3C = IMAGE_EL_TAP_STRATEGY_W3C;

// before we click we need to make sure the element is actually still there
// where we expect it to be

// validate tap strategy

// check if the driver has the appropriate performActions method
//# sourceMappingURL=data:application/json;charset=utf8;base64,
