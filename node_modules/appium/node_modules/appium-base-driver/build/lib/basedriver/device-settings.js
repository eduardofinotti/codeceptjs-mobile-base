'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _commandsImages = require('./commands/images');

var _imageElement = require('./image-element');

var GLOBAL_DEFAULT_SETTINGS = {
  // value between 0 and 1 representing match strength, below which an image
  // element will not be found
  imageMatchThreshold: _commandsImages.DEFAULT_MATCH_THRESHOLD,

  // if the image returned by getScreenshot differs in size or aspect ratio
  // from the screen, attempt to fix it automatically
  fixImageFindScreenshotDims: true,

  // whether Appium should ensure that an image template sent in during image
  // element find should have its size adjusted so the match algorithm will not
  // complain
  fixImageTemplateSize: false,

  // whether Appium should re-check that an image element can be matched
  // against the current screenshot before clicking it
  checkForImageElementStaleness: true,

  // whether before clicking on an image element Appium should re-determine the
  // position of the element on screen
  autoUpdateImageElementPosition: false,

  // which method to use for tapping by coordinate for image elements. the
  // options are 'w3c' or 'mjsonwp'
  imageElementTapStrategy: _imageElement.IMAGE_EL_TAP_STRATEGY_W3C
};

// declare settings that are really handled only by basedriver, so downstream
// drivers can choose to ignore them for their own settings validation, etc...
var BASEDRIVER_HANDLED_SETTINGS = ['imageMatchThreshold', 'fixImageFindScreenshotDims', 'fixImageTemplateSize', 'checkForImageElementStaleness', 'autoUpdateImageElementPosition', 'imageElementTapStrategy'];

var DeviceSettings = (function () {
  function DeviceSettings() {
    var defaultSettings = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var onSettingsUpdate = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

    _classCallCheck(this, DeviceSettings);

    this._settings = _Object$assign({}, GLOBAL_DEFAULT_SETTINGS, defaultSettings);
    this.onSettingsUpdate = onSettingsUpdate;
  }

  // calls updateSettings from implementing driver every time a setting is changed.

  _createClass(DeviceSettings, [{
    key: 'update',
    value: function update(newSettings) {
      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, prop;

      return _regeneratorRuntime.async(function update$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (_lodash2['default'].isObject(newSettings)) {
              context$2$0.next = 2;
              break;
            }

            throw new Error('Settings update should be called with valid JSON');

          case 2:
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$2$0.prev = 5;
            _iterator = _getIterator(_lodash2['default'].keys(newSettings));

          case 7:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              context$2$0.next = 21;
              break;
            }

            prop = _step.value;

            if (_lodash2['default'].isUndefined(this._settings[prop])) {
              _logger2['default'].warn('Didn\'t know about setting \'' + prop + '\'. Are you sure you ' + ('spelled it correctly? Proceeding anyway. Valid settings: ' + _lodash2['default'].keys(this._settings)));
            }

            if (!(this._settings[prop] !== newSettings[prop])) {
              context$2$0.next = 18;
              break;
            }

            if (!this.onSettingsUpdate) {
              context$2$0.next = 17;
              break;
            }

            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(this.onSettingsUpdate(prop, newSettings[prop], this._settings[prop]));

          case 14:
            this._settings[prop] = newSettings[prop];
            context$2$0.next = 18;
            break;

          case 17:
            _logger2['default'].errorAndThrow('Unable to update settings; onSettingsUpdate method not found');

          case 18:
            _iteratorNormalCompletion = true;
            context$2$0.next = 7;
            break;

          case 21:
            context$2$0.next = 27;
            break;

          case 23:
            context$2$0.prev = 23;
            context$2$0.t0 = context$2$0['catch'](5);
            _didIteratorError = true;
            _iteratorError = context$2$0.t0;

          case 27:
            context$2$0.prev = 27;
            context$2$0.prev = 28;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 30:
            context$2$0.prev = 30;

            if (!_didIteratorError) {
              context$2$0.next = 33;
              break;
            }

            throw _iteratorError;

          case 33:
            return context$2$0.finish(30);

          case 34:
            return context$2$0.finish(27);

          case 35:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[5, 23, 27, 35], [28,, 30, 34]]);
    }
  }, {
    key: 'getSettings',
    value: function getSettings() {
      return this._settings;
    }
  }]);

  return DeviceSettings;
})();

exports['default'] = DeviceSettings;
exports.BASEDRIVER_HANDLED_SETTINGS = BASEDRIVER_HANDLED_SETTINGS;

// update setting only when there is updateSettings defined.
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2RldmljZS1zZXR0aW5ncy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7c0JBQWMsUUFBUTs7OztzQkFDTixVQUFVOzs7OzhCQUNjLG1CQUFtQjs7NEJBQ2pCLGlCQUFpQjs7QUFFM0QsSUFBTSx1QkFBdUIsR0FBRzs7O0FBRzlCLHFCQUFtQix5Q0FBeUI7Ozs7QUFJNUMsNEJBQTBCLEVBQUUsSUFBSTs7Ozs7QUFLaEMsc0JBQW9CLEVBQUUsS0FBSzs7OztBQUkzQiwrQkFBNkIsRUFBRSxJQUFJOzs7O0FBSW5DLGdDQUE4QixFQUFFLEtBQUs7Ozs7QUFJckMseUJBQXVCLHlDQUEyQjtDQUNuRCxDQUFDOzs7O0FBSUYsSUFBTSwyQkFBMkIsR0FBRyxDQUNsQyxxQkFBcUIsRUFDckIsNEJBQTRCLEVBQzVCLHNCQUFzQixFQUN0QiwrQkFBK0IsRUFDL0IsZ0NBQWdDLEVBQ2hDLHlCQUF5QixDQUMxQixDQUFDOztJQUVJLGNBQWM7QUFFTixXQUZSLGNBQWMsR0FFMEM7UUFBL0MsZUFBZSx5REFBRyxFQUFFO1FBQUUsZ0JBQWdCLHlEQUFHLElBQUk7OzBCQUZ0RCxjQUFjOztBQUdoQixRQUFJLENBQUMsU0FBUyxHQUFHLGVBQWMsRUFBRSxFQUFFLHVCQUF1QixFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQzdFLFFBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztHQUMxQzs7OztlQUxHLGNBQWM7O1dBUUwsZ0JBQUMsV0FBVzswRkFJZCxJQUFJOzs7OztnQkFIUixvQkFBRSxRQUFRLENBQUMsV0FBVyxDQUFDOzs7OztrQkFDcEIsSUFBSSxLQUFLLENBQUMsa0RBQWtELENBQUM7Ozs7Ozs7cUNBRXBELG9CQUFFLElBQUksQ0FBQyxXQUFXLENBQUM7Ozs7Ozs7O0FBQTNCLGdCQUFJOztBQUNYLGdCQUFJLG9CQUFFLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7QUFDdkMsa0NBQUksSUFBSSxDQUFDLGtDQUE4QixJQUFJLDRGQUMwQixvQkFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFFLENBQUMsQ0FBQzthQUNoRzs7a0JBQ0csSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7Ozs7O2lCQUV4QyxJQUFJLENBQUMsZ0JBQWdCOzs7Ozs7NkNBQ2pCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7OztBQUMxRSxnQkFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7Ozs7O0FBRXpDLGdDQUFJLGFBQWEsQ0FBQyw4REFBOEQsQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBSXpGOzs7V0FFVyx1QkFBRztBQUNiLGFBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztLQUN2Qjs7O1NBL0JHLGNBQWM7OztxQkFrQ0wsY0FBYztRQUNwQiwyQkFBMkIsR0FBM0IsMkJBQTJCIiwiZmlsZSI6ImxpYi9iYXNlZHJpdmVyL2RldmljZS1zZXR0aW5ncy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IERFRkFVTFRfTUFUQ0hfVEhSRVNIT0xEIH0gZnJvbSAnLi9jb21tYW5kcy9pbWFnZXMnO1xuaW1wb3J0IHsgSU1BR0VfRUxfVEFQX1NUUkFURUdZX1czQyB9IGZyb20gJy4vaW1hZ2UtZWxlbWVudCc7XG5cbmNvbnN0IEdMT0JBTF9ERUZBVUxUX1NFVFRJTkdTID0ge1xuICAvLyB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEgcmVwcmVzZW50aW5nIG1hdGNoIHN0cmVuZ3RoLCBiZWxvdyB3aGljaCBhbiBpbWFnZVxuICAvLyBlbGVtZW50IHdpbGwgbm90IGJlIGZvdW5kXG4gIGltYWdlTWF0Y2hUaHJlc2hvbGQ6IERFRkFVTFRfTUFUQ0hfVEhSRVNIT0xELFxuXG4gIC8vIGlmIHRoZSBpbWFnZSByZXR1cm5lZCBieSBnZXRTY3JlZW5zaG90IGRpZmZlcnMgaW4gc2l6ZSBvciBhc3BlY3QgcmF0aW9cbiAgLy8gZnJvbSB0aGUgc2NyZWVuLCBhdHRlbXB0IHRvIGZpeCBpdCBhdXRvbWF0aWNhbGx5XG4gIGZpeEltYWdlRmluZFNjcmVlbnNob3REaW1zOiB0cnVlLFxuXG4gIC8vIHdoZXRoZXIgQXBwaXVtIHNob3VsZCBlbnN1cmUgdGhhdCBhbiBpbWFnZSB0ZW1wbGF0ZSBzZW50IGluIGR1cmluZyBpbWFnZVxuICAvLyBlbGVtZW50IGZpbmQgc2hvdWxkIGhhdmUgaXRzIHNpemUgYWRqdXN0ZWQgc28gdGhlIG1hdGNoIGFsZ29yaXRobSB3aWxsIG5vdFxuICAvLyBjb21wbGFpblxuICBmaXhJbWFnZVRlbXBsYXRlU2l6ZTogZmFsc2UsXG5cbiAgLy8gd2hldGhlciBBcHBpdW0gc2hvdWxkIHJlLWNoZWNrIHRoYXQgYW4gaW1hZ2UgZWxlbWVudCBjYW4gYmUgbWF0Y2hlZFxuICAvLyBhZ2FpbnN0IHRoZSBjdXJyZW50IHNjcmVlbnNob3QgYmVmb3JlIGNsaWNraW5nIGl0XG4gIGNoZWNrRm9ySW1hZ2VFbGVtZW50U3RhbGVuZXNzOiB0cnVlLFxuXG4gIC8vIHdoZXRoZXIgYmVmb3JlIGNsaWNraW5nIG9uIGFuIGltYWdlIGVsZW1lbnQgQXBwaXVtIHNob3VsZCByZS1kZXRlcm1pbmUgdGhlXG4gIC8vIHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50IG9uIHNjcmVlblxuICBhdXRvVXBkYXRlSW1hZ2VFbGVtZW50UG9zaXRpb246IGZhbHNlLFxuXG4gIC8vIHdoaWNoIG1ldGhvZCB0byB1c2UgZm9yIHRhcHBpbmcgYnkgY29vcmRpbmF0ZSBmb3IgaW1hZ2UgZWxlbWVudHMuIHRoZVxuICAvLyBvcHRpb25zIGFyZSAndzNjJyBvciAnbWpzb253cCdcbiAgaW1hZ2VFbGVtZW50VGFwU3RyYXRlZ3k6IElNQUdFX0VMX1RBUF9TVFJBVEVHWV9XM0MsXG59O1xuXG4vLyBkZWNsYXJlIHNldHRpbmdzIHRoYXQgYXJlIHJlYWxseSBoYW5kbGVkIG9ubHkgYnkgYmFzZWRyaXZlciwgc28gZG93bnN0cmVhbVxuLy8gZHJpdmVycyBjYW4gY2hvb3NlIHRvIGlnbm9yZSB0aGVtIGZvciB0aGVpciBvd24gc2V0dGluZ3MgdmFsaWRhdGlvbiwgZXRjLi4uXG5jb25zdCBCQVNFRFJJVkVSX0hBTkRMRURfU0VUVElOR1MgPSBbXG4gICdpbWFnZU1hdGNoVGhyZXNob2xkJyxcbiAgJ2ZpeEltYWdlRmluZFNjcmVlbnNob3REaW1zJyxcbiAgJ2ZpeEltYWdlVGVtcGxhdGVTaXplJyxcbiAgJ2NoZWNrRm9ySW1hZ2VFbGVtZW50U3RhbGVuZXNzJyxcbiAgJ2F1dG9VcGRhdGVJbWFnZUVsZW1lbnRQb3NpdGlvbicsXG4gICdpbWFnZUVsZW1lbnRUYXBTdHJhdGVneScsXG5dO1xuXG5jbGFzcyBEZXZpY2VTZXR0aW5ncyB7XG5cbiAgY29uc3RydWN0b3IgKGRlZmF1bHRTZXR0aW5ncyA9IHt9LCBvblNldHRpbmdzVXBkYXRlID0gbnVsbCkge1xuICAgIHRoaXMuX3NldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgR0xPQkFMX0RFRkFVTFRfU0VUVElOR1MsIGRlZmF1bHRTZXR0aW5ncyk7XG4gICAgdGhpcy5vblNldHRpbmdzVXBkYXRlID0gb25TZXR0aW5nc1VwZGF0ZTtcbiAgfVxuXG4gIC8vIGNhbGxzIHVwZGF0ZVNldHRpbmdzIGZyb20gaW1wbGVtZW50aW5nIGRyaXZlciBldmVyeSB0aW1lIGEgc2V0dGluZyBpcyBjaGFuZ2VkLlxuICBhc3luYyB1cGRhdGUgKG5ld1NldHRpbmdzKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG5ld1NldHRpbmdzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZXR0aW5ncyB1cGRhdGUgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHZhbGlkIEpTT04nKTtcbiAgICB9XG4gICAgZm9yIChsZXQgcHJvcCBvZiBfLmtleXMobmV3U2V0dGluZ3MpKSB7XG4gICAgICBpZiAoXy5pc1VuZGVmaW5lZCh0aGlzLl9zZXR0aW5nc1twcm9wXSkpIHtcbiAgICAgICAgbG9nLndhcm4oYERpZG4ndCBrbm93IGFib3V0IHNldHRpbmcgJyR7cHJvcH0nLiBBcmUgeW91IHN1cmUgeW91IGAgK1xuICAgICAgICAgICAgICAgICBgc3BlbGxlZCBpdCBjb3JyZWN0bHk/IFByb2NlZWRpbmcgYW55d2F5LiBWYWxpZCBzZXR0aW5nczogJHtfLmtleXModGhpcy5fc2V0dGluZ3MpfWApO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX3NldHRpbmdzW3Byb3BdICE9PSBuZXdTZXR0aW5nc1twcm9wXSkge1xuICAgICAgICAvLyB1cGRhdGUgc2V0dGluZyBvbmx5IHdoZW4gdGhlcmUgaXMgdXBkYXRlU2V0dGluZ3MgZGVmaW5lZC5cbiAgICAgICAgaWYgKHRoaXMub25TZXR0aW5nc1VwZGF0ZSkge1xuICAgICAgICAgIGF3YWl0IHRoaXMub25TZXR0aW5nc1VwZGF0ZShwcm9wLCBuZXdTZXR0aW5nc1twcm9wXSwgdGhpcy5fc2V0dGluZ3NbcHJvcF0pO1xuICAgICAgICAgIHRoaXMuX3NldHRpbmdzW3Byb3BdID0gbmV3U2V0dGluZ3NbcHJvcF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coJ1VuYWJsZSB0byB1cGRhdGUgc2V0dGluZ3M7IG9uU2V0dGluZ3NVcGRhdGUgbWV0aG9kIG5vdCBmb3VuZCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0U2V0dGluZ3MgKCkge1xuICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEZXZpY2VTZXR0aW5ncztcbmV4cG9ydCB7IEJBU0VEUklWRVJfSEFORExFRF9TRVRUSU5HUyB9O1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
