'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _ = require('../../..');

var _images = require('./images');

var _protocolProtocol = require('../../protocol/protocol');

var _imageElement = require('../image-element');

var _appiumSupport = require('appium-support');

var commands = {},
    helpers = {},
    extensions = {};

var IMAGE_STRATEGY = "-image";

// Override the following function for your own driver, and the rest is taken
// care of!

//helpers.findElOrEls = async function (strategy, selector, mult, context) {}
// strategy: locator strategy
// selector: the actual selector for finding an element
// mult: multiple elements or just one?
// context: finding an element from the root context? or starting from another element
//
// Returns an object which adheres to the way the JSON Wire Protocol represents elements:
// { ELEMENT: # }    eg: { ELEMENT: 3 }  or { ELEMENT: 1.023 }

helpers.findElOrElsWithProcessing = function callee$0$0(strategy, selector, mult, context) {
  var src;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        this.validateLocatorStrategy(strategy);
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.findElOrEls(strategy, selector, mult, context));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        if (!this.opts.printPageSourceOnFindFailure) {
          context$1$0.next = 16;
          break;
        }

        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.getPageSource());

      case 12:
        src = context$1$0.sent;

        _logger2['default'].debug('Error finding element' + (mult ? 's' : '') + ': ' + context$1$0.t0.message);
        _logger2['default'].debug('Page source requested through \'printPageSourceOnFindFailure\':');
        _logger2['default'].debug(src);

      case 16:
        throw context$1$0.t0;

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7]]);
};

commands.findElement = function callee$0$0(strategy, selector) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(strategy === IMAGE_STRATEGY)) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.findByImage(selector, { multiple: false }));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.findElOrElsWithProcessing(strategy, selector, false));

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.findElements = function callee$0$0(strategy, selector) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(strategy === IMAGE_STRATEGY)) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.findByImage(selector, { multiple: true }));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.findElOrElsWithProcessing(strategy, selector, true));

      case 6:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.findElementFromElement = function callee$0$0(strategy, selector, elementId) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.findElOrElsWithProcessing(strategy, selector, false, elementId));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.findElementsFromElement = function callee$0$0(strategy, selector, elementId) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.findElOrElsWithProcessing(strategy, selector, true, elementId));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * @typedef {Object} FindByImageOptions
 * @property {boolean} [shouldCheckStaleness=false] - whether this call to find an
 * image is merely to check staleness. If so we can bypass a lot of logic
 * @property {boolean} [multiple=false] - Whether we are finding one element or
 * multiple
 */

/**
 * Find a screen rect represented by an ImageElement corresponding to an image
 * template sent in by the client
 *
 * @param {string} b64Template - base64-encoded image used as a template to be
 * matched in the screenshot
 * @param {FindByImageOptions} - additional options
 *
 * @returns {WebElement} - WebDriver element with a special id prefix
 */
helpers.findByImage = function callee$0$0(b64Template, _ref) {
  var _ref$shouldCheckStaleness = _ref.shouldCheckStaleness;
  var shouldCheckStaleness = _ref$shouldCheckStaleness === undefined ? false : _ref$shouldCheckStaleness;
  var _ref$multiple = _ref.multiple;
  var multiple = _ref$multiple === undefined ? false : _ref$multiple;

  var _settings$getSettings, threshold, fixImageTemplateSize, _ref2, screenWidth, screenHeight, rect, condition, imgEl, protoKey, protocolEl;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _settings$getSettings = this.settings.getSettings();
        threshold = _settings$getSettings.imageMatchThreshold;
        fixImageTemplateSize = _settings$getSettings.fixImageTemplateSize;

        _logger2['default'].info('Finding image element with match threshold ' + threshold);

        if (this.getWindowSize) {
          context$1$0.next = 6;
          break;
        }

        throw new Error("This driver does not support the required 'getWindowSize' command");

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.getWindowSize());

      case 8:
        _ref2 = context$1$0.sent;
        screenWidth = _ref2.width;
        screenHeight = _ref2.height;

        if (!fixImageTemplateSize) {
          context$1$0.next = 15;
          break;
        }

        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(this.ensureTemplateSize(b64Template, screenWidth, screenHeight));

      case 14:
        b64Template = context$1$0.sent;

      case 15:
        rect = null;

        condition = function condition() {
          var b64Screenshot;
          return _regeneratorRuntime.async(function condition$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.prev = 0;
                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(this.getScreenshotForImageFind(screenWidth, screenHeight));

              case 3:
                b64Screenshot = context$2$0.sent;
                context$2$0.next = 6;
                return _regeneratorRuntime.awrap(this.compareImages(_images.MATCH_TEMPLATE_MODE, b64Screenshot, b64Template, { threshold: threshold }));

              case 6:
                rect = context$2$0.sent.rect;
                return context$2$0.abrupt('return', true);

              case 10:
                context$2$0.prev = 10;
                context$2$0.t0 = context$2$0['catch'](0);

                if (!context$2$0.t0.message.match(/Cannot find any occurrences/)) {
                  context$2$0.next = 14;
                  break;
                }

                return context$2$0.abrupt('return', false);

              case 14:
                throw context$2$0.t0;

              case 15:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this, [[0, 10]]);
        };

        context$1$0.prev = 17;
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(this.implicitWaitForCondition(condition));

      case 20:
        context$1$0.next = 26;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t0 = context$1$0['catch'](17);

        if (context$1$0.t0.message.match(/Condition unmet/)) {
          context$1$0.next = 26;
          break;
        }

        throw context$1$0.t0;

      case 26:
        if (rect) {
          context$1$0.next = 30;
          break;
        }

        if (!multiple) {
          context$1$0.next = 29;
          break;
        }

        return context$1$0.abrupt('return', []);

      case 29:
        throw new _.errors.NoSuchElementError();

      case 30:

        _logger2['default'].info('Image template matched: ' + JSON.stringify(rect));
        imgEl = new _imageElement.ImageElement(b64Template, rect);

        if (!shouldCheckStaleness) {
          context$1$0.next = 34;
          break;
        }

        return context$1$0.abrupt('return', imgEl);

      case 34:

        this._imgElCache.set(imgEl.id, imgEl);
        protoKey = this.isW3CProtocol() ? _protocolProtocol.W3C_ELEMENT_KEY : _protocolProtocol.MJSONWP_ELEMENT_KEY;
        protocolEl = imgEl.asElement(protoKey);
        return context$1$0.abrupt('return', multiple ? [protocolEl] : protocolEl);

      case 38:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[17, 22]]);
};

/**
 * Ensure that the image template sent in for a find is of a suitable size
 *
 * @param {string} b64Template - base64-encoded image
 * @param {int} screenWidth - width of screen
 * @param {int} screenHeight - height of screen
 *
 * @returns {string} base64-encoded image, potentially resized
 */
helpers.ensureTemplateSize = function callee$0$0(b64Template, screenWidth, screenHeight) {
  var imgObj, _imgObj$bitmap, tplWidth, tplHeight;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.imageUtil.getJimpImage(b64Template));

      case 2:
        imgObj = context$1$0.sent;
        _imgObj$bitmap = imgObj.bitmap;
        tplWidth = _imgObj$bitmap.width;
        tplHeight = _imgObj$bitmap.height;

        if (!(tplWidth <= screenWidth && tplHeight <= screenHeight)) {
          context$1$0.next = 8;
          break;
        }

        return context$1$0.abrupt('return', b64Template);

      case 8:

        // otherwise, scale it to fit inside the screen dimensions
        imgObj = imgObj.scaleToFit(screenWidth, screenHeight);
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(imgObj.getBuffer(_appiumSupport.imageUtil.MIME_PNG));

      case 11:
        return context$1$0.abrupt('return', context$1$0.sent.toString('base64'));

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Get the screenshot image that will be used for find by element, potentially
 * altering it in various ways based on user-requested settings
 *
 * @param {int} screenWidth - width of screen
 * @param {int} screenHeight - height of screen
 *
 * @returns {string} base64-encoded screenshot
 */
helpers.getScreenshotForImageFind = function callee$0$0(screenWidth, screenHeight) {
  var b64Screenshot, imgObj, _imgObj$bitmap2, shotWidth, shotHeight, screenAR, shotAR;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.getScreenshot) {
          context$1$0.next = 2;
          break;
        }

        throw new Error("This driver does not support the required 'getScreenshot' command");

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.getScreenshot());

      case 4:
        b64Screenshot = context$1$0.sent;

        if (this.settings.getSettings().fixImageFindScreenshotDims) {
          context$1$0.next = 8;
          break;
        }

        _logger2['default'].info('Not verifying screenshot dimensions match screen');
        return context$1$0.abrupt('return', b64Screenshot);

      case 8:

        // otherwise, do some verification on the screenshot to make sure it matches
        // the screen size and aspect ratio
        _logger2['default'].info('Verifying screenshot size and aspect ratio');

        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(_appiumSupport.imageUtil.getJimpImage(b64Screenshot));

      case 11:
        imgObj = context$1$0.sent;
        _imgObj$bitmap2 = imgObj.bitmap;
        shotWidth = _imgObj$bitmap2.width;
        shotHeight = _imgObj$bitmap2.height;

        if (!(screenWidth === shotWidth && screenHeight === shotHeight)) {
          context$1$0.next = 18;
          break;
        }

        // the height and width of the screenshot and the device screen match, which
        // means we should be safe when doing template matches
        _logger2['default'].info('Screenshot size matched screen size');
        return context$1$0.abrupt('return', b64Screenshot);

      case 18:
        screenAR = screenWidth / screenHeight;
        shotAR = shotWidth / shotHeight;

        if (screenAR === shotAR) {
          _logger2['default'].info('Screenshot aspect ratio matched screen aspect ratio');
        } else {
          _logger2['default'].warn('When trying to find an element, determined that the screen ' + 'aspect ratio and screenshot aspect ratio are different. Screen ' + ('is ' + screenWidth + 'x' + screenHeight + ' whereas screenshot is ') + (shotWidth + 'x' + shotHeight + '.'));
          shotWidth = shotWidth / (shotAR / screenAR);
          _logger2['default'].warn('Resizing screenshot to ' + shotWidth + 'x' + shotHeight + ' to match ' + 'screen aspect ratio so that image element coordinates have a ' + 'greater chance of being correct.');
          imgObj = imgObj.resize(shotWidth, shotHeight);
        }

        // now we know the aspect ratios match, but there might still be a scale
        // mismatch, so just resize based on the screen dimensions
        if (screenWidth !== shotWidth) {
          _logger2['default'].info('Scaling screenshot from ' + shotWidth + 'x' + shotHeight + ' to match ' + ('screen at ' + screenWidth + 'x' + screenHeight));
          imgObj = imgObj.resize(screenWidth, screenHeight);
        }

        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(imgObj.getBuffer(_appiumSupport.imageUtil.MIME_PNG));

      case 24:
        return context$1$0.abrupt('return', context$1$0.sent.toString('base64'));

      case 25:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports.IMAGE_STRATEGY = IMAGE_STRATEGY;
exports['default'] = extensions;

// still want the error to occur

// someone might have sent in a template that's larger than the screen
// dimensions. If so let's check and cut it down to size since the algorithm
// will not work unless we do. But because it requires some potentially
// expensive commands, only do this if the user has requested it in settings.

// if compareImages fails, we'll get a specific error, but we should
// retry, so trap that and just return false to trigger the next round of
// implicitly waiting. For other errors, throw them to get out of the
// implicit wait loop

// this `implicitWaitForCondition` method will throw a 'Condition unmet'
// error if an element is not found eventually. In that case, we will
// handle the element not found response below. In the case where get some
// _other_ kind of error, it means something blew up totally apart from the
// implicit wait timeout. We should not mask that error and instead throw
// it straightaway

// if we're just checking staleness, return straightaway so we don't add
// a new element to the cache. shouldCheckStaleness does not support multiple
// elements, since it is a purely internal mechanism

// if the template fits inside the screen dimensions, we're good

// if the user has requested not to correct for aspect or size differences
// between the screenshot and the screen, just return the screenshot now

// otherwise, if they don't match, it could spell problems for the accuracy
// of coordinates returned by the image match algorithm, since we match based
// on the screenshot coordinates not the device coordinates themselves. There
// are two potential types of mismatch: aspect ratio mismatch and scale
// mismatch. we need to detect and fix both
//# sourceMappingURL=data:application/json;charset=utf8;base64,
