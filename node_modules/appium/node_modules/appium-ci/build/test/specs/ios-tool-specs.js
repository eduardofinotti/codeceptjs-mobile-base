require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _ = require('../..');

var _libUtils = require('../../lib/utils');

var _libUtils2 = _interopRequireDefault(_libUtils);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('ios tools', function () {
  before(function callee$1$0() {
    var _exec, _spawn;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          _exec = _libUtils2['default'].exec;
          _spawn = _libUtils2['default'].spawn;

          _sinon2['default'].stub(_libUtils2['default'], "exec").callsFake(function () {
            return _exec('echo bob');
          });
          _sinon2['default'].stub(_libUtils2['default'], "spawn").callsFake(function () {
            return _spawn('echo', ['1']);
          });

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('spawn as user', function callee$1$0() {
    var proc;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_.iosTools.spawnAsUser('bob', 'ls', ['-l']));

        case 2:
          proc = context$2$0.sent;

          proc.kill();

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('spawn as current user', function callee$1$0() {
    var proc;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_.iosTools.spawnAsUser('ls', ['-l']));

        case 2:
          proc = context$2$0.sent;

          proc.kill();

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('set simulator scale', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_.iosTools.setIosSimulatorScale());

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('set configure xCode', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_.iosTools.configureXcode('6.1.1'));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('reset simulators', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_.iosTools.resetSims());

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('kill all', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_.iosTools.killAll());

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(_.iosTools.killAll('ls'));

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(_.iosTools.killAll(['ls', 'echo']));

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          _libUtils2['default'].exec.restore();
          _libUtils2['default'].spawn.restore();

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvc3BlY3MvaW9zLXRvb2wtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Z0JBRXlCLE9BQU87O3dCQUNkLGlCQUFpQjs7OztvQkFDbEIsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7cUJBQzNCLE9BQU87Ozs7QUFFekIsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixRQUFRLENBQUMsV0FBVyxFQUFFLFlBQVk7QUFDaEMsUUFBTSxDQUFDO1FBQ0QsS0FBSyxFQUNMLE1BQU07Ozs7O0FBRE4sZUFBSyxHQUFHLHNCQUFNLElBQUk7QUFDbEIsZ0JBQU0sR0FBRyxzQkFBTSxLQUFLOztBQUV4Qiw2QkFBTSxJQUFJLHdCQUFRLE1BQU0sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxZQUFZO0FBQzlDLG1CQUFPLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztXQUMxQixDQUFDLENBQUM7QUFDSCw2QkFBTSxJQUFJLHdCQUFRLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxZQUFZO0FBQy9DLG1CQUFPLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1dBQzlCLENBQUMsQ0FBQzs7Ozs7OztHQUNKLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsZUFBZSxFQUFFO1FBQ2QsSUFBSTs7Ozs7MkNBQVMsV0FBUyxXQUFXLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDOzs7QUFBdEQsY0FBSTs7QUFDUixjQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7Ozs7Ozs7R0FDYixDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLHVCQUF1QixFQUFFO1FBQ3RCLElBQUk7Ozs7OzJDQUFTLFdBQVMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDOzs7QUFBL0MsY0FBSTs7QUFDUixjQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7Ozs7Ozs7R0FDYixDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLHFCQUFxQixFQUFFOzs7OzsyQ0FDbEIsV0FBUyxvQkFBb0IsRUFBRTs7Ozs7OztHQUN0QyxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLHFCQUFxQixFQUFFOzs7OzsyQ0FDbEIsV0FBUyxjQUFjLENBQUMsT0FBTyxDQUFDOzs7Ozs7O0dBQ3ZDLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsa0JBQWtCLEVBQUU7Ozs7OzJDQUNmLFdBQVMsU0FBUyxFQUFFOzs7Ozs7O0dBQzNCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsVUFBVSxFQUFFOzs7OzsyQ0FDUCxXQUFTLE9BQU8sRUFBRTs7OzsyQ0FDbEIsV0FBUyxPQUFPLENBQUMsSUFBSSxDQUFDOzs7OzJDQUN0QixXQUFTLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQzs7Ozs7OztHQUN2QyxDQUFDLENBQUM7O0FBRUgsT0FBSyxDQUFDOzs7O0FBQ0osZ0NBQU0sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3JCLGdDQUFNLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7Ozs7OztHQUN2QixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9zcGVjcy9pb3MtdG9vbC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgeyBpb3NUb29scyB9IGZyb20gJy4uLy4uJztcbmltcG9ydCB1dGlscyBmcm9tICcuLi8uLi9saWIvdXRpbHMnO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5kZXNjcmliZSgnaW9zIHRvb2xzJywgZnVuY3Rpb24gKCkge1xuICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGxldCBfZXhlYyA9IHV0aWxzLmV4ZWM7XG4gICAgbGV0IF9zcGF3biA9IHV0aWxzLnNwYXduO1xuXG4gICAgc2lub24uc3R1Yih1dGlscywgXCJleGVjXCIpLmNhbGxzRmFrZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX2V4ZWMoJ2VjaG8gYm9iJyk7XG4gICAgfSk7XG4gICAgc2lub24uc3R1Yih1dGlscywgXCJzcGF3blwiKS5jYWxsc0Zha2UoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9zcGF3bignZWNobycsIFsnMSddKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3NwYXduIGFzIHVzZXInLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHByb2MgPSBhd2FpdCBpb3NUb29scy5zcGF3bkFzVXNlcignYm9iJywgJ2xzJywgWyctbCddKTtcbiAgICBwcm9jLmtpbGwoKTtcbiAgfSk7XG5cbiAgaXQoJ3NwYXduIGFzIGN1cnJlbnQgdXNlcicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgcHJvYyA9IGF3YWl0IGlvc1Rvb2xzLnNwYXduQXNVc2VyKCdscycsIFsnLWwnXSk7XG4gICAgcHJvYy5raWxsKCk7XG4gIH0pO1xuXG4gIGl0KCdzZXQgc2ltdWxhdG9yIHNjYWxlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGF3YWl0IGlvc1Rvb2xzLnNldElvc1NpbXVsYXRvclNjYWxlKCk7XG4gIH0pO1xuXG4gIGl0KCdzZXQgY29uZmlndXJlIHhDb2RlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGF3YWl0IGlvc1Rvb2xzLmNvbmZpZ3VyZVhjb2RlKCc2LjEuMScpO1xuICB9KTtcblxuICBpdCgncmVzZXQgc2ltdWxhdG9ycycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBhd2FpdCBpb3NUb29scy5yZXNldFNpbXMoKTtcbiAgfSk7XG5cbiAgaXQoJ2tpbGwgYWxsJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGF3YWl0IGlvc1Rvb2xzLmtpbGxBbGwoKTtcbiAgICBhd2FpdCBpb3NUb29scy5raWxsQWxsKCdscycpO1xuICAgIGF3YWl0IGlvc1Rvb2xzLmtpbGxBbGwoWydscycsICdlY2hvJ10pO1xuICB9KTtcblxuICBhZnRlcihhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgdXRpbHMuZXhlYy5yZXN0b3JlKCk7XG4gICAgdXRpbHMuc3Bhd24ucmVzdG9yZSgpO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
