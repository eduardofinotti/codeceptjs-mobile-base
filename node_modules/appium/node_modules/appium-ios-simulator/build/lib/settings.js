'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _Symbol$iterator = require('babel-runtime/core-js/symbol/iterator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var _path2 = require('path');

var _path3 = _interopRequireDefault(_path2);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

// returns path to plist based on id for plist.
// these ids are appium terms
function plistPaths(sim, identifier) {
  var paths, simDirectory;
  return _regeneratorRuntime.async(function plistPaths$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        paths = [];
        simDirectory = sim.getDir();
        context$1$0.t0 = identifier;
        context$1$0.next = context$1$0.t0 === 'webInspector' ? 5 : context$1$0.t0 === 'mobileSafari' ? 7 : context$1$0.t0 === 'webUI' ? 15 : context$1$0.t0 === 'webFoundation' ? 17 : context$1$0.t0 === 'preferences' ? 19 : context$1$0.t0 === 'locationServices' ? 21 : context$1$0.t0 === 'locationClients' ? 23 : context$1$0.t0 === 'locationCache' ? 25 : context$1$0.t0 === 'userSettings' ? 28 : context$1$0.t0 === 'effectiveUserSettings' ? 30 : context$1$0.t0 === 'accessibilitySettings' ? 33 : 35;
        break;

      case 5:
        paths.push(_path3['default'].resolve(simDirectory, 'Library', 'Preferences', 'com.apple.webInspector.plist'));
        return context$1$0.abrupt('break', 35);

      case 7:
        context$1$0.t1 = paths;
        context$1$0.t2 = _path3['default'];
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(sim.getAppDir('com.apple.mobilesafari'));

      case 11:
        context$1$0.t3 = context$1$0.sent;
        context$1$0.t4 = context$1$0.t2.resolve.call(context$1$0.t2, context$1$0.t3, 'Library', 'Preferences', 'com.apple.mobilesafari.plist');
        context$1$0.t1.push.call(context$1$0.t1, context$1$0.t4);
        return context$1$0.abrupt('break', 35);

      case 15:
        paths.push(_path3['default'].resolve(simDirectory, 'Library', 'Preferences', 'com.apple.WebUI.plist'));
        return context$1$0.abrupt('break', 35);

      case 17:
        paths.push(_path3['default'].resolve(simDirectory, 'Library', 'Preferences', 'com.apple.WebFoundation.plist'));
        return context$1$0.abrupt('break', 35);

      case 19:
        paths.push(_path3['default'].resolve(simDirectory, 'Library', 'Preferences', 'com.apple.Preferences.plist'));
        return context$1$0.abrupt('break', 35);

      case 21:
        paths.push(_path3['default'].resolve(simDirectory, 'Library', 'Preferences', 'com.apple.locationd.plist'));
        return context$1$0.abrupt('break', 35);

      case 23:
        paths.push(_path3['default'].resolve(simDirectory, 'Library', 'Caches', 'locationd', 'clients.plist'));
        return context$1$0.abrupt('break', 35);

      case 25:
        paths.push(_path3['default'].resolve(simDirectory, 'Library', 'Caches', 'locationd', 'cache.plist'));
        paths.push(_path3['default'].resolve(simDirectory, 'Library', 'Preferences', 'com.apple.locationd.plist'));
        return context$1$0.abrupt('break', 35);

      case 28:
        if (_semver2['default'].lt(_semver2['default'].coerce(sim.xcodeVersion.versionString), _semver2['default'].coerce('7.3'))) {
          paths.push(_path3['default'].resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'UserSettings.plist'));
          paths.push(_path3['default'].resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'EffectiveUserSettings.plist'));
          paths.push(_path3['default'].resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'PublicInfo', 'PublicEffectiveUserSettings.plist'));
        } else {
          paths.push(_path3['default'].resolve(simDirectory, 'Library', 'UserConfigurationProfiles', 'UserSettings.plist'));
          paths.push(_path3['default'].resolve(simDirectory, 'Library', 'UserConfigurationProfiles', 'EffectiveUserSettings.plist'));
          paths.push(_path3['default'].resolve(simDirectory, 'Library', 'UserConfigurationProfiles', 'PublicInfo', 'PublicEffectiveUserSettings.plist'));
        }
        return context$1$0.abrupt('break', 35);

      case 30:
        paths.push(_path3['default'].resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'EffectiveUserSettings.plist'));
        paths.push(_path3['default'].resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'PublicInfo', 'PublicEffectiveUserSettings.plist'));
        return context$1$0.abrupt('break', 35);

      case 33:
        paths.push(_path3['default'].resolve(simDirectory, 'Library', 'Preferences', 'com.apple.Accessibility.plist'));
        return context$1$0.abrupt('break', 35);

      case 35:
        return context$1$0.abrupt('return', paths);

      case 36:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function updateSettings(sim, plist, updates) {
  return _regeneratorRuntime.async(function updateSettings$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.t0 = _regeneratorRuntime;
        context$1$0.t1 = _bluebird2['default'];
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(plistPaths(sim, plist));

      case 4:
        context$1$0.t2 = context$1$0.sent;

        context$1$0.t3 = function reducer(updated, path) {
          return _regeneratorRuntime.async(function reducer$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(update(path, updates));

              case 2:
                context$2$0.t0 = context$2$0.sent;

                if (context$2$0.t0) {
                  context$2$0.next = 5;
                  break;
                }

                context$2$0.t0 = updated;

              case 5:
                return context$2$0.abrupt('return', context$2$0.t0);

              case 6:
              case 'end':
                return context$2$0.stop();
            }
          }, null, this);
        };

        context$1$0.t4 = context$1$0.t1.reduce.call(context$1$0.t1, context$1$0.t2, context$1$0.t3, false);
        context$1$0.next = 9;
        return context$1$0.t0.awrap.call(context$1$0.t0, context$1$0.t4);

      case 9:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

// update a plist file, located at pathToPlist
// pass in an object, all settings specified in the object will be
// updated on the plist, all others left as-is
function update(pathToPlist, updates) {
  var currentSettings, newSettings;
  return _regeneratorRuntime.async(function update$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(read(pathToPlist));

      case 2:
        currentSettings = context$1$0.sent;
        newSettings = _Object$assign({}, currentSettings, updates);

        if (!_lodash2['default'].isEqual(currentSettings, newSettings)) {
          context$1$0.next = 6;
          break;
        }

        return context$1$0.abrupt('return', false);

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_appiumSupport.plist.updatePlistFile(pathToPlist, newSettings, true, false));

      case 8:
        return context$1$0.abrupt('return', true);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function readSettings(sim, plist) {
  var settings, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _path;

  return _regeneratorRuntime.async(function readSettings$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        settings = {};
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 4;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(plistPaths(sim, plist));

      case 7:
        context$1$0.t0 = _Symbol$iterator;
        _iterator = context$1$0.sent[context$1$0.t0]();

      case 9:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 17;
          break;
        }

        _path = _step.value;
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(read(_path));

      case 13:
        settings[_path] = context$1$0.sent;

      case 14:
        _iteratorNormalCompletion = true;
        context$1$0.next = 9;
        break;

      case 17:
        context$1$0.next = 23;
        break;

      case 19:
        context$1$0.prev = 19;
        context$1$0.t1 = context$1$0['catch'](4);
        _didIteratorError = true;
        _iteratorError = context$1$0.t1;

      case 23:
        context$1$0.prev = 23;
        context$1$0.prev = 24;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 26:
        context$1$0.prev = 26;

        if (!_didIteratorError) {
          context$1$0.next = 29;
          break;
        }

        throw _iteratorError;

      case 29:
        return context$1$0.finish(26);

      case 30:
        return context$1$0.finish(23);

      case 31:
        return context$1$0.abrupt('return', settings);

      case 32:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[4, 19, 23, 31], [24,, 26, 30]]);
}

function read(pathToPlist) {
  return _regeneratorRuntime.async(function read$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.plist.parsePlistFile(pathToPlist, false));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function updateLocationSettings(sim, bundleId, authorized) {
  var newCachePrefs, updated, newClientPrefs, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, file, updates, _plist, weirdLocKey, baseSetting;

  return _regeneratorRuntime.async(function updateLocationSettings$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        newCachePrefs = {
          LastFenceActivityTimestamp: 412122103.232983,
          CleanShutdown: true
        };
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(updateSettings(sim, 'locationCache', _defineProperty({}, bundleId, newCachePrefs)));

      case 3:
        updated = context$1$0.sent;
        newClientPrefs = {
          BundleId: bundleId,
          Authorized: !!authorized,
          Whitelisted: false
        };
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 8;
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(plistPaths(sim, 'locationClients'));

      case 11:
        context$1$0.t0 = _Symbol$iterator;
        _iterator2 = context$1$0.sent[context$1$0.t0]();

      case 13:
        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
          context$1$0.next = 35;
          break;
        }

        file = _step2.value;

        _logger2['default'].debug('Updating location client file: ' + file);

        updates = {};
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(read(file));

      case 19:
        _plist = context$1$0.sent;
        weirdLocKey = 'com.apple.locationd.bundle-/System/Library/' + 'PrivateFrameworks/AOSNotification.framework';

        if (!_lodash2['default'].has(_plist, weirdLocKey)) {
          updates[weirdLocKey] = {
            BundlePath: '/System/Library/PrivateFrameworks/AOSNotification.framework',
            Whitelisted: false,
            Executable: '',
            Registered: ''
          };
        }

        // create the update, and make sure it has sensible values
        baseSetting = _lodash2['default'].has(_plist, bundleId) ? _plist[bundleId] : {};

        updates[bundleId] = _lodash2['default'].defaults(newClientPrefs, baseSetting);
        updates[bundleId].Executable = updates[bundleId].Executable || '';
        updates[bundleId].Registered = updates[bundleId].Registered || '';

        context$1$0.next = 28;
        return _regeneratorRuntime.awrap(update(file, updates));

      case 28:
        context$1$0.t1 = context$1$0.sent;

        if (context$1$0.t1) {
          context$1$0.next = 31;
          break;
        }

        context$1$0.t1 = updated;

      case 31:
        updated = context$1$0.t1;

      case 32:
        _iteratorNormalCompletion2 = true;
        context$1$0.next = 13;
        break;

      case 35:
        context$1$0.next = 41;
        break;

      case 37:
        context$1$0.prev = 37;
        context$1$0.t2 = context$1$0['catch'](8);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t2;

      case 41:
        context$1$0.prev = 41;
        context$1$0.prev = 42;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 44:
        context$1$0.prev = 44;

        if (!_didIteratorError2) {
          context$1$0.next = 47;
          break;
        }

        throw _iteratorError2;

      case 47:
        return context$1$0.finish(44);

      case 48:
        return context$1$0.finish(41);

      case 49:
        return context$1$0.abrupt('return', updated);

      case 50:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[8, 37, 41, 49], [42,, 44, 48]]);
}

function setReduceMotion(sim) {
  var reduceMotion = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

  var paths, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, file;

  return _regeneratorRuntime.async(function setReduceMotion$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(plistPaths(sim, 'accessibilitySettings'));

      case 2:
        paths = context$1$0.sent;
        _iteratorNormalCompletion3 = true;
        _didIteratorError3 = false;
        _iteratorError3 = undefined;
        context$1$0.prev = 6;
        _iterator3 = _getIterator(paths);

      case 8:
        if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
          context$1$0.next = 15;
          break;
        }

        file = _step3.value;
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(update(file, {
          ReduceMotionEnabled: reduceMotion ? 1 : 0
        }));

      case 12:
        _iteratorNormalCompletion3 = true;
        context$1$0.next = 8;
        break;

      case 15:
        context$1$0.next = 21;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t0 = context$1$0['catch'](6);
        _didIteratorError3 = true;
        _iteratorError3 = context$1$0.t0;

      case 21:
        context$1$0.prev = 21;
        context$1$0.prev = 22;

        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
          _iterator3['return']();
        }

      case 24:
        context$1$0.prev = 24;

        if (!_didIteratorError3) {
          context$1$0.next = 27;
          break;
        }

        throw _iteratorError3;

      case 27:
        return context$1$0.finish(24);

      case 28:
        return context$1$0.finish(21);

      case 29:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 17, 21, 29], [22,, 24, 28]]);
}

function updateSafariUserSettings(sim, settingSet) {
  var newUserSettings, updated, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _step4$value, file, userSettingSet, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _step5$value, key, value;

  return _regeneratorRuntime.async(function updateSafariUserSettings$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Updating Safari user settings');

        // add extra stuff to UserSettings.plist and EffectiveUserSettings.plist
        newUserSettings = {};

        if (_lodash2['default'].has(settingSet, 'WebKitJavaScriptEnabled')) {
          newUserSettings.safariAllowJavaScript = settingSet.WebKitJavaScriptEnabled;
        }
        if (_lodash2['default'].has(settingSet, 'WebKitJavaScriptCanOpenWindowsAutomatically')) {
          newUserSettings.safariAllowPopups = settingSet.WebKitJavaScriptCanOpenWindowsAutomatically;
        }
        if (_lodash2['default'].has(settingSet, 'WarnAboutFraudulentWebsites')) {
          newUserSettings.safariForceFraudWarning = !settingSet.WarnAboutFraudulentWebsites;
        }

        if (!_lodash2['default'].isEmpty(newUserSettings)) {
          context$1$0.next = 7;
          break;
        }

        return context$1$0.abrupt('return', false);

      case 7:
        updated = false;
        _iteratorNormalCompletion4 = true;
        _didIteratorError4 = false;
        _iteratorError4 = undefined;
        context$1$0.prev = 11;
        context$1$0.t0 = _lodash2['default'];
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(readSettings(sim, 'userSettings'));

      case 15:
        context$1$0.t1 = context$1$0.sent;
        context$1$0.t2 = _Symbol$iterator;
        _iterator4 = context$1$0.t0.toPairs.call(context$1$0.t0, context$1$0.t1)[context$1$0.t2]();

      case 18:
        if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
          context$1$0.next = 51;
          break;
        }

        _step4$value = _slicedToArray(_step4.value, 2);
        file = _step4$value[0];
        userSettingSet = _step4$value[1];

        // the user settings plist has two buckets, one for
        // boolean settings (`restrictedBool`) and one for
        // other value settings (`restrictedValue`). In each, the value
        // is in a `value` sub-field.
        if (!_lodash2['default'].has(userSettingSet, 'restrictedBool')) {
          userSettingSet.restrictedBool = {};
        }
        _iteratorNormalCompletion5 = true;
        _didIteratorError5 = false;
        _iteratorError5 = undefined;
        context$1$0.prev = 26;
        for (_iterator5 = _getIterator(_lodash2['default'].toPairs(newUserSettings)); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          _step5$value = _slicedToArray(_step5.value, 2);
          key = _step5$value[0];
          value = _step5$value[1];

          userSettingSet.restrictedBool[key] = { value: value };
        }

        // actually do the update
        context$1$0.next = 34;
        break;

      case 30:
        context$1$0.prev = 30;
        context$1$0.t3 = context$1$0['catch'](26);
        _didIteratorError5 = true;
        _iteratorError5 = context$1$0.t3;

      case 34:
        context$1$0.prev = 34;
        context$1$0.prev = 35;

        if (!_iteratorNormalCompletion5 && _iterator5['return']) {
          _iterator5['return']();
        }

      case 37:
        context$1$0.prev = 37;

        if (!_didIteratorError5) {
          context$1$0.next = 40;
          break;
        }

        throw _iteratorError5;

      case 40:
        return context$1$0.finish(37);

      case 41:
        return context$1$0.finish(34);

      case 42:
        context$1$0.next = 44;
        return _regeneratorRuntime.awrap(update(file, userSettingSet));

      case 44:
        context$1$0.t4 = context$1$0.sent;

        if (context$1$0.t4) {
          context$1$0.next = 47;
          break;
        }

        context$1$0.t4 = updated;

      case 47:
        updated = context$1$0.t4;

      case 48:
        _iteratorNormalCompletion4 = true;
        context$1$0.next = 18;
        break;

      case 51:
        context$1$0.next = 57;
        break;

      case 53:
        context$1$0.prev = 53;
        context$1$0.t5 = context$1$0['catch'](11);
        _didIteratorError4 = true;
        _iteratorError4 = context$1$0.t5;

      case 57:
        context$1$0.prev = 57;
        context$1$0.prev = 58;

        if (!_iteratorNormalCompletion4 && _iterator4['return']) {
          _iterator4['return']();
        }

      case 60:
        context$1$0.prev = 60;

        if (!_didIteratorError4) {
          context$1$0.next = 63;
          break;
        }

        throw _iteratorError4;

      case 63:
        return context$1$0.finish(60);

      case 64:
        return context$1$0.finish(57);

      case 65:
        return context$1$0.abrupt('return', updated);

      case 66:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[11, 53, 57, 65], [26, 30, 34, 42], [35,, 37, 41], [58,, 60, 64]]);
}

function updateLocale(sim, language, locale, calendarFormat) {
  var globalPrefs, data, updates, supportedLangs, calSplit, curLocaleAndCal, split, curLoc, newLocaleAndCal;
  return _regeneratorRuntime.async(function updateLocale$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        globalPrefs = _path3['default'].resolve(sim.getDir(), 'Library', 'Preferences', '.GlobalPreferences.plist');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(read(globalPrefs));

      case 3:
        data = context$1$0.sent;
        updates = {};

        // if we are setting the language, add it to the beginning of the list of languages
        if (language) {
          _logger2['default'].debug('New language: ' + language);
          supportedLangs = data.AppleLanguages || [];

          // if the language is first, we don't need to do anything
          if (supportedLangs.indexOf(language) !== 0) {
            updates.AppleLanguages = [language].concat(_lodash2['default'].without(supportedLangs, language));
          }
        }
        // if we are setting the locale or calendar format, set them as appropriate
        if (locale || calendarFormat) {
          calSplit = '@calendar=';
          curLocaleAndCal = data.AppleLocale || language || 'en';
          split = curLocaleAndCal.split(calSplit);
          curLoc = split[0];

          if (calendarFormat || split[1]) {
            calendarFormat = '' + calSplit + (calendarFormat || split[1] || '');
          }
          calendarFormat = calendarFormat || '';
          newLocaleAndCal = locale ? locale : curLoc;

          if (calendarFormat) {
            newLocaleAndCal = '' + newLocaleAndCal + calendarFormat;
          }
          // only need to update if it has changed
          if (newLocaleAndCal !== curLocaleAndCal) {
            _logger2['default'].debug('New locale: ' + newLocaleAndCal);
            updates.AppleLocale = newLocaleAndCal;
          }
        }

        if (!(_lodash2['default'].size(updates) === 0)) {
          context$1$0.next = 10;
          break;
        }

        _logger2['default'].debug('No locale updates necessary.');
        return context$1$0.abrupt('return', false);

      case 10:

        _logger2['default'].debug('Writing new locale plist data');
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(update(globalPrefs, updates));

      case 13:
        return context$1$0.abrupt('return', true);

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function stub() {
  return _regeneratorRuntime.async(function stub$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(plistPaths);

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.update = update;
exports.updateSettings = updateSettings;
exports.updateLocationSettings = updateLocationSettings;
exports.setReduceMotion = setReduceMotion;
exports.updateSafariUserSettings = updateSafariUserSettings;
exports.updateLocale = updateLocale;
exports.read = read;
exports.readSettings = readSettings;
exports.stub = stub;

// no setting changes, so do nothing

// update location cache

// update location clients

// see if the bundle is already there

// random data that always seems to be in the clients.plist

// get the current data
//# sourceMappingURL=data:application/json;charset=utf8;base64,
