'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _utils = require('./utils');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var Calendar = (function () {
  function Calendar(xcodeVersion, sharedResourcesDir) {
    _classCallCheck(this, Calendar);

    this.xcodeVersion = xcodeVersion;
    this.sharedResourcesDir = sharedResourcesDir;
  }

  _createClass(Calendar, [{
    key: 'getDB',
    value: function getDB() {
      var tccPath;
      return _regeneratorRuntime.async(function getDB$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.db) {
              context$2$0.next = 2;
              break;
            }

            return context$2$0.abrupt('return', this.db);

          case 2:
            tccPath = _path2['default'].resolve(this.sharedResourcesDir, 'Library', 'TCC');
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(tccPath));

          case 5:
            if (context$2$0.sent) {
              context$2$0.next = 8;
              break;
            }

            context$2$0.next = 8;
            return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(tccPath));

          case 8:

            this.db = _path2['default'].resolve(tccPath, 'TCC.db');
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap((0, _utils.execSQLiteQuery)(this.db, 'CREATE TABLE IF NOT EXISTS access (\n      service TEXT NOT NULL DEFAULT \'\',\n      client TEXT NOT NULL DEFAULT \'\',\n      client_type INTEGER,\n      allowed INTEGER,\n      prompt_count INTEGER,\n      csreq BLOB NOT NULL DEFAULT \'\',\n      policy_ID INTEGER,\n      PRIMARY KEY(service, client, client_type)\n    );'.replace(/\n/g, '')));

          case 11:
            return context$2$0.abrupt('return', this.db);

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getCalendarRowCount',
    value: function getCalendarRowCount(bundleID) {
      var db, count;
      return _regeneratorRuntime.async(function getCalendarRowCount$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getDB());

          case 2:
            db = context$2$0.sent;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _utils.execSQLiteQuery)(db, 'SELECT count(*) FROM access WHERE client=\'?\' AND service=\'kTCCServiceCalendar\';', bundleID));

          case 5:
            count = context$2$0.sent;
            return context$2$0.abrupt('return', parseInt(count.stdout.split('=')[1], 10));

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'hasCalendarAccess',
    value: function hasCalendarAccess(bundleID) {
      var count;
      return _regeneratorRuntime.async(function hasCalendarAccess$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.t0 = _regeneratorRuntime;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.getDB());

          case 3:
            context$2$0.t1 = context$2$0.sent;
            context$2$0.t2 = bundleID;
            context$2$0.t3 = (0, _utils.execSQLiteQuery)(context$2$0.t1, 'SELECT count(*) FROM access WHERE client=\'?\' AND allowed=1 AND service=\'kTCCServiceCalendar\';', context$2$0.t2);
            context$2$0.next = 8;
            return context$2$0.t0.awrap.call(context$2$0.t0, context$2$0.t3);

          case 8:
            count = context$2$0.sent;
            return context$2$0.abrupt('return', parseInt(count.stdout.split('=')[1], 10) > 0);

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'enableCalendarAccess',
    value: function enableCalendarAccess(bundleID) {
      var db, query, count, _ref, stdout;

      return _regeneratorRuntime.async(function enableCalendarAccess$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getDB());

          case 2:
            db = context$2$0.sent;
            query = undefined;
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.getCalendarRowCount(bundleID));

          case 6:
            context$2$0.t0 = context$2$0.sent;

            if (!(context$2$0.t0 > 0)) {
              context$2$0.next = 11;
              break;
            }

            query = 'UPDATE \'access\' SET\n        service=\'kTCCServiceCalendar\',\n        client_type=0,\n        allowed=1,\n        prompt_count=1,\n        csreq=0\n      WHERE client=\'?\' AND service=\'kTCCServiceCalendar\''.replace(/\n/g, ' ');
            context$2$0.next = 26;
            break;

          case 11:
            count = this.columnCount;

            if (_lodash2['default'].isNumber(this.columnCount)) {
              context$2$0.next = 25;
              break;
            }

            context$2$0.prev = 13;
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap((0, _utils.execSQLiteQuery)(db, 'pragma table_info(\'access\')'));

          case 16:
            _ref = context$2$0.sent;
            stdout = _ref.stdout;

            // stdout has a number of records, each starting with `cid`
            //       cid = 0
            //       name = service
            //       type = TEXT
            //       notnull = 1
            //       dflt_value =
            //       pk = 1
            //
            //       cid = 1
            //       name = client
            //       type = TEXT
            //       notnull = 1
            //       dflt_value =
            //       pk = 2
            count = this.columnCount = stdout.trim()
            // get each record's beginning
            .split('cid')
            // remove the empty row (usually, the first)
            .filter(function (record) {
              return !_lodash2['default'].isEmpty(record);
            }).length;
            context$2$0.next = 25;
            break;

          case 21:
            context$2$0.prev = 21;
            context$2$0.t1 = context$2$0['catch'](13);

            // use defaults, but do not save
            count = this.xcodeVersion.major < 10 ? 7 : 11;
            _logger2['default'].warn('Unable to find Calendar access column count: ' + context$2$0.t1.message);

          case 25:

            // fill in the query with 0's for columns after the 5 we care about
            query = 'INSERT INTO \'access\' VALUES (\'kTCCServiceCalendar\', \'?\', 0, 1, 1, ' + _lodash2['default'].range(0, count - 5, 0).join(', ') + ');';

          case 26:
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap((0, _utils.execSQLiteQuery)(db, query, bundleID));

          case 28:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[13, 21]]);
    }
  }, {
    key: 'disableCalendarAccess',
    value: function disableCalendarAccess(bundleID) {
      var db;
      return _regeneratorRuntime.async(function disableCalendarAccess$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getDB());

          case 2:
            db = context$2$0.sent;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.getCalendarRowCount(bundleID));

          case 5:
            context$2$0.t0 = context$2$0.sent;

            if (!(context$2$0.t0 > 0)) {
              context$2$0.next = 9;
              break;
            }

            context$2$0.next = 9;
            return _regeneratorRuntime.awrap((0, _utils.execSQLiteQuery)(db, 'DELETE FROM \'access\' WHERE client=\'?\' AND service=\'kTCCServiceCalendar\''.replace(/\n/g, ' '), bundleID));

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return Calendar;
})();

exports['default'] = Calendar;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFPLENBQUcsQ0FBQzs7Ozs7QUFLNUUsaUJBQUssZ0ZBQXdFLG9CQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQUksQ0FBQzs7Ozs2Q0FFakgsNEJBQWdCLEVBQUUsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDOzs7Ozs7O0tBQzNDOzs7V0FFMkIsK0JBQUMsUUFBUTtVQUM3QixFQUFFOzs7Ozs2Q0FBUyxJQUFJLENBQUMsS0FBSyxFQUFFOzs7QUFBdkIsY0FBRTs7NkNBRUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQzs7Ozs7bUNBQUksQ0FBQzs7Ozs7OzZDQUMxQyw0QkFBZ0IsRUFBRSxFQUFFLGdGQUEwRSxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUFFLFFBQVEsQ0FBQzs7Ozs7OztLQUVySTs7O1NBckdrQixRQUFROzs7cUJBQVIsUUFBUSIsImZpbGUiOiJsaWIvY2FsZW5kYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGZzLCBta2RpcnAgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyBleGVjU1FMaXRlUXVlcnkgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYWxlbmRhciB7XG5cbiAgY29uc3RydWN0b3IgKHhjb2RlVmVyc2lvbiwgc2hhcmVkUmVzb3VyY2VzRGlyKSB7XG4gICAgdGhpcy54Y29kZVZlcnNpb24gPSB4Y29kZVZlcnNpb247XG4gICAgdGhpcy5zaGFyZWRSZXNvdXJjZXNEaXIgPSBzaGFyZWRSZXNvdXJjZXNEaXI7XG4gIH1cblxuICBhc3luYyBnZXREQiAoKSB7XG4gICAgaWYgKHRoaXMuZGIpIHtcbiAgICAgIHJldHVybiB0aGlzLmRiO1xuICAgIH1cblxuICAgIGNvbnN0IHRjY1BhdGggPSBwYXRoLnJlc29sdmUodGhpcy5zaGFyZWRSZXNvdXJjZXNEaXIsICdMaWJyYXJ5JywgJ1RDQycpO1xuICAgIGlmICghKGF3YWl0IGZzLmV4aXN0cyh0Y2NQYXRoKSkpIHtcbiAgICAgIGF3YWl0IG1rZGlycCh0Y2NQYXRoKTtcbiAgICB9XG5cbiAgICB0aGlzLmRiID0gcGF0aC5yZXNvbHZlKHRjY1BhdGgsICdUQ0MuZGInKTtcbiAgICBhd2FpdCBleGVjU1FMaXRlUXVlcnkodGhpcy5kYiwgYENSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIGFjY2VzcyAoXG4gICAgICBzZXJ2aWNlIFRFWFQgTk9UIE5VTEwgREVGQVVMVCAnJyxcbiAgICAgIGNsaWVudCBURVhUIE5PVCBOVUxMIERFRkFVTFQgJycsXG4gICAgICBjbGllbnRfdHlwZSBJTlRFR0VSLFxuICAgICAgYWxsb3dlZCBJTlRFR0VSLFxuICAgICAgcHJvbXB0X2NvdW50IElOVEVHRVIsXG4gICAgICBjc3JlcSBCTE9CIE5PVCBOVUxMIERFRkFVTFQgJycsXG4gICAgICBwb2xpY3lfSUQgSU5URUdFUixcbiAgICAgIFBSSU1BUlkgS0VZKHNlcnZpY2UsIGNsaWVudCwgY2xpZW50X3R5cGUpXG4gICAgKTtgLnJlcGxhY2UoL1xcbi9nLCAnJykpO1xuXG4gICAgcmV0dXJuIHRoaXMuZGI7XG4gIH1cblxuICBhc3luYyBnZXRDYWxlbmRhclJvd0NvdW50IChidW5kbGVJRCkge1xuICAgIGNvbnN0IGRiID0gYXdhaXQgdGhpcy5nZXREQigpO1xuICAgIGNvbnN0IGNvdW50ID0gYXdhaXQgZXhlY1NRTGl0ZVF1ZXJ5KGRiLCBgU0VMRUNUIGNvdW50KCopIEZST00gYWNjZXNzIFdIRVJFIGNsaWVudD0nPycgQU5EIHNlcnZpY2U9J2tUQ0NTZXJ2aWNlQ2FsZW5kYXInO2AsIGJ1bmRsZUlEKTtcbiAgICByZXR1cm4gcGFyc2VJbnQoY291bnQuc3Rkb3V0LnNwbGl0KCc9JylbMV0sIDEwKTtcbiAgfVxuXG4gIGFzeW5jIGhhc0NhbGVuZGFyQWNjZXNzIChidW5kbGVJRCkge1xuICAgIGNvbnN0IGNvdW50ID0gYXdhaXQgZXhlY1NRTGl0ZVF1ZXJ5KGF3YWl0IHRoaXMuZ2V0REIoKSwgYFNFTEVDVCBjb3VudCgqKSBGUk9NIGFjY2VzcyBXSEVSRSBjbGllbnQ9Jz8nIEFORCBhbGxvd2VkPTEgQU5EIHNlcnZpY2U9J2tUQ0NTZXJ2aWNlQ2FsZW5kYXInO2AsIGJ1bmRsZUlEKTtcbiAgICByZXR1cm4gcGFyc2VJbnQoY291bnQuc3Rkb3V0LnNwbGl0KCc9JylbMV0sIDEwKSA+IDA7XG4gIH1cblxuICBhc3luYyBlbmFibGVDYWxlbmRhckFjY2VzcyAoYnVuZGxlSUQpIHtcbiAgICBjb25zdCBkYiA9IGF3YWl0IHRoaXMuZ2V0REIoKTtcblxuICAgIGxldCBxdWVyeTtcbiAgICBpZiAoKGF3YWl0IHRoaXMuZ2V0Q2FsZW5kYXJSb3dDb3VudChidW5kbGVJRCkpID4gMCkge1xuICAgICAgcXVlcnkgPSBgVVBEQVRFICdhY2Nlc3MnIFNFVFxuICAgICAgICBzZXJ2aWNlPSdrVENDU2VydmljZUNhbGVuZGFyJyxcbiAgICAgICAgY2xpZW50X3R5cGU9MCxcbiAgICAgICAgYWxsb3dlZD0xLFxuICAgICAgICBwcm9tcHRfY291bnQ9MSxcbiAgICAgICAgY3NyZXE9MFxuICAgICAgV0hFUkUgY2xpZW50PSc/JyBBTkQgc2VydmljZT0na1RDQ1NlcnZpY2VDYWxlbmRhcidgLnJlcGxhY2UoL1xcbi9nLCAnICcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgY291bnQgPSB0aGlzLmNvbHVtbkNvdW50O1xuICAgICAgaWYgKCFfLmlzTnVtYmVyKHRoaXMuY29sdW1uQ291bnQpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3Qge3N0ZG91dH0gPSBhd2FpdCBleGVjU1FMaXRlUXVlcnkoZGIsIGBwcmFnbWEgdGFibGVfaW5mbygnYWNjZXNzJylgKTtcbiAgICAgICAgICAvLyBzdGRvdXQgaGFzIGEgbnVtYmVyIG9mIHJlY29yZHMsIGVhY2ggc3RhcnRpbmcgd2l0aCBgY2lkYFxuICAgICAgICAgIC8vICAgICAgIGNpZCA9IDBcbiAgICAgICAgICAvLyAgICAgICBuYW1lID0gc2VydmljZVxuICAgICAgICAgIC8vICAgICAgIHR5cGUgPSBURVhUXG4gICAgICAgICAgLy8gICAgICAgbm90bnVsbCA9IDFcbiAgICAgICAgICAvLyAgICAgICBkZmx0X3ZhbHVlID1cbiAgICAgICAgICAvLyAgICAgICBwayA9IDFcbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vICAgICAgIGNpZCA9IDFcbiAgICAgICAgICAvLyAgICAgICBuYW1lID0gY2xpZW50XG4gICAgICAgICAgLy8gICAgICAgdHlwZSA9IFRFWFRcbiAgICAgICAgICAvLyAgICAgICBub3RudWxsID0gMVxuICAgICAgICAgIC8vICAgICAgIGRmbHRfdmFsdWUgPVxuICAgICAgICAgIC8vICAgICAgIHBrID0gMlxuICAgICAgICAgIGNvdW50ID0gdGhpcy5jb2x1bW5Db3VudCA9XG4gICAgICAgICAgICBzdGRvdXRcbiAgICAgICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgICAgICAvLyBnZXQgZWFjaCByZWNvcmQncyBiZWdpbm5pbmdcbiAgICAgICAgICAgICAgLnNwbGl0KCdjaWQnKVxuICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIGVtcHR5IHJvdyAodXN1YWxseSwgdGhlIGZpcnN0KVxuICAgICAgICAgICAgICAuZmlsdGVyKChyZWNvcmQpID0+ICFfLmlzRW1wdHkocmVjb3JkKSlcbiAgICAgICAgICAgICAgLmxlbmd0aDtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgLy8gdXNlIGRlZmF1bHRzLCBidXQgZG8gbm90IHNhdmVcbiAgICAgICAgICBjb3VudCA9IHRoaXMueGNvZGVWZXJzaW9uLm1ham9yIDwgMTAgPyA3IDogMTE7XG4gICAgICAgICAgbG9nLndhcm4oYFVuYWJsZSB0byBmaW5kIENhbGVuZGFyIGFjY2VzcyBjb2x1bW4gY291bnQ6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gZmlsbCBpbiB0aGUgcXVlcnkgd2l0aCAwJ3MgZm9yIGNvbHVtbnMgYWZ0ZXIgdGhlIDUgd2UgY2FyZSBhYm91dFxuICAgICAgcXVlcnkgPSBgSU5TRVJUIElOVE8gJ2FjY2VzcycgVkFMVUVTICgna1RDQ1NlcnZpY2VDYWxlbmRhcicsICc/JywgMCwgMSwgMSwgJHtfLnJhbmdlKDAsIGNvdW50IC0gNSwgMCkuam9pbignLCAnKX0pO2A7XG4gICAgfVxuICAgIGF3YWl0IGV4ZWNTUUxpdGVRdWVyeShkYiwgcXVlcnksIGJ1bmRsZUlEKTtcbiAgfVxuXG4gIGFzeW5jIGRpc2FibGVDYWxlbmRhckFjY2VzcyAoYnVuZGxlSUQpIHtcbiAgICBjb25zdCBkYiA9IGF3YWl0IHRoaXMuZ2V0REIoKTtcblxuICAgIGlmICgoYXdhaXQgdGhpcy5nZXRDYWxlbmRhclJvd0NvdW50KGJ1bmRsZUlEKSkgPiAwKSB7XG4gICAgICBhd2FpdCBleGVjU1FMaXRlUXVlcnkoZGIsIGBERUxFVEUgRlJPTSAnYWNjZXNzJyBXSEVSRSBjbGllbnQ9Jz8nIEFORCBzZXJ2aWNlPSdrVENDU2VydmljZUNhbGVuZGFyJ2AucmVwbGFjZSgvXFxuL2csICcgJyksIGJ1bmRsZUlEKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
