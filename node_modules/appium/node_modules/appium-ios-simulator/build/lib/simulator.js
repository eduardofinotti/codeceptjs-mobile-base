'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _simulatorXcode6 = require('./simulator-xcode-6');

var _simulatorXcode62 = _interopRequireDefault(_simulatorXcode6);

var _simulatorXcode7 = require('./simulator-xcode-7');

var _simulatorXcode72 = _interopRequireDefault(_simulatorXcode7);

var _simulatorXcode73 = require('./simulator-xcode-7.3');

var _simulatorXcode732 = _interopRequireDefault(_simulatorXcode73);

var _simulatorXcode8 = require('./simulator-xcode-8');

var _simulatorXcode82 = _interopRequireDefault(_simulatorXcode8);

var _simulatorXcode9 = require('./simulator-xcode-9');

var _simulatorXcode92 = _interopRequireDefault(_simulatorXcode9);

var _simulatorXcode93 = require('./simulator-xcode-9.3');

var _simulatorXcode932 = _interopRequireDefault(_simulatorXcode93);

var _simulatorXcode10 = require('./simulator-xcode-10');

var _simulatorXcode102 = _interopRequireDefault(_simulatorXcode10);

var _utils = require('./utils');

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

function handleUnsupportedXcode(xcodeVersion) {
  if (xcodeVersion.major < 6) {
    throw new Error('Tried to use an iOS simulator with xcode ' + ('version ' + xcodeVersion.versionString + ' but only Xcode version ') + '6.0.0 and up are supported');
  }
}

/**
 * Finds and returns the corresponding Simulator instance for the given ID.
 *
 * @param {string} udid - The ID of an existing Simulator.
 * @throws {Error} If the Simulator with given udid does not exist in devices list.
 *   If you want to create a new simulator, you can use the `createDevice()` method of
 *   [node-simctl](github.com/appium/node-simctl).
 * @return {object} Simulator object associated with the udid passed in.
 */
function getSimulator(udid) {
  var xcodeVersion, SimClass;
  return _regeneratorRuntime.async(function getSimulator$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumXcode2['default'].getVersion(true));

      case 2:
        xcodeVersion = context$1$0.sent;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap((0, _utils.simExists)(udid));

      case 5:
        if (context$1$0.sent) {
          context$1$0.next = 7;
          break;
        }

        throw new Error('No sim found with udid ' + udid);

      case 7:

        _logger2['default'].info('Constructing iOS simulator for Xcode version ' + xcodeVersion.versionString + ' ' + ('with udid \'' + udid + '\''));
        SimClass = undefined;
        context$1$0.t0 = xcodeVersion.major;
        context$1$0.next = context$1$0.t0 === 6 ? 12 : context$1$0.t0 === 7 ? 14 : context$1$0.t0 === 8 ? 16 : context$1$0.t0 === 9 ? 18 : context$1$0.t0 === 10 ? 20 : 22;
        break;

      case 12:
        SimClass = _simulatorXcode62['default'];
        return context$1$0.abrupt('break', 24);

      case 14:
        if (xcodeVersion.minor < 3) {
          SimClass = _simulatorXcode72['default'];
        } else {
          SimClass = _simulatorXcode732['default'];
        }
        return context$1$0.abrupt('break', 24);

      case 16:
        SimClass = _simulatorXcode82['default'];
        return context$1$0.abrupt('break', 24);

      case 18:
        if (xcodeVersion.minor < 3) {
          SimClass = _simulatorXcode92['default'];
        } else {
          SimClass = _simulatorXcode932['default'];
        }
        return context$1$0.abrupt('break', 24);

      case 20:
        SimClass = _simulatorXcode102['default'];
        return context$1$0.abrupt('break', 24);

      case 22:
        handleUnsupportedXcode(xcodeVersion);
        SimClass = _simulatorXcode932['default'];

      case 24:
        return context$1$0.abrupt('return', new SimClass(udid, xcodeVersion));

      case 25:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * Takes a set of options and finds the correct device string in order for Instruments to
 * identify the correct simulator.
 *
 * @param {object} opts - The options available are:
 *   - `deviceName` - a name for the device. If the given device name starts with `=`, the name, less the equals sign, is returned.
 *   - `platformVersion` - the version of iOS to use. Defaults to the current Xcode's maximum SDK version.
 *   - `forceIphone` - force the configuration of the device string to iPhone. Defaults to `false`.
 *   - `forceIpad` - force the configuration of the device string to iPad. Defaults to `false`.
 *   If both `forceIphone` and `forceIpad` are true, the device will be forced to iPhone.
 *
 * @return {string} The found device string, for example:
 *   'iPhone 5 (8.4)' with Xcode 7+
 *   'iPhone 5 (8.4 Simulator)' with Xcode 6+
 */
function getDeviceString(opts) {
  var xcodeVersion;
  return _regeneratorRuntime.async(function getDeviceString$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumXcode2['default'].getVersion(true));

      case 2:
        xcodeVersion = context$1$0.sent;

        handleUnsupportedXcode(xcodeVersion);

        _logger2['default'].info('Retrieving device name string for Xcode version ' + xcodeVersion.versionString);

        if (!(xcodeVersion.major >= 8)) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_simulatorXcode72['default'].getDeviceString(opts));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 11:
        if (!(xcodeVersion.major === 7)) {
          context$1$0.next = 17;
          break;
        }

        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(_simulatorXcode72['default'].getDeviceString(opts));

      case 14:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 17:
        if (!(xcodeVersion.major === 6)) {
          context$1$0.next = 21;
          break;
        }

        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(_simulatorXcode62['default'].getDeviceString(opts));

      case 20:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 21:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.getSimulator = getSimulator;
exports.getDeviceString = getDeviceString;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zaW11bGF0b3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OzsrQkFBNEIscUJBQXFCOzs7OytCQUNyQixxQkFBcUI7Ozs7Z0NBQ3BCLHVCQUF1Qjs7OzsrQkFDeEIscUJBQXFCOzs7OytCQUNyQixxQkFBcUI7Ozs7Z0NBQ3BCLHVCQUF1Qjs7OztnQ0FDdkIsc0JBQXNCOzs7O3FCQUN6QixTQUFTOzsyQkFDakIsY0FBYzs7OztzQkFDaEIsVUFBVTs7OztBQUcxQixTQUFTLHNCQUFzQixDQUFFLFlBQVksRUFBRTtBQUM3QyxNQUFJLFlBQVksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFO0FBQzFCLFVBQU0sSUFBSSxLQUFLLENBQUMsNERBQ1csWUFBWSxDQUFDLGFBQWEsOEJBQTBCLCtCQUNuQyxDQUFDLENBQUM7R0FDL0M7Q0FDRjs7Ozs7Ozs7Ozs7QUFXRCxTQUFlLFlBQVksQ0FBRSxJQUFJO01BQzNCLFlBQVksRUFRWixRQUFROzs7Ozt5Q0FSYSx5QkFBTSxVQUFVLENBQUMsSUFBSSxDQUFDOzs7QUFBM0Msb0JBQVk7O3lDQUVMLHNCQUFVLElBQUksQ0FBQzs7Ozs7Ozs7Y0FDbEIsSUFBSSxLQUFLLDZCQUEyQixJQUFJLENBQUc7Ozs7QUFHbkQsNEJBQUksSUFBSSxDQUFDLGtEQUFnRCxZQUFZLENBQUMsYUFBYSwyQkFDNUQsSUFBSSxRQUFHLENBQUMsQ0FBQztBQUM1QixnQkFBUTt5QkFDSixZQUFZLENBQUMsS0FBSzs4Q0FDbkIsQ0FBQywyQkFHRCxDQUFDLDJCQU9ELENBQUMsMkJBR0QsQ0FBQywyQkFPRCxFQUFFOzs7O0FBbkJMLGdCQUFRLCtCQUFrQixDQUFDOzs7O0FBRzNCLFlBQUksWUFBWSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUU7QUFDMUIsa0JBQVEsK0JBQWtCLENBQUM7U0FDNUIsTUFBTTtBQUNMLGtCQUFRLGdDQUFtQixDQUFDO1NBQzdCOzs7O0FBR0QsZ0JBQVEsK0JBQWtCLENBQUM7Ozs7QUFHM0IsWUFBSSxZQUFZLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRTtBQUMxQixrQkFBUSwrQkFBa0IsQ0FBQztTQUM1QixNQUFNO0FBQ0wsa0JBQVEsZ0NBQW1CLENBQUM7U0FDN0I7Ozs7QUFHRCxnQkFBUSxnQ0FBbUIsQ0FBQzs7OztBQUc1Qiw4QkFBc0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNyQyxnQkFBUSxnQ0FBbUIsQ0FBQzs7OzRDQUV6QixJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDOzs7Ozs7O0NBQ3hDOzs7Ozs7Ozs7Ozs7Ozs7OztBQWlCRCxTQUFlLGVBQWUsQ0FBRSxJQUFJO01BQzlCLFlBQVk7Ozs7O3lDQUFTLHlCQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUM7OztBQUEzQyxvQkFBWTs7QUFFaEIsOEJBQXNCLENBQUMsWUFBWSxDQUFDLENBQUM7O0FBRXJDLDRCQUFJLElBQUksc0RBQW9ELFlBQVksQ0FBQyxhQUFhLENBQUcsQ0FBQzs7Y0FDdEYsWUFBWSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUE7Ozs7Ozt5Q0FDWiw2QkFBZ0IsZUFBZSxDQUFDLElBQUksQ0FBQzs7Ozs7O2NBQ3pDLFlBQVksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFBOzs7Ozs7eUNBQ3BCLDZCQUFnQixlQUFlLENBQUMsSUFBSSxDQUFDOzs7Ozs7Y0FDekMsWUFBWSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUE7Ozs7Ozt5Q0FDcEIsNkJBQWdCLGVBQWUsQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7Ozs7Q0FFckQ7O1FBRVEsWUFBWSxHQUFaLFlBQVk7UUFBRSxlQUFlLEdBQWYsZUFBZSIsImZpbGUiOiJsaWIvc2ltdWxhdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNpbXVsYXRvclhjb2RlNiBmcm9tICcuL3NpbXVsYXRvci14Y29kZS02JztcbmltcG9ydCBTaW11bGF0b3JYY29kZTcgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtNyc7XG5pbXBvcnQgU2ltdWxhdG9yWGNvZGU3MyBmcm9tICcuL3NpbXVsYXRvci14Y29kZS03LjMnO1xuaW1wb3J0IFNpbXVsYXRvclhjb2RlOCBmcm9tICcuL3NpbXVsYXRvci14Y29kZS04JztcbmltcG9ydCBTaW11bGF0b3JYY29kZTkgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtOSc7XG5pbXBvcnQgU2ltdWxhdG9yWGNvZGU5MyBmcm9tICcuL3NpbXVsYXRvci14Y29kZS05LjMnO1xuaW1wb3J0IFNpbXVsYXRvclhjb2RlMTAgZnJvbSAnLi9zaW11bGF0b3IteGNvZGUtMTAnO1xuaW1wb3J0IHsgc2ltRXhpc3RzIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeGNvZGUgZnJvbSAnYXBwaXVtLXhjb2RlJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuXG5cbmZ1bmN0aW9uIGhhbmRsZVVuc3VwcG9ydGVkWGNvZGUgKHhjb2RlVmVyc2lvbikge1xuICBpZiAoeGNvZGVWZXJzaW9uLm1ham9yIDwgNikge1xuICAgIHRocm93IG5ldyBFcnJvcihgVHJpZWQgdG8gdXNlIGFuIGlPUyBzaW11bGF0b3Igd2l0aCB4Y29kZSBgICtcbiAgICAgICAgICAgICAgICAgICAgYHZlcnNpb24gJHt4Y29kZVZlcnNpb24udmVyc2lvblN0cmluZ30gYnV0IG9ubHkgWGNvZGUgdmVyc2lvbiBgICtcbiAgICAgICAgICAgICAgICAgICAgYDYuMC4wIGFuZCB1cCBhcmUgc3VwcG9ydGVkYCk7XG4gIH1cbn1cblxuLyoqXG4gKiBGaW5kcyBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBTaW11bGF0b3IgaW5zdGFuY2UgZm9yIHRoZSBnaXZlbiBJRC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdWRpZCAtIFRoZSBJRCBvZiBhbiBleGlzdGluZyBTaW11bGF0b3IuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIFNpbXVsYXRvciB3aXRoIGdpdmVuIHVkaWQgZG9lcyBub3QgZXhpc3QgaW4gZGV2aWNlcyBsaXN0LlxuICogICBJZiB5b3Ugd2FudCB0byBjcmVhdGUgYSBuZXcgc2ltdWxhdG9yLCB5b3UgY2FuIHVzZSB0aGUgYGNyZWF0ZURldmljZSgpYCBtZXRob2Qgb2ZcbiAqICAgW25vZGUtc2ltY3RsXShnaXRodWIuY29tL2FwcGl1bS9ub2RlLXNpbWN0bCkuXG4gKiBAcmV0dXJuIHtvYmplY3R9IFNpbXVsYXRvciBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoZSB1ZGlkIHBhc3NlZCBpbi5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0U2ltdWxhdG9yICh1ZGlkKSB7XG4gIGxldCB4Y29kZVZlcnNpb24gPSBhd2FpdCB4Y29kZS5nZXRWZXJzaW9uKHRydWUpO1xuXG4gIGlmICghYXdhaXQgc2ltRXhpc3RzKHVkaWQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBObyBzaW0gZm91bmQgd2l0aCB1ZGlkICR7dWRpZH1gKTtcbiAgfVxuXG4gIGxvZy5pbmZvKGBDb25zdHJ1Y3RpbmcgaU9TIHNpbXVsYXRvciBmb3IgWGNvZGUgdmVyc2lvbiAke3hjb2RlVmVyc2lvbi52ZXJzaW9uU3RyaW5nfSBgICtcbiAgICAgICAgICAgYHdpdGggdWRpZCAnJHt1ZGlkfSdgKTtcbiAgbGV0IFNpbUNsYXNzO1xuICBzd2l0Y2ggKHhjb2RlVmVyc2lvbi5tYWpvcikge1xuICAgIGNhc2UgNjpcbiAgICAgIFNpbUNsYXNzID0gU2ltdWxhdG9yWGNvZGU2O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA3OlxuICAgICAgaWYgKHhjb2RlVmVyc2lvbi5taW5vciA8IDMpIHtcbiAgICAgICAgU2ltQ2xhc3MgPSBTaW11bGF0b3JYY29kZTc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBTaW1DbGFzcyA9IFNpbXVsYXRvclhjb2RlNzM7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDg6XG4gICAgICBTaW1DbGFzcyA9IFNpbXVsYXRvclhjb2RlODtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgOTpcbiAgICAgIGlmICh4Y29kZVZlcnNpb24ubWlub3IgPCAzKSB7XG4gICAgICAgIFNpbUNsYXNzID0gU2ltdWxhdG9yWGNvZGU5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgU2ltQ2xhc3MgPSBTaW11bGF0b3JYY29kZTkzO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDpcbiAgICAgIFNpbUNsYXNzID0gU2ltdWxhdG9yWGNvZGUxMDtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBoYW5kbGVVbnN1cHBvcnRlZFhjb2RlKHhjb2RlVmVyc2lvbik7XG4gICAgICBTaW1DbGFzcyA9IFNpbXVsYXRvclhjb2RlOTM7XG4gIH1cbiAgcmV0dXJuIG5ldyBTaW1DbGFzcyh1ZGlkLCB4Y29kZVZlcnNpb24pO1xufVxuXG4vKipcbiAqIFRha2VzIGEgc2V0IG9mIG9wdGlvbnMgYW5kIGZpbmRzIHRoZSBjb3JyZWN0IGRldmljZSBzdHJpbmcgaW4gb3JkZXIgZm9yIEluc3RydW1lbnRzIHRvXG4gKiBpZGVudGlmeSB0aGUgY29ycmVjdCBzaW11bGF0b3IuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgLSBUaGUgb3B0aW9ucyBhdmFpbGFibGUgYXJlOlxuICogICAtIGBkZXZpY2VOYW1lYCAtIGEgbmFtZSBmb3IgdGhlIGRldmljZS4gSWYgdGhlIGdpdmVuIGRldmljZSBuYW1lIHN0YXJ0cyB3aXRoIGA9YCwgdGhlIG5hbWUsIGxlc3MgdGhlIGVxdWFscyBzaWduLCBpcyByZXR1cm5lZC5cbiAqICAgLSBgcGxhdGZvcm1WZXJzaW9uYCAtIHRoZSB2ZXJzaW9uIG9mIGlPUyB0byB1c2UuIERlZmF1bHRzIHRvIHRoZSBjdXJyZW50IFhjb2RlJ3MgbWF4aW11bSBTREsgdmVyc2lvbi5cbiAqICAgLSBgZm9yY2VJcGhvbmVgIC0gZm9yY2UgdGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIGRldmljZSBzdHJpbmcgdG8gaVBob25lLiBEZWZhdWx0cyB0byBgZmFsc2VgLlxuICogICAtIGBmb3JjZUlwYWRgIC0gZm9yY2UgdGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIGRldmljZSBzdHJpbmcgdG8gaVBhZC4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAqICAgSWYgYm90aCBgZm9yY2VJcGhvbmVgIGFuZCBgZm9yY2VJcGFkYCBhcmUgdHJ1ZSwgdGhlIGRldmljZSB3aWxsIGJlIGZvcmNlZCB0byBpUGhvbmUuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgZm91bmQgZGV2aWNlIHN0cmluZywgZm9yIGV4YW1wbGU6XG4gKiAgICdpUGhvbmUgNSAoOC40KScgd2l0aCBYY29kZSA3K1xuICogICAnaVBob25lIDUgKDguNCBTaW11bGF0b3IpJyB3aXRoIFhjb2RlIDYrXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldERldmljZVN0cmluZyAob3B0cykge1xuICBsZXQgeGNvZGVWZXJzaW9uID0gYXdhaXQgeGNvZGUuZ2V0VmVyc2lvbih0cnVlKTtcblxuICBoYW5kbGVVbnN1cHBvcnRlZFhjb2RlKHhjb2RlVmVyc2lvbik7XG5cbiAgbG9nLmluZm8oYFJldHJpZXZpbmcgZGV2aWNlIG5hbWUgc3RyaW5nIGZvciBYY29kZSB2ZXJzaW9uICR7eGNvZGVWZXJzaW9uLnZlcnNpb25TdHJpbmd9YCk7XG4gIGlmICh4Y29kZVZlcnNpb24ubWFqb3IgPj0gOCkge1xuICAgIHJldHVybiBhd2FpdCBTaW11bGF0b3JYY29kZTcuZ2V0RGV2aWNlU3RyaW5nKG9wdHMpO1xuICB9IGVsc2UgaWYgKHhjb2RlVmVyc2lvbi5tYWpvciA9PT0gNykge1xuICAgIHJldHVybiBhd2FpdCBTaW11bGF0b3JYY29kZTcuZ2V0RGV2aWNlU3RyaW5nKG9wdHMpO1xuICB9IGVsc2UgaWYgKHhjb2RlVmVyc2lvbi5tYWpvciA9PT0gNikge1xuICAgIHJldHVybiBhd2FpdCBTaW11bGF0b3JYY29kZTYuZ2V0RGV2aWNlU3RyaW5nKG9wdHMpO1xuICB9XG59XG5cbmV4cG9ydCB7IGdldFNpbXVsYXRvciwgZ2V0RGV2aWNlU3RyaW5nIH07XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uIn0=
