'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _teen_process = require('teen_process');

var _fancyLog = require('fancy-log');

var _fancyLog2 = _interopRequireDefault(_fancyLog);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var SE_VER = "0.17.0";
var SE_DOWNLOAD_CDNURL = process.env.npm_config_selendroid_driver_cdnurl || process.env.SELENDROID_DRIVER_CDNURL || "http://repo1.maven.org/maven2/io/selendroid/selendroid-standalone";
var SE_DOWNLOAD = SE_DOWNLOAD_CDNURL + '/' + SE_VER + '/selendroid-standalone-' + SE_VER + '-with-dependencies.jar';
var SE_DOWNLOAD_SHA256 = "7cf7163ac47f1c46eff95b62f78b58c1dabdec534acc6632da3784739f6e9d82";
var SE_DIR = _path2['default'].resolve(__dirname, "..", "..", "selendroid");
var SE_DOWNLOAD_DIR = _path2['default'].resolve(SE_DIR, "download");
// Use of temporary file means that SE_JAR_PATH can only exist if it has
// verified content.
var SE_JAR_PATH_TMP = _path2['default'].resolve(SE_DOWNLOAD_DIR, "selendroid-server.jar.tmp");
// Putting fingerprint in file name means download triggered if fingerprint changed.
var SE_JAR_PATH = _path2['default'].resolve(SE_DOWNLOAD_DIR, 'selendroid-server-' + SE_DOWNLOAD_SHA256 + '.jar');
var SE_APK_PATH = _path2['default'].resolve(SE_DIR, "selendroid-server.apk");
var SE_MANIFEST_PATH = _path2['default'].resolve(SE_DIR, "AndroidManifest.xml");

function setupSelendroid() {
  var manifestPath, serverPath, extractedManifestPath, extractedServerPath;
  return _regeneratorRuntime.async(function setupSelendroid$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('jar'));

      case 3:
        context$1$0.next = 10;
        break;

      case 5:
        context$1$0.prev = 5;
        context$1$0.t0 = context$1$0['catch'](0);

        if (!(context$1$0.t0.message.indexOf("ENOENT") !== -1 || context$1$0.t0.message.indexOf("exited with code 2") !== -1 || context$1$0.t0.message.indexOf("Command 'jar' not found. Is it installed?") !== -1)) {
          context$1$0.next = 10;
          break;
        }

        _fancyLog2['default'].error("Could not find Java's 'jar' executable on your PATH. Please " + "ensure it is present and try running install again");
        return context$1$0.abrupt('return');

      case 10:
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(SE_JAR_PATH));

      case 12:
        if (!context$1$0.sent) {
          context$1$0.next = 16;
          break;
        }

        (0, _fancyLog2['default'])("Standalone jar exists, skipping download: " + SE_JAR_PATH);
        context$1$0.next = 18;
        break;

      case 16:
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(downloadSelendroid());

      case 18:
        (0, _fancyLog2['default'])('Determining AndroidManifest location');
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap(getFilePathFromJar(/AndroidManifest.*\.xml$/, SE_JAR_PATH));

      case 21:
        manifestPath = context$1$0.sent;

        (0, _fancyLog2['default'])('Determining server apk location');
        context$1$0.next = 25;
        return _regeneratorRuntime.awrap(getFilePathFromJar(/selendroid-server.*\.apk$/, SE_JAR_PATH));

      case 25:
        serverPath = context$1$0.sent;

        (0, _fancyLog2['default'])('Extracting manifest and apk to ' + SE_DOWNLOAD_DIR);
        context$1$0.next = 29;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('jar', ['xf', SE_JAR_PATH, manifestPath, serverPath], {
          cwd: SE_DOWNLOAD_DIR
        }));

      case 29:
        (0, _fancyLog2['default'])('Copying manifest and apk to ' + SE_DIR);
        extractedManifestPath = _path2['default'].resolve(SE_DOWNLOAD_DIR, manifestPath);
        extractedServerPath = _path2['default'].resolve(SE_DOWNLOAD_DIR, serverPath);
        context$1$0.next = 34;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(extractedManifestPath, SE_MANIFEST_PATH));

      case 34:
        context$1$0.next = 36;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(extractedServerPath, SE_APK_PATH));

      case 36:
        (0, _fancyLog2['default'])("Cleaning up temp files");
        context$1$0.next = 39;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(extractedManifestPath));

      case 39:
        context$1$0.next = 41;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(extractedServerPath));

      case 41:
        (0, _fancyLog2['default'])('Fixing AndroidManifest icon bug');
        context$1$0.next = 44;
        return _regeneratorRuntime.awrap(fixManifestIcons(SE_MANIFEST_PATH));

      case 44:
        context$1$0.next = 46;
        return _regeneratorRuntime.awrap(serverExists());

      case 46:
        if (context$1$0.sent) {
          context$1$0.next = 48;
          break;
        }

        throw new Error("Something went wrong in setting up selendroid");

      case 48:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 5]]);
}

function downloadSelendroid() {
  var body, fingerprint;
  return _regeneratorRuntime.async(function downloadSelendroid$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        (0, _fancyLog2['default'])('Ensuring ' + SE_DOWNLOAD_DIR + ' exists');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(SE_DIR));

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(SE_DOWNLOAD_DIR));

      case 5:
        (0, _fancyLog2['default'])('Downloading Selendroid standalone server version ' + SE_VER + ' from ' + (SE_DOWNLOAD + ' --> ' + SE_JAR_PATH));
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_requestPromise2['default'].get({ url: SE_DOWNLOAD, encoding: null }));

      case 8:
        body = context$1$0.sent;

        if (!(!body instanceof Buffer)) {
          context$1$0.next = 11;
          break;
        }

        throw new Error(Object.prototype.toString.call(body));

      case 11:
        (0, _fancyLog2['default'])('Writing binary content to ' + SE_JAR_PATH_TMP);
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(SE_JAR_PATH_TMP, body));

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.chmod(SE_JAR_PATH_TMP, 420));

      case 16:
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(sha256(body));

      case 18:
        fingerprint = context$1$0.sent;

        if (!(fingerprint === SE_DOWNLOAD_SHA256)) {
          context$1$0.next = 25;
          break;
        }

        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rename(SE_JAR_PATH_TMP, SE_JAR_PATH));

      case 22:
        (0, _fancyLog2['default'])("Selendroid standalone server downloaded");
        context$1$0.next = 26;
        break;

      case 25:
        throw new Error('Bad SHA256 fingerprint: \'' + fingerprint + '\', bytes: ' + body.length);

      case 26:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function sha256(buffer) {
  var hash;
  return _regeneratorRuntime.async(function sha256$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        hash = _crypto2['default'].createHash('sha256');
        return context$1$0.abrupt('return', hash.update(buffer).digest('hex'));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getFilePathFromJar(fileRegex, jarPath) {
  var _ref, stdout, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, line;

  return _regeneratorRuntime.async(function getFilePathFromJar$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('jar', ['tf', jarPath]));

      case 2:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 7;
        _iterator = _getIterator(stdout.split("\n"));

      case 9:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 16;
          break;
        }

        line = _step.value;

        if (!fileRegex.test(line.trim())) {
          context$1$0.next = 13;
          break;
        }

        return context$1$0.abrupt('return', line.trim());

      case 13:
        _iteratorNormalCompletion = true;
        context$1$0.next = 9;
        break;

      case 16:
        context$1$0.next = 22;
        break;

      case 18:
        context$1$0.prev = 18;
        context$1$0.t0 = context$1$0['catch'](7);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 22:
        context$1$0.prev = 22;
        context$1$0.prev = 23;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 25:
        context$1$0.prev = 25;

        if (!_didIteratorError) {
          context$1$0.next = 28;
          break;
        }

        throw _iteratorError;

      case 28:
        return context$1$0.finish(25);

      case 29:
        return context$1$0.finish(22);

      case 30:
        throw new Error('Could not find ' + fileRegex + ' in ' + jarPath);

      case 31:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[7, 18, 22, 30], [23,, 25, 29]]);
}

function serverExists() {
  return _regeneratorRuntime.async(function serverExists$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(SE_APK_PATH));

      case 3:
        context$1$0.t0 = context$1$0.sent;

        if (!context$1$0.t0) {
          context$1$0.next = 8;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(SE_MANIFEST_PATH));

      case 7:
        context$1$0.t0 = context$1$0.sent;

      case 8:
        return context$1$0.abrupt('return', context$1$0.t0);

      case 11:
        context$1$0.prev = 11;
        context$1$0.t1 = context$1$0['catch'](0);

        if (!(context$1$0.t1.code.indexOf("ENOENT") !== -1)) {
          context$1$0.next = 15;
          break;
        }

        return context$1$0.abrupt('return', false);

      case 15:
        throw context$1$0.t1;

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 11]]);
}

function fixManifestIcons(manifest) {
  var curData, iconRe, newData;
  return _regeneratorRuntime.async(function fixManifestIcons$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(manifest));

      case 2:
        curData = context$1$0.sent.toString('utf8');
        iconRe = /application[\s\S]+android:icon="[^"]+"/;
        newData = curData.replace(iconRe, "application");
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(manifest, newData));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.setupSelendroid = setupSelendroid;
exports.serverExists = serverExists;
exports.SE_APK_PATH = SE_APK_PATH;
exports.SE_MANIFEST_PATH = SE_MANIFEST_PATH;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
