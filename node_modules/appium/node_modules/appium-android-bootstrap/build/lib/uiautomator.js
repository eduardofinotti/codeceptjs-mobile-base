'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _appiumSupport = require('appium-support');

var log = _appiumSupport.logger.getLogger('UiAutomator');

var UiAutomator = (function (_events$EventEmitter) {
  _inherits(UiAutomator, _events$EventEmitter);

  function UiAutomator(adb) {
    _classCallCheck(this, UiAutomator);

    if (!adb) {
      log.errorAndThrow('adb is required to instantiate UiAutomator');
    }
    _get(Object.getPrototypeOf(UiAutomator.prototype), 'constructor', this).call(this);
    this.adb = adb;
    this.tempPath = '/data/local/tmp/';
  }

  _createClass(UiAutomator, [{
    key: 'start',
    value: function start(uiAutomatorBinaryPath, className, startDetector) {
      var processIsAlive,
          jarName,
          _len,
          extraParams,
          _key,
          args,
          args$2$0 = arguments;

      return _regeneratorRuntime.async(function start$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            processIsAlive = undefined;
            context$2$0.prev = 1;

            log.debug('Starting UiAutomator');
            this.changeState(UiAutomator.STATE_STARTING);

            log.debug('Parsing uiautomator jar');
            // expecting a path like /ads/ads/foo.jar or \asd\asd\foo.jar
            jarName = this.parseJarNameFromPath(uiAutomatorBinaryPath);
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.adb.push(uiAutomatorBinaryPath, this.tempPath));

          case 8:
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.killUiAutomatorOnDevice());

          case 10:

            log.debug('Starting UIAutomator');

            for (_len = args$2$0.length, extraParams = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
              extraParams[_key - 3] = args$2$0[_key];
            }

            args = ['shell', 'uiautomator', 'runtest', jarName, '-c', className].concat(extraParams);

            this.proc = this.adb.createSubProcess(args);

            // handle out-of-bound exit by simply emitting a stopped state
            this.proc.on('exit', function (code, signal) {
              processIsAlive = false;
              // cleanup
              if (_this.state !== UiAutomator.STATE_STOPPED && _this.state !== UiAutomator.STATE_STOPPING) {
                var msg = 'UiAutomator exited unexpectedly with code ' + code + ', ' + ('signal ' + signal);
                log.error(msg);
              } else if (_this.state === UiAutomator.STATE_STOPPING) {
                log.debug('UiAutomator shut down normally');
              }
              _this.changeState(UiAutomator.STATE_STOPPED);
            });

            context$2$0.next = 17;
            return _regeneratorRuntime.awrap(this.proc.start(startDetector));

          case 17:
            processIsAlive = true;
            this.changeState(UiAutomator.STATE_ONLINE);
            return context$2$0.abrupt('return', this.proc);

          case 22:
            context$2$0.prev = 22;
            context$2$0.t0 = context$2$0['catch'](1);

            this.emit(UiAutomator.EVENT_ERROR, context$2$0.t0);

            if (!processIsAlive) {
              context$2$0.next = 30;
              break;
            }

            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(this.killUiAutomatorOnDevice());

          case 28:
            context$2$0.next = 30;
            return _regeneratorRuntime.awrap(this.proc.stop());

          case 30:
            log.errorAndThrow(context$2$0.t0);

          case 31:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 22]]);
    }
  }, {
    key: 'shutdown',
    value: function shutdown() {
      return _regeneratorRuntime.async(function shutdown$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            log.debug('Shutting down UiAutomator');

            if (!(this.state !== UiAutomator.STATE_STOPPED)) {
              context$2$0.next = 5;
              break;
            }

            this.changeState(UiAutomator.STATE_STOPPING);
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.proc.stop());

          case 5:
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.killUiAutomatorOnDevice());

          case 7:
            this.changeState(UiAutomator.STATE_STOPPED);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'parseJarNameFromPath',
    value: function parseJarNameFromPath(binaryPath) {
      var reTest = /.*(\/|\\)(.*\.jar)/.exec(binaryPath);
      if (!reTest) {
        throw new Error('Unable to parse jar name from ' + binaryPath);
      }
      var jarName = reTest[2];
      log.debug('Found jar name: \'' + jarName + '\'');
      return jarName;
    }
  }, {
    key: 'changeState',
    value: function changeState(state) {
      log.debug('Moving to state \'' + state + '\'');
      this.state = state;
      this.emit(UiAutomator.EVENT_CHANGED, { state: state });
    }
  }, {
    key: 'killUiAutomatorOnDevice',
    value: function killUiAutomatorOnDevice() {
      return _regeneratorRuntime.async(function killUiAutomatorOnDevice$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.adb.killProcessesByName('uiautomator'));

          case 3:
            context$2$0.next = 8;
            break;

          case 5:
            context$2$0.prev = 5;
            context$2$0.t0 = context$2$0['catch'](0);

            log.warn('Error while killing uiAutomator: ' + context$2$0.t0);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 5]]);
    }
  }]);

  return UiAutomator;
})(_events2['default'].EventEmitter);

UiAutomator.EVENT_ERROR = 'uiautomator_error';
UiAutomator.EVENT_CHANGED = 'stateChanged';
UiAutomator.STATE_STOPPING = 'stopping';
UiAutomator.STATE_STOPPED = 'stopped';
UiAutomator.STATE_STARTING = 'starting';
UiAutomator.STATE_ONLINE = 'online';

exports.UiAutomator = UiAutomator;
exports['default'] = UiAutomator;

// killing any uiautomator existing processes
//# sourceMappingURL=data:application/json;charset=utf8;base64,
