'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumIosDriver = require('appium-ios-driver');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _teen_process = require('teen_process');

var _nodeSimctl = require('node-simctl');

var CONTAINER_PATH_MARKER = '@';
// https://regex101.com/r/PLdB0G/2
var CONTAINER_PATH_PATTERN = new RegExp('^' + CONTAINER_PATH_MARKER + '([^/]+)/(.+)');

var commands = _appiumIosDriver.iosCommands.file;

function verifyIFusePresence() {
  return _regeneratorRuntime.async(function verifyIFusePresence$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.which('ifuse'));

      case 2:
        if (context$1$0.sent) {
          context$1$0.next = 4;
          break;
        }

        _logger2['default'].errorAndThrow('\'ifuse\' tool is required to be installed on the machine. ' + 'Install it using \'brew cask install osxfuse && brew install ifuse\' or check ' + 'if it is available in PATH environment variable if the tool is already installed. ' + ('Current PATH value: ' + process.env.PATH));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function mountDevice(device, iFuseArgs) {
  return _regeneratorRuntime.async(function mountDevice$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Starting ifuse with args \'' + iFuseArgs + '\'...');
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('ifuse', iFuseArgs));

      case 4:
        context$1$0.next = 9;
        break;

      case 6:
        context$1$0.prev = 6;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].errorAndThrow('Cannot mount the media folder of the device with UDID ' + device.udid + '. ' + 'Make sure osxfuse plugin has necessary permissions in System Preferences->Security & Privacy. ' + ('Error code: ' + context$1$0.t0.code + '; stderr output: ' + context$1$0.t0.stderr));

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 6]]);
}

function verifyIsSubPath(originalPath, root) {
  var normalizedRoot = _path2['default'].normalize(root);
  var normalizedPath = _path2['default'].normalize(_path2['default'].dirname(originalPath));
  if (!normalizedPath.startsWith(normalizedRoot)) {
    _logger2['default'].errorAndThrow('\'' + normalizedPath + '\' is expected to be a subpath of \'' + normalizedRoot + '\'');
  }
}

function parseContainerPath(remotePath, containerRootSupplier) {
  var match, containerRoot, resultPath;
  return _regeneratorRuntime.async(function parseContainerPath$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        match = CONTAINER_PATH_PATTERN.exec(remotePath);

        if (!match) {
          _logger2['default'].errorAndThrow('It is expected that package identifier is separated from the relative path with a single slash. ' + ('\'' + remotePath + '\' is given instead'));
        }

        if (!_lodash2['default'].isFunction(containerRootSupplier)) {
          context$1$0.next = 8;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(containerRootSupplier(match[1]));

      case 5:
        context$1$0.t0 = context$1$0.sent;
        context$1$0.next = 9;
        break;

      case 8:
        context$1$0.t0 = containerRootSupplier;

      case 9:
        containerRoot = context$1$0.t0;
        resultPath = _path2['default'].posix.resolve(containerRoot, match[2]);

        verifyIsSubPath(resultPath, containerRoot);
        return context$1$0.abrupt('return', [match[1], resultPath]);

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * Save the given base64 data chunk as a binary file on the Simulator under test.
 *
 * @param {Object} device - The device object, which represents the device under test.
 *                          This object is expected to have the `udid` property containing the
 *                          valid device ID.
 * @param {string} remotePath - The remote path on the device. This variable can be prefixed with
 *                              bundle id, so then the file will be uploaded to the corresponding
 *                              application container instead of the default media folder, for example
 *                              '@com.myapp.bla/RelativePathInContainer/111.png'. The '@' character at the
 *                              beginning of the argument is mandatory in such case.
 *                              The relative folder path is ignored if the file is going to be uploaded
 *                              to the default media folder and only the file name is considered important.
 * @param {string} base64Data - Base-64 encoded content of the file to be uploaded.
 */
function pushFileToSimulator(device, remotePath, base64Data) {
  var buffer, _ref, _ref2, bundleId, _dstPath, dstFolder, dstPath;

  return _regeneratorRuntime.async(function pushFileToSimulator$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        buffer = Buffer.from(base64Data, 'base64');

        if (!CONTAINER_PATH_PATTERN.test(remotePath)) {
          context$1$0.next = 18;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(parseContainerPath(remotePath, function callee$1$0(x) {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap((0, _nodeSimctl.getAppContainer)(device.udid, x));

              case 2:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 3:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }));

      case 4:
        _ref = context$1$0.sent;
        _ref2 = _slicedToArray(_ref, 2);
        bundleId = _ref2[0];
        _dstPath = _ref2[1];

        _logger2['default'].info('Parsed bundle identifier \'' + bundleId + '\' from \'' + remotePath + '\'. ' + ('Will put the data into \'' + _dstPath + '\''));
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(_path2['default'].dirname(_dstPath)));

      case 11:
        if (context$1$0.sent) {
          context$1$0.next = 15;
          break;
        }

        _logger2['default'].debug('The destination folder \'' + _path2['default'].dirname(_dstPath) + '\' does not exist. Creating...');
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(_path2['default'].dirname(_dstPath)));

      case 15:
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(_dstPath, buffer));

      case 17:
        return context$1$0.abrupt('return');

      case 18:
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.openDir());

      case 20:
        dstFolder = context$1$0.sent;
        dstPath = _path2['default'].resolve(dstFolder, _path2['default'].basename(remotePath));
        context$1$0.prev = 22;
        context$1$0.next = 25;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(dstPath, buffer));

      case 25:
        context$1$0.next = 27;
        return _regeneratorRuntime.awrap((0, _nodeSimctl.addMedia)(device.udid, dstPath));

      case 27:
        context$1$0.prev = 27;
        context$1$0.next = 30;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(dstFolder));

      case 30:
        return context$1$0.finish(27);

      case 31:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[22,, 27, 31]]);
}

/**
 * Save the given base64 data chunk as a binary file on the device under test.
 * ifuse/osxfuse should be installed and configured on the target machine in order
 * for this function to work properly. Read https://github.com/libimobiledevice/ifuse
 * and https://github.com/osxfuse/osxfuse/wiki/FAQ for more details.
 *
 * @param {Object} device - The device object, which represents the device under test.
 *                          This object is expected to have the `udid` property containing the
 *                          valid device ID.
 * @param {string} remotePath - The remote path on the device. This variable can be prefixed with
 *                              bundle id, so then the file will be uploaded to the corresponding
 *                              application container instead of the default media folder, for example
 *                              '@com.myapp.bla/RelativePathInContainer/111.png'. The '@' character at the
 *                              beginning of the argument is mandatory in such case.
 * @param {string} base64Data - Base-64 encoded content of the file to be uploaded.
 */
function pushFileToRealDevice(device, remotePath, base64Data) {
  var mntRoot, isUnmountSuccessful, dstPath, ifuseArgs, _ref3, _ref32, bundleId, pathInContainer;

  return _regeneratorRuntime.async(function pushFileToRealDevice$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(verifyIFusePresence());

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.openDir());

      case 4:
        mntRoot = context$1$0.sent;
        isUnmountSuccessful = true;
        context$1$0.prev = 6;
        dstPath = _path2['default'].resolve(mntRoot, remotePath);
        ifuseArgs = ['-u', device.udid, mntRoot];

        if (!CONTAINER_PATH_PATTERN.test(remotePath)) {
          context$1$0.next = 21;
          break;
        }

        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(parseContainerPath(remotePath, mntRoot));

      case 12:
        _ref3 = context$1$0.sent;
        _ref32 = _slicedToArray(_ref3, 2);
        bundleId = _ref32[0];
        pathInContainer = _ref32[1];

        dstPath = pathInContainer;
        _logger2['default'].info('Parsed bundle identifier \'' + bundleId + '\' from \'' + remotePath + '\'. ' + ('Will put the data into \'' + dstPath + '\''));
        ifuseArgs = ['-u', device.udid, '--container', bundleId, mntRoot];
        context$1$0.next = 22;
        break;

      case 21:
        verifyIsSubPath(dstPath, mntRoot);

      case 22:
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(mountDevice(device, ifuseArgs));

      case 24:
        isUnmountSuccessful = false;
        context$1$0.prev = 25;
        context$1$0.next = 28;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(_path2['default'].dirname(dstPath)));

      case 28:
        if (context$1$0.sent) {
          context$1$0.next = 32;
          break;
        }

        _logger2['default'].debug('The destination folder \'' + _path2['default'].dirname(dstPath) + '\' does not exist. Creating...');
        context$1$0.next = 32;
        return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(_path2['default'].dirname(dstPath)));

      case 32:
        context$1$0.next = 34;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(dstPath, Buffer.from(base64Data, 'base64')));

      case 34:
        context$1$0.prev = 34;
        context$1$0.next = 37;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('umount', [mntRoot]));

      case 37:
        isUnmountSuccessful = true;
        return context$1$0.finish(34);

      case 39:
        context$1$0.prev = 39;

        if (!isUnmountSuccessful) {
          context$1$0.next = 45;
          break;
        }

        context$1$0.next = 43;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(mntRoot));

      case 43:
        context$1$0.next = 46;
        break;

      case 45:
        _logger2['default'].warn('Umount has failed, so not removing \'' + mntRoot + '\'');

      case 46:
        return context$1$0.finish(39);

      case 47:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6,, 39, 47], [25,, 34, 39]]);
}

/**
 * Get the content of given file or folder from iOS Simulator and return it as base-64 encoded string.
 * Folder content is recursively packed into a zip archive.
 *
 * @param {Object} device - The device object, which represents the device under test.
 *                          This object is expected to have the `udid` property containing the
 *                          valid device ID.
 * @param {string} remotePath - The path to a file or a folder, which exists in the corresponding application
 *                              container on Simulator. Use
 *                              @<app_bundle_id>/<path_to_the_file_or_folder_inside_container>
 *                              format to pull a file or a folder from an application container
 * @param {boolean} isFile - Whether the destination item is a file or a folder
 * @returns {string} Base-64 encoded content of the file.
 */
function pullFromSimulator(device, remotePath, isFile) {
  var pathOnServer, _ref4, _ref42, bundleId, dstPath, simRoot, buffer;

  return _regeneratorRuntime.async(function pullFromSimulator$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        pathOnServer = undefined;

        if (!CONTAINER_PATH_PATTERN.test(remotePath)) {
          context$1$0.next = 12;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(parseContainerPath(remotePath, function callee$1$0(x) {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap((0, _nodeSimctl.getAppContainer)(device.udid, x));

              case 2:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 3:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this2);
        }));

      case 4:
        _ref4 = context$1$0.sent;
        _ref42 = _slicedToArray(_ref4, 2);
        bundleId = _ref42[0];
        dstPath = _ref42[1];

        _logger2['default'].info('Parsed bundle identifier \'' + bundleId + '\' from \'' + remotePath + '\'. ' + ('Will get the data from \'' + dstPath + '\''));
        pathOnServer = dstPath;
        context$1$0.next = 16;
        break;

      case 12:
        simRoot = device.getDir();

        pathOnServer = _path2['default'].posix.join(simRoot, remotePath);
        verifyIsSubPath(pathOnServer, simRoot);
        _logger2['default'].info('Got the full item path: ' + pathOnServer);

      case 16:
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(pathOnServer));

      case 18:
        if (context$1$0.sent) {
          context$1$0.next = 20;
          break;
        }

        _logger2['default'].errorAndThrow('The remote ' + (isFile ? 'file' : 'folder') + ' at \'' + pathOnServer + '\' does not exist');

      case 20:
        if (!isFile) {
          context$1$0.next = 26;
          break;
        }

        context$1$0.next = 23;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(pathOnServer));

      case 23:
        context$1$0.t0 = context$1$0.sent;
        context$1$0.next = 29;
        break;

      case 26:
        context$1$0.next = 28;
        return _regeneratorRuntime.awrap(_appiumSupport.zip.toInMemoryZip(pathOnServer));

      case 28:
        context$1$0.t0 = context$1$0.sent;

      case 29:
        buffer = context$1$0.t0;
        return context$1$0.abrupt('return', Buffer.from(buffer).toString('base64'));

      case 31:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 * Get the content of given file or folder from the real device under test and return it as base-64 encoded string.
 * Folder content is recursively packed into a zip archive.
 *
 * @param {Object} device - The device object, which represents the device under test.
 *                          This object is expected to have the `udid` property containing the
 *                          valid device ID.
 * @param {string} remotePath - The path to an existing remote file on the device. This variable can be prefixed with
 *                              bundle id, so then the file will be downloaded from the corresponding
 *                              application container instead of the default media folder, for example
 *                              '@com.myapp.bla/RelativePathInContainer/111.png'. The '@' character at the
 *                              beginning of the argument is mandatory in such case.
 * @param {boolean} isFile - Whether the destination item is a file or a folder
 * @return {string} Base-64 encoded content of the remote file
 */
function pullFromRealDevice(device, remotePath, isFile) {
  var mntRoot, isUnmountSuccessful, dstPath, ifuseArgs, _ref5, _ref52, bundleId, pathInContainer, buffer;

  return _regeneratorRuntime.async(function pullFromRealDevice$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(verifyIFusePresence());

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.openDir());

      case 4:
        mntRoot = context$1$0.sent;
        isUnmountSuccessful = true;
        context$1$0.prev = 6;
        dstPath = _path2['default'].resolve(mntRoot, remotePath);
        ifuseArgs = ['-u', device.udid, mntRoot];

        if (!CONTAINER_PATH_PATTERN.test(remotePath)) {
          context$1$0.next = 21;
          break;
        }

        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(parseContainerPath(remotePath, mntRoot));

      case 12:
        _ref5 = context$1$0.sent;
        _ref52 = _slicedToArray(_ref5, 2);
        bundleId = _ref52[0];
        pathInContainer = _ref52[1];

        dstPath = pathInContainer;
        _logger2['default'].info('Parsed bundle identifier \'' + bundleId + '\' from \'' + remotePath + '\'. ' + ('Will get the data from \'' + dstPath + '\''));
        ifuseArgs = ['-u', device.udid, '--container', bundleId, mntRoot];
        context$1$0.next = 22;
        break;

      case 21:
        verifyIsSubPath(dstPath, mntRoot);

      case 22:
        context$1$0.next = 24;
        return _regeneratorRuntime.awrap(mountDevice(device, ifuseArgs));

      case 24:
        isUnmountSuccessful = false;
        context$1$0.prev = 25;
        context$1$0.next = 28;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(dstPath));

      case 28:
        if (context$1$0.sent) {
          context$1$0.next = 30;
          break;
        }

        _logger2['default'].errorAndThrow('The remote ' + (isFile ? 'file' : 'folder') + ' at \'' + dstPath + '\' does not exist');

      case 30:
        if (!isFile) {
          context$1$0.next = 36;
          break;
        }

        context$1$0.next = 33;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(dstPath));

      case 33:
        context$1$0.t0 = context$1$0.sent;
        context$1$0.next = 39;
        break;

      case 36:
        context$1$0.next = 38;
        return _regeneratorRuntime.awrap(_appiumSupport.zip.toInMemoryZip(dstPath));

      case 38:
        context$1$0.t0 = context$1$0.sent;

      case 39:
        buffer = context$1$0.t0;
        return context$1$0.abrupt('return', Buffer.from(buffer).toString('base64'));

      case 41:
        context$1$0.prev = 41;
        context$1$0.next = 44;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('umount', [mntRoot]));

      case 44:
        isUnmountSuccessful = true;
        return context$1$0.finish(41);

      case 46:
        context$1$0.prev = 46;

        if (!isUnmountSuccessful) {
          context$1$0.next = 52;
          break;
        }

        context$1$0.next = 50;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(mntRoot));

      case 50:
        context$1$0.next = 53;
        break;

      case 52:
        _logger2['default'].warn('Umount has failed, so not removing \'' + mntRoot + '\'');

      case 53:
        return context$1$0.finish(46);

      case 54:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6,, 46, 54], [25,, 41, 46]]);
}

commands.pushFile = function callee$0$0(remotePath, base64Data) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (remotePath.endsWith('/')) {
          _logger2['default'].errorAndThrow('It is expected that remote path points to a file and not to a folder. ' + ('\'' + remotePath + '\' is given instead'));
        }
        if (_lodash2['default'].isArray(base64Data)) {
          // some clients (ahem) java, send a byte array encoding utf8 characters
          // instead of a string, which would be infinitely better!
          base64Data = Buffer.from(base64Data).toString('utf8');
        }

        if (!this.isSimulator()) {
          context$1$0.next = 8;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(pushFileToSimulator(this.opts.device, remotePath, base64Data));

      case 5:
        context$1$0.t0 = context$1$0.sent;
        context$1$0.next = 11;
        break;

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(pushFileToRealDevice(this.opts.device, remotePath, base64Data));

      case 10:
        context$1$0.t0 = context$1$0.sent;

      case 11:
        return context$1$0.abrupt('return', context$1$0.t0);

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.pullFile = function callee$0$0(remotePath) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (remotePath.endsWith('/')) {
          _logger2['default'].errorAndThrow('It is expected that remote path points to a file and not to a folder. ' + ('\'' + remotePath + '\' is given instead'));
        }

        if (!this.isSimulator()) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(pullFromSimulator(this.opts.device, remotePath, true));

      case 4:
        context$1$0.t0 = context$1$0.sent;
        context$1$0.next = 10;
        break;

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(pullFromRealDevice(this.opts.device, remotePath, true));

      case 9:
        context$1$0.t0 = context$1$0.sent;

      case 10:
        return context$1$0.abrupt('return', context$1$0.t0);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getSimFileFullPath = function callee$0$0(remotePath) {
  var basePath, appName, appNameRegex, appNameMatches, findPath, _ref6, stdout, appRoot, subPath, fullPath;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        basePath = this.opts.device.getDir();
        appName = null;

        if (this.opts.app) {
          appNameRegex = new RegExp('\\' + _path2['default'].sep + '([\\w-]+\\.app)');
          appNameMatches = appNameRegex.exec(this.opts.app);

          if (appNameMatches) {
            appName = appNameMatches[1];
          }
        }
        // de-absolutize the path
        if (_appiumSupport.system.isWindows()) {
          if (remotePath.indexof('://') === 1) {
            remotePath = remotePath.slice(4);
          }
        } else {
          if (remotePath.indexOf('/') === 0) {
            remotePath = remotePath.slice(1);
          }
        }

        if (!(remotePath.indexOf(appName) === 0)) {
          context$1$0.next = 19;
          break;
        }

        findPath = basePath;

        if (this.opts.platformVersion >= 8) {
          // the .app file appears in /Containers/Data and /Containers/Bundle both. We only want /Bundle
          findPath = _path2['default'].resolve(basePath, 'Containers', 'Bundle');
        }
        findPath = findPath.replace(/\s/g, '\\ ');

        context$1$0.next = 10;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('find', [findPath, '-name', appName]));

      case 10:
        _ref6 = context$1$0.sent;
        stdout = _ref6.stdout;
        appRoot = stdout.replace(/\n$/, '');
        subPath = remotePath.substring(appName.length + 1);
        fullPath = _path2['default'].resolve(appRoot, subPath);

        _logger2['default'].debug('Finding app-relative file: \'' + fullPath + '\'');
        return context$1$0.abrupt('return', fullPath);

      case 19:
        fullPath = _path2['default'].resolve(basePath, remotePath);

        _logger2['default'].debug('Finding sim-relative file: ' + fullPath);
        return context$1$0.abrupt('return', fullPath);

      case 22:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.pullFolder = function callee$0$0(remotePath) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!remotePath.endsWith('/')) {
          remotePath = remotePath + '/';
        }

        if (!this.isSimulator()) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(pullFromSimulator(this.opts.device, remotePath, false));

      case 4:
        context$1$0.t0 = context$1$0.sent;
        context$1$0.next = 10;
        break;

      case 7:
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(pullFromRealDevice(this.opts.device, remotePath, false));

      case 9:
        context$1$0.t0 = context$1$0.sent;

      case 10:
        return context$1$0.abrupt('return', context$1$0.t0);

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

exports.commands = commands;
exports['default'] = commands;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
