'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _fs2 = require('fs');

var _fs3 = _interopRequireDefault(_fs2);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _asyncbox = require('asyncbox');

var _appiumSupport = require('appium-support');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _teen_process = require('teen_process');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _v8 = require('v8');

var _v82 = _interopRequireDefault(_v8);

var commands = {},
    extensions = {};

var RETRY_PAUSE = 300;
var RETRY_TIMEOUT = 5000;
var MAX_RECORDING_TIME_SEC = 60 * 3;
var MAX_TIME_SEC = 60 * 30;
var DEFAULT_RECORDING_TIME_SEC = MAX_RECORDING_TIME_SEC;
var PROCESS_SHUTDOWN_TIMEOUT_SEC = 5;
var SCREENRECORD_BINARY = 'screenrecord';
var DEFAULT_EXT = '.mp4';
var MIN_EMULATOR_API_LEVEL = 27;
var FFMPEG_BINARY = 'ffmpeg' + (_appiumSupport.system.isWindows() ? '.exe' : '');

function uploadRecordedMedia(adb, localFile) {
  var remotePath = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
  var uploadOptions = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

  var _ref, size, maxMemoryLimit, remoteUrl, options, user, pass, method;

  return _regeneratorRuntime.async(function uploadRecordedMedia$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.stat(localFile));

      case 2:
        _ref = context$1$0.sent;
        size = _ref.size;

        _logger2['default'].debug('The size of the resulting screen recording is ' + _appiumSupport.util.toReadableSizeString(size));

        if (!_lodash2['default'].isEmpty(remotePath)) {
          context$1$0.next = 11;
          break;
        }

        maxMemoryLimit = _v82['default'].getHeapStatistics().total_available_size / 2;

        if (size >= maxMemoryLimit) {
          _logger2['default'].info('The file might be too large to fit into the process memory ' + ('(' + _appiumSupport.util.toReadableSizeString(size) + ' >= ' + _appiumSupport.util.toReadableSizeString(maxMemoryLimit) + '). ') + 'Provide a link to a remote writable location for video upload ' + '(http(s) and ftp protocols are supported) if you experience Out Of Memory errors');
        }
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(localFile));

      case 10:
        return context$1$0.abrupt('return', context$1$0.sent.toString('base64'));

      case 11:
        remoteUrl = _url2['default'].parse(remotePath);
        options = {};
        user = uploadOptions.user;
        pass = uploadOptions.pass;
        method = uploadOptions.method;

        if (remoteUrl.protocol.startsWith('http')) {
          options = {
            url: remoteUrl.href,
            method: method || 'PUT',
            multipart: [{ body: _fs3['default'].createReadStream(localFile) }]
          };
          if (user && pass) {
            options.auth = { user: user, pass: pass };
          }
        } else if (remoteUrl.protocol.startsWith('ftp')) {
          options = {
            host: remoteUrl.hostname,
            port: remoteUrl.port || 21
          };
          if (user && pass) {
            options.user = user;
            options.pass = pass;
          }
        }
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(_appiumSupport.net.uploadFile(localFile, remotePath, options));

      case 19:
        return context$1$0.abrupt('return', '');

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function verifyScreenRecordIsSupported(adb, isEmulator) {
  var apiLevel;
  return _regeneratorRuntime.async(function verifyScreenRecordIsSupported$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(adb.getApiLevel());

      case 2:
        apiLevel = context$1$0.sent;

        if (!(isEmulator && apiLevel < MIN_EMULATOR_API_LEVEL)) {
          context$1$0.next = 5;
          break;
        }

        throw new Error('Screen recording does not work on emulators running Android API level less than ' + MIN_EMULATOR_API_LEVEL);

      case 5:
        if (!(apiLevel < 19)) {
          context$1$0.next = 7;
          break;
        }

        throw new Error('Screen recording not available on API Level ' + apiLevel + '. Minimum API Level is 19.');

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function scheduleScreenRecord(adb, recordingProperties) {
  var startTimestamp, videoSize, bitRate, timeLimit, bugReport, currentTimeLimit, currentTimeLimitInt, pathOnDevice, recordingProc;
  return _regeneratorRuntime.async(function scheduleScreenRecord$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!recordingProperties.stopped) {
          context$1$0.next = 2;
          break;
        }

        return context$1$0.abrupt('return');

      case 2:
        startTimestamp = recordingProperties.startTimestamp;
        videoSize = recordingProperties.videoSize;
        bitRate = recordingProperties.bitRate;
        timeLimit = recordingProperties.timeLimit;
        bugReport = recordingProperties.bugReport;
        currentTimeLimit = MAX_RECORDING_TIME_SEC;

        if (_appiumSupport.util.hasValue(recordingProperties.currentTimeLimit)) {
          currentTimeLimitInt = parseInt(recordingProperties.currentTimeLimit, 10);

          if (!isNaN(currentTimeLimitInt) && currentTimeLimitInt < MAX_RECORDING_TIME_SEC) {
            currentTimeLimit = currentTimeLimitInt;
          }
        }
        pathOnDevice = '/sdcard/' + Math.floor(new Date()) + DEFAULT_EXT;
        recordingProc = adb.screenrecord(pathOnDevice, {
          videoSize: videoSize,
          bitRate: bitRate,
          timeLimit: currentTimeLimit,
          bugReport: bugReport
        });

        recordingProc.on('end', function () {
          if (recordingProperties.stopped || !_appiumSupport.util.hasValue(timeLimit)) {
            return;
          }
          var currentDuration = process.hrtime(startTimestamp)[0];
          _logger2['default'].debug('The overall screen recording duration is ' + currentDuration + 's so far');
          var timeLimitInt = parseInt(timeLimit, 10);
          if (isNaN(timeLimitInt) || currentDuration >= timeLimitInt) {
            _logger2['default'].debug('There is no need to start the next recording chunk');
            return;
          }

          recordingProperties.currentTimeLimit = timeLimitInt - currentDuration;
          var chunkDuration = recordingProperties.currentTimeLimit < MAX_RECORDING_TIME_SEC ? recordingProperties.currentTimeLimit : MAX_RECORDING_TIME_SEC;
          _logger2['default'].debug('Starting the next ' + chunkDuration + 's-chunk ' + ('of screen recording in order to achieve ' + timeLimitInt + 's total duration'));
          scheduleScreenRecord(adb, recordingProperties)['catch'](function (e) {
            _logger2['default'].error(e.stack);
            recordingProperties.stopped = true;
          });
        });

        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(recordingProc.start(0));

      case 14:
        context$1$0.prev = 14;
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(adb.fileExists(pathOnDevice));

              case 2:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 3:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }, { waitMs: RETRY_TIMEOUT, intervalMs: RETRY_PAUSE }));

      case 17:
        context$1$0.next = 22;
        break;

      case 19:
        context$1$0.prev = 19;
        context$1$0.t0 = context$1$0['catch'](14);
        throw new Error('The expected screen record file \'' + pathOnDevice + '\' does not exist after ' + RETRY_TIMEOUT + 'ms');

      case 22:

        recordingProperties.records.push(pathOnDevice);
        recordingProperties.recordingProcess = recordingProc;

      case 24:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[14, 19]]);
}

function mergeScreenRecords(mediaFiles) {
  var configContent, configFile, result, args;
  return _regeneratorRuntime.async(function mergeScreenRecords$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.which(FFMPEG_BINARY));

      case 3:
        context$1$0.next = 8;
        break;

      case 5:
        context$1$0.prev = 5;
        context$1$0.t0 = context$1$0['catch'](0);
        throw new Error(FFMPEG_BINARY + ' utility is not available in PATH. Please install it from https://www.ffmpeg.org/');

      case 8:
        configContent = mediaFiles.map(function (x) {
          return 'file \'' + x + '\'';
        }).join('\n');
        configFile = _path2['default'].resolve(_path2['default'].dirname(mediaFiles[0]), 'config.txt');
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(configFile, configContent, 'utf8'));

      case 12:
        _logger2['default'].debug('Generated ffmpeg merging config \'' + configFile + '\' with items:\n' + configContent);
        result = _path2['default'].resolve(_path2['default'].dirname(mediaFiles[0]), 'merge_' + Math.floor(new Date()) + DEFAULT_EXT);
        args = ['-safe', '0', '-f', 'concat', '-i', configFile, '-c', 'copy', result];

        _logger2['default'].info('Initiating screen records merging using the command \'' + FFMPEG_BINARY + ' ' + args.join(' ') + '\'');
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(FFMPEG_BINARY, args));

      case 18:
        return context$1$0.abrupt('return', result);

      case 19:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 5]]);
}

function terminateBackgroundScreenRecording(adb) {
  var pids;
  return _regeneratorRuntime.async(function terminateBackgroundScreenRecording$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(adb.getPIDsByName(SCREENRECORD_BINARY));

      case 2:
        context$1$0.t0 = function (p) {
          return '' + p;
        };

        pids = context$1$0.sent.map(context$1$0.t0);

        if (!_lodash2['default'].isEmpty(pids)) {
          context$1$0.next = 6;
          break;
        }

        return context$1$0.abrupt('return', false);

      case 6:
        context$1$0.prev = 6;
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(adb.shell(['kill'].concat(_toConsumableArray(pids))));

      case 9:
        return context$1$0.abrupt('return', true);

      case 12:
        context$1$0.prev = 12;
        context$1$0.t1 = context$1$0['catch'](6);
        throw new Error('Unable to stop the background screen recording: ' + context$1$0.t1.message);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[6, 12]]);
}

/**
 * @typedef {Object} StartRecordingOptions
 *
 * @property {?string} remotePath - The path to the remote location, where the captured video should be uploaded.
 *                                  The following protocols are supported: http/https, ftp.
 *                                  Null or empty string value (the default setting) means the content of resulting
 *                                  file should be encoded as Base64 and passed as the endpount response value.
 *                                  An exception will be thrown if the generated media file is too big to
 *                                  fit into the available process memory.
 *                                  This option only has an effect if there is screen recording process in progreess
 *                                  and `forceRestart` parameter is not set to `true`.
 * @property {?string} user - The name of the user for the remote authentication. Only works if `remotePath` is provided.
 * @property {?string} pass - The password for the remote authentication. Only works if `remotePath` is provided.
 * @property {?string} method - The http multipart upload method name. The 'PUT' one is used by default.
 *                              Only works if `remotePath` is provided.
 * @property {?string} videoSize - The format is widthxheight.
 *                  The default value is the device's native display resolution (if supported),
 *                  1280x720 if not. For best results,
 *                  use a size supported by your device's Advanced Video Coding (AVC) encoder.
 *                  For example, "1280x720"
 * @property {?boolean} bugReport - Set it to `true` in order to display additional information on the video overlay,
 *                                  such as a timestamp, that is helpful in videos captured to illustrate bugs.
 *                                  This option is only supported since API level 27 (Android P).
 * @property {?string|number} timeLimit - The maximum recording time, in seconds. The default value is 180 (3 minutes).
 *                                        The maximum value is 1800 (30 minutes). If the passed value is greater than 180 then
 *                                        the algorithm will try to schedule multiple screen recording chunks and merge the
 *                                        resulting videos into a single media file using `ffmpeg` utility.
 *                                        If the utility is not available in PATH then the most recent screen recording chunk is
 *                                        going to be returned.
 * @property {?string|number} bitRate - The video bit rate for the video, in megabits per second.
 *                The default value is 4. You can increase the bit rate to improve video quality,
 *                but doing so results in larger movie files.
 * @property {?boolean} forceRestart - Whether to try to catch and upload/return the currently running screen recording
 *                                     (`false`, the default setting) or ignore the result of it and start a new recording
 *                                     immediately (`true`).
 */

/**
 * Record the display of a real devices running Android 4.4 (API level 19) and higher.
 * Emulators are supported since API level 27 (Android P).
 * It records screen activity to an MPEG-4 file. Audio is not recorded with the video file.
 * If screen recording has been already started then the command will stop it forcefully and start a new one.
 * The previously recorded video file will be deleted.
 *
 * @param {?StartRecordingOptions} options - The available options.
 * @returns {string} Base64-encoded content of the recorded media file if
 *                   any screen recording is currently running or an empty string.
 * @throws {Error} If screen recording has failed to start or is not supported on the device under test.
 */
commands.startRecordingScreen = function callee$0$0() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var result, videoSize, _options$timeLimit, timeLimit, bugReport, bitRate, forceRestart, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, record, timeout;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(verifyScreenRecordIsSupported(this.adb, this.isEmulator()));

      case 2:
        result = '';
        videoSize = options.videoSize;
        _options$timeLimit = options.timeLimit;
        timeLimit = _options$timeLimit === undefined ? DEFAULT_RECORDING_TIME_SEC : _options$timeLimit;
        bugReport = options.bugReport;
        bitRate = options.bitRate;
        forceRestart = options.forceRestart;

        if (forceRestart) {
          context$1$0.next = 15;
          break;
        }

        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.stopRecordingScreen(options));

      case 12:
        result = context$1$0.sent;
        context$1$0.next = 25;
        break;

      case 15:
        if (_lodash2['default'].isEmpty(this._screenRecordingProperties)) {
          context$1$0.next = 25;
          break;
        }

        if (!(this._screenRecordingProperties.recordingProcess && this._screenRecordingProperties.recordingProcess.isRunning)) {
          context$1$0.next = 25;
          break;
        }

        context$1$0.prev = 17;
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(this._screenRecordingProperties.recordingProcess.stop('SIGTERM', PROCESS_SHUTDOWN_TIMEOUT_SEC * 1000));

      case 20:
        this._screenRecordingProperties.recordingProcess = null;
        context$1$0.next = 25;
        break;

      case 23:
        context$1$0.prev = 23;
        context$1$0.t0 = context$1$0['catch'](17);

      case 25:
        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(terminateBackgroundScreenRecording(this.adb));

      case 27:
        if (!context$1$0.sent) {
          context$1$0.next = 29;
          break;
        }

        _logger2['default'].warn('There were some ' + SCREENRECORD_BINARY + ' process leftovers running ' + 'in the background. Make sure you stop screen recording each time after it is started, ' + 'otherwise the recorded media might quickly exceed all the free space on the device under test.');

      case 29:
        if (_lodash2['default'].isEmpty(this._screenRecordingProperties)) {
          context$1$0.next = 57;
          break;
        }

        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 33;
        _iterator = _getIterator(this._screenRecordingProperties.records || []);

      case 35:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 42;
          break;
        }

        record = _step.value;
        context$1$0.next = 39;
        return _regeneratorRuntime.awrap(this.adb.rimraf(record));

      case 39:
        _iteratorNormalCompletion = true;
        context$1$0.next = 35;
        break;

      case 42:
        context$1$0.next = 48;
        break;

      case 44:
        context$1$0.prev = 44;
        context$1$0.t1 = context$1$0['catch'](33);
        _didIteratorError = true;
        _iteratorError = context$1$0.t1;

      case 48:
        context$1$0.prev = 48;
        context$1$0.prev = 49;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 51:
        context$1$0.prev = 51;

        if (!_didIteratorError) {
          context$1$0.next = 54;
          break;
        }

        throw _iteratorError;

      case 54:
        return context$1$0.finish(51);

      case 55:
        return context$1$0.finish(48);

      case 56:
        this._screenRecordingProperties = null;

      case 57:
        timeout = parseFloat(timeLimit);

        if (!(isNaN(timeout) || timeout > MAX_TIME_SEC || timeout <= 0)) {
          context$1$0.next = 60;
          break;
        }

        throw new Error('The timeLimit value must be in range [1, ' + MAX_TIME_SEC + '] seconds. ' + ('The value of \'' + timeLimit + '\' has been passed instead.'));

      case 60:

        this._screenRecordingProperties = {
          startTimestamp: process.hrtime(),
          videoSize: videoSize,
          timeLimit: timeLimit,
          currentTimeLimit: timeLimit,
          bitRate: bitRate,
          bugReport: bugReport,
          records: [],
          recordingProcess: null,
          stopped: false
        };
        context$1$0.next = 63;
        return _regeneratorRuntime.awrap(scheduleScreenRecord(this.adb, this._screenRecordingProperties));

      case 63:
        return context$1$0.abrupt('return', result);

      case 64:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[17, 23], [33, 44, 48, 56], [49,, 51, 55]]);
};

/**
 * @typedef {Object} StopRecordingOptions
 *
 * @property {?string} remotePath - The path to the remote location, where the resulting video should be uploaded.
 *                                  The following protocols are supported: http/https, ftp.
 *                                  Null or empty string value (the default setting) means the content of resulting
 *                                  file should be encoded as Base64 and passed as the endpount response value.
 *                                  An exception will be thrown if the generated media file is too big to
 *                                  fit into the available process memory.
 * @property {?string} user - The name of the user for the remote authentication.
 * @property {?string} pass - The password for the remote authentication.
 * @property {?string} method - The http multipart upload method name. The 'PUT' one is used by default.
 */

/**
 * Stop recording the screen.
 * If no screen recording has been started before then the method returns an empty string.
 *
 * @param {?StopRecordingOptions} options - The available options.
 * @returns {string} Base64-encoded content of the recorded media file if 'remotePath'
 *                   parameter is falsy or an empty string.
 * @throws {Error} If there was an error while getting the name of a media file
 *                 or the file content cannot be uploaded to the remote location
 *                 or screen recording is not supported on the device under test.
 */
commands.stopRecordingScreen = function callee$0$0() {
  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var result, tmpRoot, localRecords, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, pathOnDevice, resultFilePath, remotePath, user, pass, method;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(verifyScreenRecordIsSupported(this.adb, this.isEmulator()));

      case 2:
        if (!_lodash2['default'].isEmpty(this._screenRecordingProperties)) {
          context$1$0.next = 12;
          break;
        }

        _logger2['default'].info('Screen recording has not been previously started by Appium. There is nothing to stop');
        context$1$0.prev = 4;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(terminateBackgroundScreenRecording(this.adb));

      case 7:
        context$1$0.next = 11;
        break;

      case 9:
        context$1$0.prev = 9;
        context$1$0.t0 = context$1$0['catch'](4);

      case 11:
        return context$1$0.abrupt('return', '');

      case 12:

        this._screenRecordingProperties.stopped = true;

        if (!(this._screenRecordingProperties.recordingProcess && this._screenRecordingProperties.recordingProcess.isRunning)) {
          context$1$0.next = 23;
          break;
        }

        context$1$0.prev = 14;
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap(this._screenRecordingProperties.recordingProcess.stop('SIGINT', PROCESS_SHUTDOWN_TIMEOUT_SEC * 1000));

      case 17:
        this._screenRecordingProperties.recordingProcess = null;
        context$1$0.next = 23;
        break;

      case 20:
        context$1$0.prev = 20;
        context$1$0.t1 = context$1$0['catch'](14);

        _logger2['default'].errorAndThrow('Unable to stop screen recording. Original error: ' + context$1$0.t1.message);

      case 23:
        context$1$0.prev = 23;
        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(terminateBackgroundScreenRecording(this.adb));

      case 26:
        context$1$0.next = 30;
        break;

      case 28:
        context$1$0.prev = 28;
        context$1$0.t2 = context$1$0['catch'](23);

      case 30:

        if (_lodash2['default'].isEmpty(this._screenRecordingProperties.records)) {
          _logger2['default'].errorAndThrow('No screen recordings have been stored on the device so far. ' + ('Are you sure the ' + SCREENRECORD_BINARY + ' utility works as expected?'));
        }

        result = '';
        context$1$0.next = 34;
        return _regeneratorRuntime.awrap(_appiumSupport.tempDir.openDir());

      case 34:
        tmpRoot = context$1$0.sent;
        context$1$0.prev = 35;
        localRecords = [];
        _iteratorNormalCompletion2 = true;
        _didIteratorError2 = false;
        _iteratorError2 = undefined;
        context$1$0.prev = 40;
        _iterator2 = _getIterator(this._screenRecordingProperties.records);

      case 42:
        if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
          context$1$0.next = 52;
          break;
        }

        pathOnDevice = _step2.value;

        localRecords.push(_path2['default'].resolve(tmpRoot, _path2['default'].posix.basename(pathOnDevice)));
        context$1$0.next = 47;
        return _regeneratorRuntime.awrap(this.adb.pull(pathOnDevice, _lodash2['default'].last(localRecords)));

      case 47:
        context$1$0.next = 49;
        return _regeneratorRuntime.awrap(this.adb.rimraf(pathOnDevice));

      case 49:
        _iteratorNormalCompletion2 = true;
        context$1$0.next = 42;
        break;

      case 52:
        context$1$0.next = 58;
        break;

      case 54:
        context$1$0.prev = 54;
        context$1$0.t3 = context$1$0['catch'](40);
        _didIteratorError2 = true;
        _iteratorError2 = context$1$0.t3;

      case 58:
        context$1$0.prev = 58;
        context$1$0.prev = 59;

        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
          _iterator2['return']();
        }

      case 61:
        context$1$0.prev = 61;

        if (!_didIteratorError2) {
          context$1$0.next = 64;
          break;
        }

        throw _iteratorError2;

      case 64:
        return context$1$0.finish(61);

      case 65:
        return context$1$0.finish(58);

      case 66:
        resultFilePath = _lodash2['default'].last(localRecords);

        if (!(localRecords.length > 1)) {
          context$1$0.next = 78;
          break;
        }

        _logger2['default'].info('Got ' + localRecords.length + ' screen recordings. Trying to merge them');
        context$1$0.prev = 69;
        context$1$0.next = 72;
        return _regeneratorRuntime.awrap(mergeScreenRecords(localRecords));

      case 72:
        resultFilePath = context$1$0.sent;
        context$1$0.next = 78;
        break;

      case 75:
        context$1$0.prev = 75;
        context$1$0.t4 = context$1$0['catch'](69);

        _logger2['default'].warn('Cannot merge the recorded files. The most recent screen recording is going to be returned as the result. ' + ('Original error: ' + context$1$0.t4.message));

      case 78:
        remotePath = options.remotePath;
        user = options.user;
        pass = options.pass;
        method = options.method;
        context$1$0.next = 84;
        return _regeneratorRuntime.awrap(uploadRecordedMedia(this.adb, resultFilePath, remotePath, { user: user, pass: pass, method: method }));

      case 84:
        result = context$1$0.sent;

      case 85:
        context$1$0.prev = 85;
        context$1$0.next = 88;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(tmpRoot));

      case 88:
        this._screenRecordingProperties = null;
        return context$1$0.finish(85);

      case 90:
        return context$1$0.abrupt('return', result);

      case 91:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[4, 9], [14, 20], [23, 28], [35,, 85, 90], [40, 54, 58, 66], [59,, 61, 65], [69, 75]]);
};

_Object$assign(extensions, commands);
exports.commands = commands;
exports['default'] = extensions;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
