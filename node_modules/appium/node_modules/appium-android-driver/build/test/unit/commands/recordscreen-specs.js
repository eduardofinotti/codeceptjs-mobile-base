'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _ = require('../../..');

var _2 = _interopRequireDefault(_);

var _appiumTestSupport = require('appium-test-support');

var _appiumSupport = require('appium-support');

var _temp = require('temp');

var _temp2 = _interopRequireDefault(_temp);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var driver = new _2['default']();
var adb = new _appiumAdb2['default']();
driver.adb = adb;
describe('recording the screen', function () {
  this.timeout(60000);

  describe('basic', (0, _appiumTestSupport.withMocks)({ adb: adb, driver: driver, fs: _appiumSupport.fs, temp: _temp2['default'] }, function (mocks) {
    it('should fail to recording the screen on an older emulator', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.driver.expects('isEmulator').returns(true);
            mocks.adb.expects('getApiLevel').returns(26);

            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.startRecordingScreen().should.eventually.be.rejectedWith(/Screen recording does not work on emulators/));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should fail to recording the screen on a device with API level 18', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.driver.expects('isEmulator').returns(false);
            mocks.adb.expects('getApiLevel').returns(18);

            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.startRecordingScreen().should.eventually.be.rejectedWith(/Screen recording not available on API Level 18. Minimum API Level is 19/));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9jb21tYW5kcy9yZWNvcmRzY3JlZW4tc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O29CQUFpQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OztnQkFDbkIsVUFBVTs7OztpQ0FDVixxQkFBcUI7OzZCQUM1QixnQkFBZ0I7O29CQUNsQixNQUFNOzs7O3lCQUNQLFlBQVk7Ozs7QUFHNUIsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixJQUFJLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQztBQUNqQyxJQUFJLEdBQUcsR0FBRyw0QkFBUyxDQUFDO0FBQ3BCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ2pCLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxZQUFZO0FBQzNDLE1BQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7O0FBRXBCLFVBQVEsQ0FBQyxPQUFPLEVBQUUsa0NBQVUsRUFBQyxHQUFHLEVBQUgsR0FBRyxFQUFFLE1BQU0sRUFBTixNQUFNLEVBQUUsRUFBRSxtQkFBQSxFQUFFLElBQUksbUJBQUEsRUFBQyxFQUFFLFVBQUMsS0FBSyxFQUFLO0FBQzlELE1BQUUsQ0FBQywwREFBMEQsRUFBRTs7OztBQUM3RCxpQkFBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pELGlCQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7Ozs2Q0FFdkMsTUFBTSxDQUFDLG9CQUFvQixFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLDZDQUE2QyxDQUFDOzs7Ozs7O0tBQ3JILENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsbUVBQW1FLEVBQUU7Ozs7QUFDdEUsaUJBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsRCxpQkFBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDOzs7NkNBRXZDLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyx5RUFBeUUsQ0FBQzs7Ozs7OztLQUNqSixDQUFDLENBQUM7R0FDSixDQUFDLENBQUMsQ0FBQztDQUNMLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3VuaXQvY29tbWFuZHMvcmVjb3Jkc2NyZWVuLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgQW5kcm9pZERyaXZlciBmcm9tICcuLi8uLi8uLic7XG5pbXBvcnQgeyB3aXRoTW9ja3MgfSBmcm9tICdhcHBpdW0tdGVzdC1zdXBwb3J0JztcbmltcG9ydCB7IGZzIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHRlbXAgZnJvbSAndGVtcCc7XG5pbXBvcnQgQURCIGZyb20gJ2FwcGl1bS1hZGInO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmxldCBkcml2ZXIgPSBuZXcgQW5kcm9pZERyaXZlcigpO1xubGV0IGFkYiA9IG5ldyBBREIoKTtcbmRyaXZlci5hZGIgPSBhZGI7XG5kZXNjcmliZSgncmVjb3JkaW5nIHRoZSBzY3JlZW4nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMudGltZW91dCg2MDAwMCk7XG5cbiAgZGVzY3JpYmUoJ2Jhc2ljJywgd2l0aE1vY2tzKHthZGIsIGRyaXZlciwgZnMsIHRlbXB9LCAobW9ja3MpID0+IHtcbiAgICBpdCgnc2hvdWxkIGZhaWwgdG8gcmVjb3JkaW5nIHRoZSBzY3JlZW4gb24gYW4gb2xkZXIgZW11bGF0b3InLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBtb2Nrcy5kcml2ZXIuZXhwZWN0cygnaXNFbXVsYXRvcicpLnJldHVybnModHJ1ZSk7XG4gICAgICBtb2Nrcy5hZGIuZXhwZWN0cygnZ2V0QXBpTGV2ZWwnKS5yZXR1cm5zKDI2KTtcblxuICAgICAgYXdhaXQgZHJpdmVyLnN0YXJ0UmVjb3JkaW5nU2NyZWVuKCkuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKC9TY3JlZW4gcmVjb3JkaW5nIGRvZXMgbm90IHdvcmsgb24gZW11bGF0b3JzLyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZhaWwgdG8gcmVjb3JkaW5nIHRoZSBzY3JlZW4gb24gYSBkZXZpY2Ugd2l0aCBBUEkgbGV2ZWwgMTgnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBtb2Nrcy5kcml2ZXIuZXhwZWN0cygnaXNFbXVsYXRvcicpLnJldHVybnMoZmFsc2UpO1xuICAgICAgbW9ja3MuYWRiLmV4cGVjdHMoJ2dldEFwaUxldmVsJykucmV0dXJucygxOCk7XG5cbiAgICAgIGF3YWl0IGRyaXZlci5zdGFydFJlY29yZGluZ1NjcmVlbigpLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aCgvU2NyZWVuIHJlY29yZGluZyBub3QgYXZhaWxhYmxlIG9uIEFQSSBMZXZlbCAxOC4gTWluaW11bSBBUEkgTGV2ZWwgaXMgMTkvKTtcbiAgICB9KTtcbiAgfSkpO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uIn0=
