'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _ = require('../../..');

var _libBasedriverCommandsFind = require('../../../lib/basedriver/commands/find');

var _appiumSupport = require('appium-support');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var TestDriver = (function (_BaseDriver) {
  _inherits(TestDriver, _BaseDriver);

  function TestDriver() {
    _classCallCheck(this, TestDriver);

    _get(Object.getPrototypeOf(TestDriver.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(TestDriver, [{
    key: 'getWindowSize',
    value: function getWindowSize() {
      return _regeneratorRuntime.async(function getWindowSize$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getScreenshot',
    value: function getScreenshot() {
      return _regeneratorRuntime.async(function getScreenshot$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return TestDriver;
})(_.BaseDriver);

var TINY_PNG = "iVBORw0KGgoAAAANSUhEUgAAAAQAAAAECAIAAAAmkwkpAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyhpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTQwIDc5LjE2MDQ1MSwgMjAxNy8wNS8wNi0wMTowODoyMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTggKE1hY2ludG9zaCkiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6N0NDMDM4MDM4N0U2MTFFOEEzMzhGMTRFNUUwNzIwNUIiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6N0NDMDM4MDQ4N0U2MTFFOEEzMzhGMTRFNUUwNzIwNUIiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo3Q0MwMzgwMTg3RTYxMUU4QTMzOEYxNEU1RTA3MjA1QiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo3Q0MwMzgwMjg3RTYxMUU4QTMzOEYxNEU1RTA3MjA1QiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PpdvJjQAAAAlSURBVHjaJInBEQAACIKw/Xe2Ul5wYBtwmJqkk4+zfvUQVoABAEg0EfrZwc0hAAAAAElFTkSuQmCC";
var TINY_PNG_DIMS = [4, 4];

describe('finding elements by image', function () {
  describe('findElement', function () {
    it('should use a different special method to find element by image', function callee$2$0() {
      var d;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new TestDriver();

            _sinon2['default'].stub(d, 'findByImage').returns(true);
            _sinon2['default'].stub(d, 'findElOrElsWithProcessing').returns(false);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(d.findElement(_libBasedriverCommandsFind.IMAGE_STRATEGY, 'foo').should.eventually.be['true']);

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(d.findElements(_libBasedriverCommandsFind.IMAGE_STRATEGY, 'foo').should.eventually.be['true']);

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not be able to find image element from any other element', function callee$2$0() {
      var d;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new TestDriver();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(d.findElementFromElement(_libBasedriverCommandsFind.IMAGE_STRATEGY, 'foo', 'elId').should.eventually.be.rejectedWith(/Locator Strategy.+is not supported/));

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(d.findElementsFromElement(_libBasedriverCommandsFind.IMAGE_STRATEGY, 'foo', 'elId').should.eventually.be.rejectedWith(/Locator Strategy.+is not supported/));

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('findByImage', function () {
    var rect = { x: 10, y: 20, width: 30, height: 40 };
    var size = { width: 100, height: 200 };
    var screenshot = 'iVBORfoo';
    var template = 'iVBORbar';

    function basicStub(driver) {
      var sizeStub = _sinon2['default'].stub(driver, 'getWindowSize').returns(size);
      var screenStub = _sinon2['default'].stub(driver, 'getScreenshotForImageFind').returns(screenshot);
      var compareStub = _sinon2['default'].stub(driver, 'compareImages').returns({ rect: rect });
      return { sizeStub: sizeStub, screenStub: screenStub, compareStub: compareStub };
    }

    function basicImgElVerify(imgElProto, driver) {
      var imgElId = imgElProto.ELEMENT;
      driver._imgElCache.has(imgElId).should.be['true'];
      var imgEl = driver._imgElCache.get(imgElId);
      (imgEl instanceof _.ImageElement).should.be['true'];
      imgEl.rect.should.eql(rect);
      return imgEl;
    }

    it('should find an image element happypath', function callee$2$0() {
      var d, imgElProto;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new TestDriver();

            basicStub(d);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(d.findByImage(template, { multiple: false }));

          case 4:
            imgElProto = context$3$0.sent;

            basicImgElVerify(imgElProto, d);

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should find image elements happypath', function callee$2$0() {
      var d, els;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new TestDriver();

            basicStub(d);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(d.findByImage(template, { multiple: true }));

          case 4:
            els = context$3$0.sent;

            els.should.have.length(1);
            basicImgElVerify(els[0], d);

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should fail if driver does not support getWindowSize', function callee$2$0() {
      var d;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new _.BaseDriver();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(d.findByImage(template, { multiple: false }).should.eventually.be.rejectedWith(/driver does not support/));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should fix template size if requested', function callee$2$0() {
      var d, newTemplate, _basicStub, compareStub, imgElProto, imgEl;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new TestDriver();
            newTemplate = 'iVBORbaz';
            _basicStub = basicStub(d);
            compareStub = _basicStub.compareStub;
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(d.settings.update({ fixImageTemplateSize: true }));

          case 6:
            _sinon2['default'].stub(d, 'ensureTemplateSize').returns(newTemplate);
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(d.findByImage(template, { multiple: false }));

          case 9:
            imgElProto = context$3$0.sent;
            imgEl = basicImgElVerify(imgElProto, d);

            imgEl.template.should.eql(newTemplate);
            compareStub.args[0][2].should.eql(newTemplate);

          case 13:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should throw an error if template match fails', function callee$2$0() {
      var d, _basicStub2, compareStub;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new TestDriver();
            _basicStub2 = basicStub(d);
            compareStub = _basicStub2.compareStub;

            compareStub.throws(new Error('Cannot find any occurrences'));
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(d.findByImage(template, { multiple: false }).should.eventually.be.rejectedWith(/element could not be located/));

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return empty array for multiple elements if template match fails', function callee$2$0() {
      var d, _basicStub3, compareStub;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new TestDriver();
            _basicStub3 = basicStub(d);
            compareStub = _basicStub3.compareStub;

            compareStub.throws(new Error('Cannot find any occurrences'));
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(d.findByImage(template, { multiple: true }).should.eventually.eql([]));

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should respect implicit wait', function callee$2$0() {
      var d, _basicStub4, compareStub, imgElProto;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new TestDriver();

            d.setImplicitWait(10);
            _basicStub4 = basicStub(d);
            compareStub = _basicStub4.compareStub;

            compareStub.onCall(0).throws(new Error('Cannot find any occurrences'));
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(d.findByImage(template, { multiple: false }));

          case 7:
            imgElProto = context$3$0.sent;

            basicImgElVerify(imgElProto, d);
            compareStub.callCount.should.eql(2);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not add element to cache and return it directly when checking staleness', function callee$2$0() {
      var d, imgEl;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new TestDriver();

            basicStub(d);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(d.findByImage(template, { multiple: false, shouldCheckStaleness: true }));

          case 4:
            imgEl = context$3$0.sent;

            (imgEl instanceof _.ImageElement).should.be['true'];
            d._imgElCache.has(imgEl.id).should.be['false'];
            imgEl.rect.should.eql(rect);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('ensureTemplateSize', function () {
    it('should not resize the template if it is smaller than the screen', function callee$2$0() {
      var screen, d;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            screen = TINY_PNG_DIMS.map(function (n) {
              return n * 2;
            });
            d = new TestDriver();
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(d.ensureTemplateSize.apply(d, [TINY_PNG].concat(_toConsumableArray(screen))).should.eventually.eql(TINY_PNG));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not resize the template if it is the same size as the screen', function callee$2$0() {
      var d;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new TestDriver();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(d.ensureTemplateSize.apply(d, [TINY_PNG].concat(TINY_PNG_DIMS)).should.eventually.eql(TINY_PNG));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should resize the template if it is bigger than the screen', function callee$2$0() {
      var d, screen, newTemplate;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new TestDriver();
            screen = TINY_PNG_DIMS.map(function (n) {
              return n / 2;
            });
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(d.ensureTemplateSize.apply(d, [TINY_PNG].concat(_toConsumableArray(screen))));

          case 4:
            newTemplate = context$3$0.sent;

            newTemplate.should.not.eql(TINY_PNG);
            newTemplate.length.should.be.below(TINY_PNG.length);

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('getScreenshotForImageFind', function () {
    it('should fail if driver does not support getScreenshot', function callee$2$0() {
      var d;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new _.BaseDriver();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(d.getScreenshotForImageFind().should.eventually.be.rejectedWith(/driver does not support/));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not adjust or verify screenshot if asked not to by settings', function callee$2$0() {
      var d, screen;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new TestDriver();

            _sinon2['default'].stub(d, 'getScreenshot').returns(TINY_PNG);
            d.settings.update({ fixImageFindScreenshotDims: false });
            screen = TINY_PNG_DIMS.map(function (n) {
              return n + 1;
            });
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(d.getScreenshotForImageFind.apply(d, _toConsumableArray(screen)).should.eventually.eql(TINY_PNG));

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return screenshot without adjustment if it matches screen size', function callee$2$0() {
      var d;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new TestDriver();

            _sinon2['default'].stub(d, 'getScreenshot').returns(TINY_PNG);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(d.getScreenshotForImageFind.apply(d, TINY_PNG_DIMS).should.eventually.eql(TINY_PNG));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return scaled screenshot with same aspect ratio if matching screen aspect ratio', function callee$2$0() {
      var d, screen, newScreenshot, screenshotObj;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new TestDriver();

            _sinon2['default'].stub(d, 'getScreenshot').returns(TINY_PNG);
            screen = TINY_PNG_DIMS.map(function (n) {
              return n * 1.5;
            });
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(d.getScreenshotForImageFind.apply(d, _toConsumableArray(screen)));

          case 5:
            newScreenshot = context$3$0.sent;

            newScreenshot.should.not.eql(TINY_PNG);
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(_appiumSupport.imageUtil.getJimpImage(newScreenshot));

          case 9:
            screenshotObj = context$3$0.sent;

            screenshotObj.bitmap.width.should.eql(screen[0]);
            screenshotObj.bitmap.height.should.eql(screen[1]);

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should return scaled screenshot with different aspect ratio if not matching screen aspect ratio', function callee$2$0() {
      var d, screen, newScreenshot, screenshotObj;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            d = new TestDriver();

            _sinon2['default'].stub(d, 'getScreenshot').returns(TINY_PNG);

            // try first with portrait screen
            screen = [TINY_PNG_DIMS[0] * 2, TINY_PNG_DIMS[1] * 3];
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(d.getScreenshotForImageFind.apply(d, _toConsumableArray(screen)));

          case 5:
            newScreenshot = context$3$0.sent;

            newScreenshot.should.not.eql(TINY_PNG);
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(_appiumSupport.imageUtil.getJimpImage(newScreenshot));

          case 9:
            screenshotObj = context$3$0.sent;

            screenshotObj.bitmap.width.should.eql(screen[0]);
            screenshotObj.bitmap.height.should.eql(screen[1]);

            // then with landscape screen
            screen = [TINY_PNG_DIMS[0] * 3, TINY_PNG_DIMS[1] * 2];
            context$3$0.next = 15;
            return _regeneratorRuntime.awrap(d.getScreenshotForImageFind.apply(d, _toConsumableArray(screen)));

          case 15:
            newScreenshot = context$3$0.sent;

            newScreenshot.should.not.eql(TINY_PNG);
            context$3$0.next = 19;
            return _regeneratorRuntime.awrap(_appiumSupport.imageUtil.getJimpImage(newScreenshot));

          case 19:
            screenshotObj = context$3$0.sent;

            screenshotObj.bitmap.width.should.eql(screen[0]);
            screenshotObj.bitmap.height.should.eql(screen[1]);

          case 22:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
