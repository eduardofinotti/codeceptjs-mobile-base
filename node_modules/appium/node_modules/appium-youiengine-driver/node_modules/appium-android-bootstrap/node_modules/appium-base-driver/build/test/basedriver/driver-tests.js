'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _2 = require('../..');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

// wrap these tests in a function so we can export the tests and re-use them
// for actual driver implementations
function baseDriverUnitTests(DriverClass) {
  var defaultCaps = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var w3cCaps = {
    alwaysMatch: _Object$assign({}, defaultCaps, {
      platformName: 'Fake',
      deviceName: 'Commodore 64'
    }),
    firstMatch: [{}]
  };

  describe('BaseDriver', function () {
    var d = undefined;
    beforeEach(function () {
      d = new DriverClass();
    });
    afterEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.deleteSession());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should return an empty status object', function callee$2$0() {
      var status;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.getStatus());

          case 2:
            status = context$3$0.sent;

            status.should.eql({});

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should return a sessionId from createSession', function callee$2$0() {
      var _ref, _ref2, sessId;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 2:
            _ref = context$3$0.sent;
            _ref2 = _slicedToArray(_ref, 1);
            sessId = _ref2[0];

            should.exist(sessId);
            sessId.should.be.a('string');
            sessId.length.should.be.above(5);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should not be able to start two sessions without closing the first', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps).should.eventually.be.rejectedWith('session'));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should be able to delete a session', function callee$2$0() {
      var sessionId1, sessionId2;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 2:
            sessionId1 = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(d.deleteSession());

          case 5:
            should.equal(d.sessionId, null);
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 8:
            sessionId2 = context$3$0.sent;

            sessionId1.should.not.eql(sessionId2);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should get the current session', function callee$2$0() {
      var _ref3, _ref32, caps;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 2:
            _ref3 = context$3$0.sent;
            _ref32 = _slicedToArray(_ref3, 2);
            caps = _ref32[1];
            context$3$0.t0 = caps.should;
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(d.getSession());

          case 8:
            context$3$0.t1 = context$3$0.sent;
            context$3$0.t0.equal.call(context$3$0.t0, context$3$0.t1);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should return sessions if no session exists', function callee$2$0() {
      var sessions;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.getSessions());

          case 2:
            sessions = context$3$0.sent;

            sessions.length.should.equal(0);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should return sessions', function callee$2$0() {
      var caps, sessions;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            caps = _lodash2['default'].clone(defaultCaps);

            caps.a = 'cap';
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(d.createSession(caps));

          case 4:
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(d.getSessions());

          case 6:
            sessions = context$3$0.sent;

            sessions.length.should.equal(1);
            sessions[0].should.eql({
              id: d.sessionId,
              capabilities: caps
            });

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should fulfill an unexpected driver quit promise', function callee$2$0() {
      var cmdPromise;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // make a command that will wait a bit so we can crash while it's running
            d.getStatus = (function callee$3$0() {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_bluebird2['default'].delay(100));

                  case 2:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            }).bind(d);
            cmdPromise = d.executeCommand('getStatus');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(0));

          case 4:
            d.startUnexpectedShutdown(new Error('We crashed'));
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(cmdPromise.should.be.rejectedWith(/We crashed/));

          case 7:
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(d.onUnexpectedShutdown.should.be.rejectedWith(/We crashed/));

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should not allow commands in middle of unexpected shutdown', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // make a command that will wait a bit so we can crash while it's running
            d.oldDeleteSession = d.deleteSession;
            d.deleteSession = (function callee$3$0() {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_bluebird2['default'].delay(100));

                  case 2:
                    context$4$0.next = 4;
                    return _regeneratorRuntime.awrap(this.oldDeleteSession());

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            }).bind(d);
            caps = _lodash2['default'].clone(defaultCaps);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(d.createSession(caps));

          case 5:
            d.startUnexpectedShutdown(new Error('We crashed'));
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(d.onUnexpectedShutdown.should.be.rejectedWith(/We crashed/));

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(d.executeCommand('getSession').should.be.rejectedWith(/shut down/));

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should allow new commands after done shutting down', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // make a command that will wait a bit so we can crash while it's running
            d.oldDeleteSession = d.deleteSession;
            d.deleteSession = (function callee$3$0() {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    context$4$0.next = 2;
                    return _regeneratorRuntime.awrap(_bluebird2['default'].delay(100));

                  case 2:
                    context$4$0.next = 4;
                    return _regeneratorRuntime.awrap(this.oldDeleteSession());

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, this);
            }).bind(d);
            caps = _lodash2['default'].clone(defaultCaps);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(d.createSession(caps));

          case 5:
            d.startUnexpectedShutdown(new Error('We crashed'));
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(d.onUnexpectedShutdown.should.be.rejectedWith(/We crashed/));

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(d.executeCommand('getSession').should.be.rejectedWith(/shut down/));

          case 10:
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(100));

          case 12:
            context$3$0.next = 14;
            return _regeneratorRuntime.awrap(d.executeCommand('createSession', caps));

          case 14:
            context$3$0.next = 16;
            return _regeneratorRuntime.awrap(d.deleteSession());

          case 16:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should distinguish between W3C and JSONWP session', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.executeCommand('createSession', _Object$assign({}, defaultCaps, {
              platformName: 'Fake',
              deviceName: 'Commodore 64'
            })));

          case 2:

            d.protocol.should.equal('MJSONWP');
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(d.executeCommand('deleteSession'));

          case 5:
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(d.executeCommand('createSession', null, null, {
              alwaysMatch: _Object$assign({}, defaultCaps, {
                platformName: 'Fake',
                deviceName: 'Commodore 64'
              }),
              firstMatch: [{}]
            }));

          case 7:

            d.protocol.should.equal('W3C');

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    describe('protocol detection', function () {
      it('should use MJSONWP if only JSONWP caps are provided', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

            case 2:
              d.protocol.should.equal('MJSONWP');

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should use W3C if only W3C caps are provided', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(d.createSession(null, null, { alwaysMatch: defaultCaps, firstMatch: [{}] }));

            case 2:
              d.protocol.should.equal('W3C');

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });

    it('should have a method to get driver for a session', function callee$2$0() {
      var _ref4, _ref42, sessId;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

          case 2:
            _ref4 = context$3$0.sent;
            _ref42 = _slicedToArray(_ref4, 1);
            sessId = _ref42[0];

            d.driverForSession(sessId).should.eql(d);

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    describe('command queue', function () {
      var d = new DriverClass();

      var waitMs = 10;
      d.getStatus = (function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(_bluebird2['default'].delay(waitMs));

            case 2:
              return context$4$0.abrupt('return', Date.now());

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      }).bind(d);

      d.getSessions = (function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(_bluebird2['default'].delay(waitMs));

            case 2:
              throw new Error('multipass');

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      }).bind(d);

      afterEach(function () {
        d.clearNewCommandTimeout();
      });

      it('should queue commands and.executeCommand/respond in the order received', function callee$3$0() {
        var numCmds, cmds, i, results;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              numCmds = 10;
              cmds = [];

              for (i = 0; i < numCmds; i++) {
                cmds.push(d.executeCommand('getStatus'));
              }
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(_bluebird2['default'].all(cmds));

            case 5:
              results = context$4$0.sent;
              i = 1;

            case 7:
              if (!(i < numCmds)) {
                context$4$0.next = 13;
                break;
              }

              if (!(results[i] <= results[i - 1])) {
                context$4$0.next = 10;
                break;
              }

              throw new Error('Got result out of order');

            case 10:
              i++;
              context$4$0.next = 7;
              break;

            case 13:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should handle errors correctly when queuing', function callee$3$0() {
        var numCmds, cmds, i, results;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              numCmds = 10;
              cmds = [];

              for (i = 0; i < numCmds; i++) {
                if (i === 5) {
                  cmds.push(d.executeCommand('getSessions'));
                } else {
                  cmds.push(d.executeCommand('getStatus'));
                }
              }
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(_bluebird2['default'].settle(cmds));

            case 5:
              results = context$4$0.sent;
              i = 1;

            case 7:
              if (!(i < 5)) {
                context$4$0.next = 13;
                break;
              }

              if (!(results[i].value() <= results[i - 1].value())) {
                context$4$0.next = 10;
                break;
              }

              throw new Error('Got result out of order');

            case 10:
              i++;
              context$4$0.next = 7;
              break;

            case 13:
              results[5].reason().message.should.contain('multipass');
              i = 7;

            case 15:
              if (!(i < numCmds)) {
                context$4$0.next = 21;
                break;
              }

              if (!(results[i].value() <= results[i - 1].value())) {
                context$4$0.next = 18;
                break;
              }

              throw new Error('Got result out of order');

            case 18:
              i++;
              context$4$0.next = 15;
              break;

            case 21:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });

      it('should not care if queue empties for a bit', function callee$3$0() {
        var numCmds, cmds, i, results;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              numCmds = 10;
              cmds = [];

              for (i = 0; i < numCmds; i++) {
                cmds.push(d.executeCommand('getStatus'));
              }
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(_bluebird2['default'].all(cmds));

            case 5:
              results = context$4$0.sent;

              cmds = [];
              for (i = 0; i < numCmds; i++) {
                cmds.push(d.executeCommand('getStatus'));
              }
              context$4$0.next = 10;
              return _regeneratorRuntime.awrap(_bluebird2['default'].all(cmds));

            case 10:
              results = context$4$0.sent;
              i = 1;

            case 12:
              if (!(i < numCmds)) {
                context$4$0.next = 18;
                break;
              }

              if (!(results[i] <= results[i - 1])) {
                context$4$0.next = 15;
                break;
              }

              throw new Error('Got result out of order');

            case 15:
              i++;
              context$4$0.next = 12;
              break;

            case 18:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });

    describe('timeouts', function () {
      before(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      describe('command', function () {
        it('should exist by default', function callee$4$0() {
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                d.newCommandTimeoutMs.should.equal(60000);

              case 1:
              case 'end':
                return context$5$0.stop();
            }
          }, null, this);
        });
        it('should be settable through `timeouts`', function callee$4$0() {
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                context$5$0.next = 2;
                return _regeneratorRuntime.awrap(d.timeouts('command', 20));

              case 2:
                d.newCommandTimeoutMs.should.equal(20);

              case 3:
              case 'end':
                return context$5$0.stop();
            }
          }, null, this);
        });
      });
      describe('implicit', function () {
        it('should not exist by default', function callee$4$0() {
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                d.implicitWaitMs.should.equal(0);

              case 1:
              case 'end':
                return context$5$0.stop();
            }
          }, null, this);
        });
        it('should be settable through `timeouts`', function callee$4$0() {
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                context$5$0.next = 2;
                return _regeneratorRuntime.awrap(d.timeouts('implicit', 20));

              case 2:
                d.implicitWaitMs.should.equal(20);

              case 3:
              case 'end':
                return context$5$0.stop();
            }
          }, null, this);
        });
      });
    });

    describe('timeouts (W3C)', function () {
      beforeEach(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(d.createSession(null, null, w3cCaps));

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      afterEach(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(d.deleteSession());

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should get timeouts that we set', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(d.timeouts(undefined, undefined, undefined, undefined, 1000));

            case 2:
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(d.getTimeouts().should.eventually.have.property('implicit', 1000));

            case 4:
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(d.timeouts('command', 2000));

            case 6:
              context$4$0.next = 8;
              return _regeneratorRuntime.awrap(d.getTimeouts().should.eventually.deep.equal({
                implicit: 1000,
                command: 2000
              }));

            case 8:
              context$4$0.next = 10;
              return _regeneratorRuntime.awrap(d.timeouts(undefined, undefined, undefined, undefined, 3000));

            case 10:
              context$4$0.next = 12;
              return _regeneratorRuntime.awrap(d.getTimeouts().should.eventually.deep.equal({
                implicit: 3000,
                command: 2000
              }));

            case 12:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });

    describe('reset compatibility', function () {
      it('should not allow both fullReset and noReset to be true', function callee$3$0() {
        var newCaps;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              newCaps = _Object$assign({}, defaultCaps, {
                fullReset: true,
                noReset: true
              });
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(d.createSession(newCaps).should.eventually.be.rejectedWith(/noReset.+fullReset/));

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });

    describe('proxying', function () {
      var sessId = undefined;
      beforeEach(function callee$3$0() {
        var _ref5, _ref52;

        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(d.createSession(defaultCaps));

            case 2:
              _ref5 = context$4$0.sent;
              _ref52 = _slicedToArray(_ref5, 1);
              sessId = _ref52[0];

            case 5:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      describe('#proxyActive', function () {
        it('should exist', function () {
          d.proxyActive.should.be.an['instanceof'](Function);
        });
        it('should return false', function () {
          d.proxyActive(sessId).should.be['false'];
        });
        it('should throw an error when sessionId is wrong', function () {
          (function () {
            d.proxyActive('aaa');
          }).should['throw'];
        });
      });

      describe('#getProxyAvoidList', function () {
        it('should exist', function () {
          d.getProxyAvoidList.should.be.an['instanceof'](Function);
        });
        it('should return an array', function () {
          d.getProxyAvoidList(sessId).should.be.an['instanceof'](Array);
        });
        it('should throw an error when sessionId is wrong', function () {
          (function () {
            d.getProxyAvoidList('aaa');
          }).should['throw'];
        });
      });

      describe('#canProxy', function () {
        it('should have a #canProxy method', function () {
          d.canProxy.should.be.an['instanceof'](Function);
        });
        it('should return false from #canProxy', function () {
          d.canProxy(sessId).should.be['false'];
        });
        it('should throw an error when sessionId is wrong', function () {
          (function () {
            d.canProxy();
          }).should['throw'];
        });
      });

      describe('#proxyRouteIsAvoided', function () {
        it('should validate form of avoidance list', function () {
          var avoidStub = _sinon2['default'].stub(d, 'getProxyAvoidList');
          avoidStub.returns([['POST', /\/foo/], ['GET']]);
          (function () {
            d.proxyRouteIsAvoided();
          }).should['throw'];
          avoidStub.returns([['POST', /\/foo/], ['GET', /^foo/, 'bar']]);
          (function () {
            d.proxyRouteIsAvoided();
          }).should['throw'];
          avoidStub.restore();
        });
        it('should reject bad http methods', function () {
          var avoidStub = _sinon2['default'].stub(d, 'getProxyAvoidList');
          avoidStub.returns([['POST', /^foo/], ['BAZETE', /^bar/]]);
          (function () {
            d.proxyRouteIsAvoided();
          }).should['throw'];
          avoidStub.restore();
        });
        it('should reject non-regex routes', function () {
          var avoidStub = _sinon2['default'].stub(d, 'getProxyAvoidList');
          avoidStub.returns([['POST', /^foo/], ['GET', '/bar']]);
          (function () {
            d.proxyRouteIsAvoided();
          }).should['throw'];
          avoidStub.restore();
        });
        it('should return true for routes in the avoid list', function () {
          var avoidStub = _sinon2['default'].stub(d, 'getProxyAvoidList');
          avoidStub.returns([['POST', /^\/foo/]]);
          d.proxyRouteIsAvoided(null, 'POST', '/foo/bar').should.be['true'];
          avoidStub.restore();
        });
        it('should strip away any wd/hub prefix', function () {
          var avoidStub = _sinon2['default'].stub(d, 'getProxyAvoidList');
          avoidStub.returns([['POST', /^\/foo/]]);
          d.proxyRouteIsAvoided(null, 'POST', '/wd/hub/foo/bar').should.be['true'];
          avoidStub.restore();
        });
        it('should return false for routes not in the avoid list', function () {
          var avoidStub = _sinon2['default'].stub(d, 'getProxyAvoidList');
          avoidStub.returns([['POST', /^\/foo/]]);
          d.proxyRouteIsAvoided(null, 'GET', '/foo/bar').should.be['false'];
          d.proxyRouteIsAvoided(null, 'POST', '/boo').should.be['false'];
          avoidStub.restore();
        });
      });
    });

    describe('event timing framework', function () {
      var beforeStartTime = undefined;
      beforeEach(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              beforeStartTime = Date.now();
              d.shouldValidateCaps = false;
              context$4$0.next = 4;
              return _regeneratorRuntime.awrap(d.executeCommand('createSession', defaultCaps));

            case 4:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      describe('#eventHistory', function () {
        it('should have an eventHistory property', function () {
          should.exist(d.eventHistory);
          should.exist(d.eventHistory.commands);
        });

        it('should have a session start timing after session start', function () {
          var _d$eventHistory = d.eventHistory;
          var newSessionRequested = _d$eventHistory.newSessionRequested;
          var newSessionStarted = _d$eventHistory.newSessionStarted;

          newSessionRequested.should.have.length(1);
          newSessionStarted.should.have.length(1);
          newSessionRequested[0].should.be.a('number');
          newSessionStarted[0].should.be.a('number');
          (newSessionRequested[0] >= beforeStartTime).should.be['true'];
          (newSessionStarted[0] >= newSessionRequested[0]).should.be['true'];
        });

        it('should include a commands list', function callee$4$0() {
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                context$5$0.next = 2;
                return _regeneratorRuntime.awrap(d.executeCommand('getStatus', []));

              case 2:
                d.eventHistory.commands.length.should.equal(2);
                d.eventHistory.commands[1].cmd.should.equal('getStatus');
                d.eventHistory.commands[1].startTime.should.be.a('number');
                d.eventHistory.commands[1].endTime.should.be.a('number');

              case 6:
              case 'end':
                return context$5$0.stop();
            }
          }, null, this);
        });
      });
      describe('#logEvent', function () {
        it('should allow logging arbitrary events', function () {
          d.logEvent('foo');
          d.eventHistory.foo[0].should.be.a('number');
          (d.eventHistory.foo[0] >= beforeStartTime).should.be['true'];
        });
        it('should not allow reserved or oddly formed event names', function () {
          (function () {
            d.logEvent('commands');
          }).should['throw']();
          (function () {
            d.logEvent(1);
          }).should['throw']();
          (function () {
            d.logEvent({});
          }).should['throw']();
        });
      });
      it('should allow logging the same event multiple times', function () {
        d.logEvent('bar');
        d.logEvent('bar');
        d.eventHistory.bar.should.have.length(2);
        d.eventHistory.bar[1].should.be.a('number');
        (d.eventHistory.bar[1] >= d.eventHistory.bar[0]).should.be['true'];
      });
      describe('getSession decoration', function () {
        it('should decorate getSession response if opt-in cap is provided', function callee$4$0() {
          var res;
          return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
            while (1) switch (context$5$0.prev = context$5$0.next) {
              case 0:
                context$5$0.next = 2;
                return _regeneratorRuntime.awrap(d.getSession());

              case 2:
                res = context$5$0.sent;

                should.not.exist(res.events);

                d.caps.eventTimings = true;
                context$5$0.next = 7;
                return _regeneratorRuntime.awrap(d.getSession());

              case 7:
                res = context$5$0.sent;

                should.exist(res.events);
                should.exist(res.events.newSessionRequested);
                res.events.newSessionRequested[0].should.be.a('number');

              case 11:
              case 'end':
                return context$5$0.stop();
            }
          }, null, this);
        });
      });
    });
    describe('.reset', function () {
      it('should reset as W3C if the original session was W3C', function callee$3$0() {
        var caps;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              caps = {
                alwaysMatch: _Object$assign({}, {
                  app: 'Fake',
                  deviceName: 'Fake',
                  automationName: 'Fake',
                  platformName: 'Fake'
                }, defaultCaps),
                firstMatch: [{}]
              };
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(d.createSession(undefined, undefined, caps));

            case 3:
              d.protocol.should.equal('W3C');
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(d.reset());

            case 6:
              d.protocol.should.equal('W3C');

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
      it('should reset as MJSONWP if the original session was MJSONWP', function callee$3$0() {
        var caps;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              caps = _Object$assign({}, {
                app: 'Fake',
                deviceName: 'Fake',
                automationName: 'Fake',
                platformName: 'Fake'
              }, defaultCaps);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(d.createSession(caps));

            case 3:
              d.protocol.should.equal('MJSONWP');
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(d.reset());

            case 6:
              d.protocol.should.equal('MJSONWP');

            case 7:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      });
    });
  });

  describe('DeviceSettings', function () {
    it('should not hold on to reference of defaults in constructor', function () {
      var obj = { foo: 'bar' };
      var d1 = new _2.DeviceSettings(obj);
      var d2 = new _2.DeviceSettings(obj);
      d1._settings.foo = 'baz';
      d1._settings.should.not.eql(d2._settings);
    });
  });
}

exports['default'] = baseDriverUnitTests;
module.exports = exports['default'];

// Test JSONWP

// Test W3C (leave first 2 args null because those are the JSONWP args)
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYmFzZWRyaXZlci9kcml2ZXItdGVzdHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7c0JBQWMsUUFBUTs7OztvQkFDTCxNQUFNOzs7OzhCQUNJLGtCQUFrQjs7Ozt3QkFDL0IsVUFBVTs7OztpQkFDTyxPQUFPOztxQkFDcEIsT0FBTzs7OztBQUd6QixJQUFNLE1BQU0sR0FBRyxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUM3QixrQkFBSyxHQUFHLDZCQUFnQixDQUFDOzs7O0FBSXpCLFNBQVMsbUJBQW1CLENBQUUsV0FBVyxFQUFvQjtNQUFsQixXQUFXLHlEQUFHLEVBQUU7O0FBQ3pELE1BQU0sT0FBTyxHQUFHO0FBQ2QsZUFBVyxFQUFFLGVBQWMsRUFBRSxFQUFFLFdBQVcsRUFBRTtBQUMxQyxrQkFBWSxFQUFFLE1BQU07QUFDcEIsZ0JBQVUsRUFBRSxjQUFjO0tBQzNCLENBQUM7QUFDRixjQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUM7R0FDakIsQ0FBQzs7QUFFRixVQUFRLENBQUMsWUFBWSxFQUFFLFlBQVk7QUFDakMsUUFBSSxDQUFDLFlBQUEsQ0FBQztBQUNOLGNBQVUsQ0FBQyxZQUFZO0FBQ3JCLE9BQUMsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0tBQ3ZCLENBQUMsQ0FBQztBQUNILGFBQVMsQ0FBQzs7Ozs7NkNBQ0YsQ0FBQyxDQUFDLGFBQWEsRUFBRTs7Ozs7OztLQUN4QixDQUFDLENBQUM7O0FBRUgsTUFBRSxDQUFDLHNDQUFzQyxFQUFFO1VBQ3JDLE1BQU07Ozs7OzZDQUFTLENBQUMsQ0FBQyxTQUFTLEVBQUU7OztBQUE1QixrQkFBTTs7QUFDVixrQkFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7Ozs7Ozs7S0FDdkIsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyw4Q0FBOEMsRUFBRTt1QkFDNUMsTUFBTTs7Ozs7OzZDQUFVLENBQUMsQ0FBQyxhQUFhLENBQUMsV0FBVyxD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QUFFO0FBQzdCLG1CQUFHLEVBQUUsTUFBTTtBQUNYLDBCQUFVLEVBQUUsTUFBTTtBQUNsQiw4QkFBYyxFQUFFLE1BQU07QUFDdEIsNEJBQVksRUFBRSxNQUFNO2VBQ3JCLEVBQUUsV0FBVyxDQUFDOzsrQ0FDVCxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQzs7O0FBQzNCLGVBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQzs7K0NBQzdCLENBQUMsQ0FBQyxLQUFLLEVBQUU7OztBQUNmLGVBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQzs7Ozs7OztPQUNwQyxDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLGdCQUFnQixFQUFFLFlBQVk7QUFDckMsTUFBRSxDQUFDLDREQUE0RCxFQUFFLFlBQVk7QUFDM0UsVUFBSSxHQUFHLEdBQUcsRUFBQyxHQUFHLEVBQUUsS0FBSyxFQUFDLENBQUM7QUFDdkIsVUFBSSxFQUFFLEdBQUcsc0JBQW1CLEdBQUcsQ0FBQyxDQUFDO0FBQ2pDLFVBQUksRUFBRSxHQUFHLHNCQUFtQixHQUFHLENBQUMsQ0FBQztBQUNqQyxRQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFDekIsUUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDM0MsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBQ0o7O3FCQUVjLG1CQUFtQiIsImZpbGUiOiJ0ZXN0L2Jhc2Vkcml2ZXIvZHJpdmVyLXRlc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgRGV2aWNlU2V0dGluZ3MgfSBmcm9tICcuLi8uLic7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuXG5cbmNvbnN0IHNob3VsZCA9IGNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbi8vIHdyYXAgdGhlc2UgdGVzdHMgaW4gYSBmdW5jdGlvbiBzbyB3ZSBjYW4gZXhwb3J0IHRoZSB0ZXN0cyBhbmQgcmUtdXNlIHRoZW1cbi8vIGZvciBhY3R1YWwgZHJpdmVyIGltcGxlbWVudGF0aW9uc1xuZnVuY3Rpb24gYmFzZURyaXZlclVuaXRUZXN0cyAoRHJpdmVyQ2xhc3MsIGRlZmF1bHRDYXBzID0ge30pIHtcbiAgY29uc3QgdzNjQ2FwcyA9IHtcbiAgICBhbHdheXNNYXRjaDogT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdENhcHMsIHtcbiAgICAgIHBsYXRmb3JtTmFtZTogJ0Zha2UnLFxuICAgICAgZGV2aWNlTmFtZTogJ0NvbW1vZG9yZSA2NCcsXG4gICAgfSksXG4gICAgZmlyc3RNYXRjaDogW3t9XSxcbiAgfTtcblxuICBkZXNjcmliZSgnQmFzZURyaXZlcicsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZDtcbiAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGQgPSBuZXcgRHJpdmVyQ2xhc3MoKTtcbiAgICB9KTtcbiAgICBhZnRlckVhY2goYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgZC5kZWxldGVTZXNzaW9uKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBlbXB0eSBzdGF0dXMgb2JqZWN0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHN0YXR1cyA9IGF3YWl0IGQuZ2V0U3RhdHVzKCk7XG4gICAgICBzdGF0dXMuc2hvdWxkLmVxbCh7fSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBhIHNlc3Npb25JZCBmcm9tIGNyZWF0ZVNlc3Npb24nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgW3Nlc3NJZF0gPSBhd2FpdCBkLmNyZWF0ZVNlc3Npb24oZGVmYXVsdENhcHMpO1xuICAgICAgc2hvdWxkLmV4aXN0KHNlc3NJZCk7XG4gICAgICBzZXNzSWQuc2hvdWxkLmJlLmEoJ3N0cmluZycpO1xuICAgICAgc2Vzc0lkLmxlbmd0aC5zaG91bGQuYmUuYWJvdmUoNSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdCBiZSBhYmxlIHRvIHN0YXJ0IHR3byBzZXNzaW9ucyB3aXRob3V0IGNsb3NpbmcgdGhlIGZpcnN0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgZC5jcmVhdGVTZXNzaW9uKGRlZmF1bHRDYXBzKTtcbiAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihkZWZhdWx0Q2Fwcykuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKCdzZXNzaW9uJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gZGVsZXRlIGEgc2Vzc2lvbicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBzZXNzaW9uSWQxID0gYXdhaXQgZC5jcmVhdGVTZXNzaW9uKGRlZmF1bHRDYXBzKTtcbiAgICAgIGF3YWl0IGQuZGVsZXRlU2Vzc2lvbigpO1xuICAgICAgc2hvdWxkLmVxdWFsKGQuc2Vzc2lvbklkLCBudWxsKTtcbiAgICAgIGxldCBzZXNzaW9uSWQyID0gYXdhaXQgZC5jcmVhdGVTZXNzaW9uKGRlZmF1bHRDYXBzKTtcbiAgICAgIHNlc3Npb25JZDEuc2hvdWxkLm5vdC5lcWwoc2Vzc2lvbklkMik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGdldCB0aGUgY3VycmVudCBzZXNzaW9uJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IFssIGNhcHNdID0gYXdhaXQgZC5jcmVhdGVTZXNzaW9uKGRlZmF1bHRDYXBzKTtcbiAgICAgIGNhcHMuc2hvdWxkLmVxdWFsKGF3YWl0IGQuZ2V0U2Vzc2lvbigpKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHNlc3Npb25zIGlmIG5vIHNlc3Npb24gZXhpc3RzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHNlc3Npb25zID0gYXdhaXQgZC5nZXRTZXNzaW9ucygpO1xuICAgICAgc2Vzc2lvbnMubGVuZ3RoLnNob3VsZC5lcXVhbCgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHNlc3Npb25zJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGNhcHMgPSBfLmNsb25lKGRlZmF1bHRDYXBzKTtcbiAgICAgIGNhcHMuYSA9ICdjYXAnO1xuICAgICAgYXdhaXQgZC5jcmVhdGVTZXNzaW9uKGNhcHMpO1xuICAgICAgbGV0IHNlc3Npb25zID0gYXdhaXQgZC5nZXRTZXNzaW9ucygpO1xuXG4gICAgICBzZXNzaW9ucy5sZW5ndGguc2hvdWxkLmVxdWFsKDEpO1xuICAgICAgc2Vzc2lvbnNbMF0uc2hvdWxkLmVxbCh7XG4gICAgICAgIGlkOiBkLnNlc3Npb25JZCxcbiAgICAgICAgY2FwYWJpbGl0aWVzOiBjYXBzXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZnVsZmlsbCBhbiB1bmV4cGVjdGVkIGRyaXZlciBxdWl0IHByb21pc2UnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBtYWtlIGEgY29tbWFuZCB0aGF0IHdpbGwgd2FpdCBhIGJpdCBzbyB3ZSBjYW4gY3Jhc2ggd2hpbGUgaXQncyBydW5uaW5nXG4gICAgICBkLmdldFN0YXR1cyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXdhaXQgQi5kZWxheSgxMDApO1xuICAgICAgfS5iaW5kKGQpO1xuICAgICAgbGV0IGNtZFByb21pc2UgPSBkLmV4ZWN1dGVDb21tYW5kKCdnZXRTdGF0dXMnKTtcbiAgICAgIGF3YWl0IEIuZGVsYXkoMCk7XG4gICAgICBkLnN0YXJ0VW5leHBlY3RlZFNodXRkb3duKG5ldyBFcnJvcignV2UgY3Jhc2hlZCcpKTtcbiAgICAgIGF3YWl0IGNtZFByb21pc2Uuc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgvV2UgY3Jhc2hlZC8pO1xuICAgICAgYXdhaXQgZC5vblVuZXhwZWN0ZWRTaHV0ZG93bi5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKC9XZSBjcmFzaGVkLyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdCBhbGxvdyBjb21tYW5kcyBpbiBtaWRkbGUgb2YgdW5leHBlY3RlZCBzaHV0ZG93bicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIG1ha2UgYSBjb21tYW5kIHRoYXQgd2lsbCB3YWl0IGEgYml0IHNvIHdlIGNhbiBjcmFzaCB3aGlsZSBpdCdzIHJ1bm5pbmdcbiAgICAgIGQub2xkRGVsZXRlU2Vzc2lvbiA9IGQuZGVsZXRlU2Vzc2lvbjtcbiAgICAgIGQuZGVsZXRlU2Vzc2lvbiA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXdhaXQgQi5kZWxheSgxMDApO1xuICAgICAgICBhd2FpdCB0aGlzLm9sZERlbGV0ZVNlc3Npb24oKTtcbiAgICAgIH0uYmluZChkKTtcbiAgICAgIGxldCBjYXBzID0gXy5jbG9uZShkZWZhdWx0Q2Fwcyk7XG4gICAgICBhd2FpdCBkLmNyZWF0ZVNlc3Npb24oY2Fwcyk7XG4gICAgICBkLnN0YXJ0VW5leHBlY3RlZFNodXRkb3duKG5ldyBFcnJvcignV2UgY3Jhc2hlZCcpKTtcbiAgICAgIGF3YWl0IGQub25VbmV4cGVjdGVkU2h1dGRvd24uc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgvV2UgY3Jhc2hlZC8pO1xuICAgICAgYXdhaXQgZC5leGVjdXRlQ29tbWFuZCgnZ2V0U2Vzc2lvbicpLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoL3NodXQgZG93bi8pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBhbGxvdyBuZXcgY29tbWFuZHMgYWZ0ZXIgZG9uZSBzaHV0dGluZyBkb3duJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gbWFrZSBhIGNvbW1hbmQgdGhhdCB3aWxsIHdhaXQgYSBiaXQgc28gd2UgY2FuIGNyYXNoIHdoaWxlIGl0J3MgcnVubmluZ1xuICAgICAgZC5vbGREZWxldGVTZXNzaW9uID0gZC5kZWxldGVTZXNzaW9uO1xuICAgICAgZC5kZWxldGVTZXNzaW9uID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCBCLmRlbGF5KDEwMCk7XG4gICAgICAgIGF3YWl0IHRoaXMub2xkRGVsZXRlU2Vzc2lvbigpO1xuICAgICAgfS5iaW5kKGQpO1xuICAgICAgbGV0IGNhcHMgPSBfLmNsb25lKGRlZmF1bHRDYXBzKTtcbiAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihjYXBzKTtcbiAgICAgIGQuc3RhcnRVbmV4cGVjdGVkU2h1dGRvd24obmV3IEVycm9yKCdXZSBjcmFzaGVkJykpO1xuICAgICAgYXdhaXQgZC5vblVuZXhwZWN0ZWRTaHV0ZG93bi5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKC9XZSBjcmFzaGVkLyk7XG4gICAgICBhd2FpdCBkLmV4ZWN1dGVDb21tYW5kKCdnZXRTZXNzaW9uJykuc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgvc2h1dCBkb3duLyk7XG4gICAgICBhd2FpdCBCLmRlbGF5KDEwMCk7XG4gICAgICBhd2FpdCBkLmV4ZWN1dGVDb21tYW5kKCdjcmVhdGVTZXNzaW9uJywgY2Fwcyk7XG4gICAgICBhd2FpdCBkLmRlbGV0ZVNlc3Npb24oKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZGlzdGluZ3Vpc2ggYmV0d2VlbiBXM0MgYW5kIEpTT05XUCBzZXNzaW9uJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVGVzdCBKU09OV1BcbiAgICAgIGF3YWl0IGQuZXhlY3V0ZUNvbW1hbmQoJ2NyZWF0ZVNlc3Npb24nLCBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0Q2Fwcywge1xuICAgICAgICBwbGF0Zm9ybU5hbWU6ICdGYWtlJyxcbiAgICAgICAgZGV2aWNlTmFtZTogJ0NvbW1vZG9yZSA2NCcsXG4gICAgICB9KSk7XG5cbiAgICAgIGQucHJvdG9jb2wuc2hvdWxkLmVxdWFsKCdNSlNPTldQJyk7XG4gICAgICBhd2FpdCBkLmV4ZWN1dGVDb21tYW5kKCdkZWxldGVTZXNzaW9uJyk7XG5cbiAgICAgIC8vIFRlc3QgVzNDIChsZWF2ZSBmaXJzdCAyIGFyZ3MgbnVsbCBiZWNhdXNlIHRob3NlIGFyZSB0aGUgSlNPTldQIGFyZ3MpXG4gICAgICBhd2FpdCBkLmV4ZWN1dGVDb21tYW5kKCdjcmVhdGVTZXNzaW9uJywgbnVsbCwgbnVsbCwge1xuICAgICAgICBhbHdheXNNYXRjaDogT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdENhcHMsIHtcbiAgICAgICAgICBwbGF0Zm9ybU5hbWU6ICdGYWtlJyxcbiAgICAgICAgICBkZXZpY2VOYW1lOiAnQ29tbW9kb3JlIDY0JyxcbiAgICAgICAgfSksXG4gICAgICAgIGZpcnN0TWF0Y2g6IFt7fV0sXG4gICAgICB9KTtcblxuICAgICAgZC5wcm90b2NvbC5zaG91bGQuZXF1YWwoJ1czQycpO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3Byb3RvY29sIGRldGVjdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgdXNlIE1KU09OV1AgaWYgb25seSBKU09OV1AgY2FwcyBhcmUgcHJvdmlkZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihkZWZhdWx0Q2Fwcyk7XG4gICAgICAgIGQucHJvdG9jb2wuc2hvdWxkLmVxdWFsKCdNSlNPTldQJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCB1c2UgVzNDIGlmIG9ubHkgVzNDIGNhcHMgYXJlIHByb3ZpZGVkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCBkLmNyZWF0ZVNlc3Npb24obnVsbCwgbnVsbCwge2Fsd2F5c01hdGNoOiBkZWZhdWx0Q2FwcywgZmlyc3RNYXRjaDogW3t9XX0pO1xuICAgICAgICBkLnByb3RvY29sLnNob3VsZC5lcXVhbCgnVzNDJyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGF2ZSBhIG1ldGhvZCB0byBnZXQgZHJpdmVyIGZvciBhIHNlc3Npb24nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgW3Nlc3NJZF0gPSBhd2FpdCBkLmNyZWF0ZVNlc3Npb24oZGVmYXVsdENhcHMpO1xuICAgICAgZC5kcml2ZXJGb3JTZXNzaW9uKHNlc3NJZCkuc2hvdWxkLmVxbChkKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdjb21tYW5kIHF1ZXVlJywgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGQgPSBuZXcgRHJpdmVyQ2xhc3MoKTtcblxuICAgICAgbGV0IHdhaXRNcyA9IDEwO1xuICAgICAgZC5nZXRTdGF0dXMgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IEIuZGVsYXkod2FpdE1zKTtcbiAgICAgICAgcmV0dXJuIERhdGUubm93KCk7XG4gICAgICB9LmJpbmQoZCk7XG5cbiAgICAgIGQuZ2V0U2Vzc2lvbnMgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IEIuZGVsYXkod2FpdE1zKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtdWx0aXBhc3MnKTtcbiAgICAgIH0uYmluZChkKTtcblxuICAgICAgYWZ0ZXJFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZC5jbGVhck5ld0NvbW1hbmRUaW1lb3V0KCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBxdWV1ZSBjb21tYW5kcyBhbmQuZXhlY3V0ZUNvbW1hbmQvcmVzcG9uZCBpbiB0aGUgb3JkZXIgcmVjZWl2ZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBudW1DbWRzID0gMTA7XG4gICAgICAgIGxldCBjbWRzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQ21kczsgaSsrKSB7XG4gICAgICAgICAgY21kcy5wdXNoKGQuZXhlY3V0ZUNvbW1hbmQoJ2dldFN0YXR1cycpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IEIuYWxsKGNtZHMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IG51bUNtZHM7IGkrKykge1xuICAgICAgICAgIGlmIChyZXN1bHRzW2ldIDw9IHJlc3VsdHNbaSAtIDFdKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dvdCByZXN1bHQgb3V0IG9mIG9yZGVyJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgZXJyb3JzIGNvcnJlY3RseSB3aGVuIHF1ZXVpbmcnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBudW1DbWRzID0gMTA7XG4gICAgICAgIGxldCBjbWRzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtQ21kczsgaSsrKSB7XG4gICAgICAgICAgaWYgKGkgPT09IDUpIHtcbiAgICAgICAgICAgIGNtZHMucHVzaChkLmV4ZWN1dGVDb21tYW5kKCdnZXRTZXNzaW9ucycpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY21kcy5wdXNoKGQuZXhlY3V0ZUNvbW1hbmQoJ2dldFN0YXR1cycpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBCLnNldHRsZShjbWRzKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCA1OyBpKyspIHtcbiAgICAgICAgICBpZiAocmVzdWx0c1tpXS52YWx1ZSgpIDw9IHJlc3VsdHNbaSAtIDFdLnZhbHVlKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignR290IHJlc3VsdCBvdXQgb2Ygb3JkZXInKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0c1s1XS5yZWFzb24oKS5tZXNzYWdlLnNob3VsZC5jb250YWluKCdtdWx0aXBhc3MnKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDc7IGkgPCBudW1DbWRzOyBpKyspIHtcbiAgICAgICAgICBpZiAocmVzdWx0c1tpXS52YWx1ZSgpIDw9IHJlc3VsdHNbaSAtIDFdLnZhbHVlKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignR290IHJlc3VsdCBvdXQgb2Ygb3JkZXInKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIG5vdCBjYXJlIGlmIHF1ZXVlIGVtcHRpZXMgZm9yIGEgYml0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgbnVtQ21kcyA9IDEwO1xuICAgICAgICBsZXQgY21kcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUNtZHM7IGkrKykge1xuICAgICAgICAgIGNtZHMucHVzaChkLmV4ZWN1dGVDb21tYW5kKCdnZXRTdGF0dXMnKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBCLmFsbChjbWRzKTtcbiAgICAgICAgY21kcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bUNtZHM7IGkrKykge1xuICAgICAgICAgIGNtZHMucHVzaChkLmV4ZWN1dGVDb21tYW5kKCdnZXRTdGF0dXMnKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0cyA9IGF3YWl0IEIuYWxsKGNtZHMpO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IG51bUNtZHM7IGkrKykge1xuICAgICAgICAgIGlmIChyZXN1bHRzW2ldIDw9IHJlc3VsdHNbaSAtIDFdKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dvdCByZXN1bHQgb3V0IG9mIG9yZGVyJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCd0aW1lb3V0cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGJlZm9yZShhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihkZWZhdWx0Q2Fwcyk7XG4gICAgICB9KTtcbiAgICAgIGRlc2NyaWJlKCdjb21tYW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIGV4aXN0IGJ5IGRlZmF1bHQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZC5uZXdDb21tYW5kVGltZW91dE1zLnNob3VsZC5lcXVhbCg2MDAwMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIGJlIHNldHRhYmxlIHRocm91Z2ggYHRpbWVvdXRzYCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhd2FpdCBkLnRpbWVvdXRzKCdjb21tYW5kJywgMjApO1xuICAgICAgICAgIGQubmV3Q29tbWFuZFRpbWVvdXRNcy5zaG91bGQuZXF1YWwoMjApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgZGVzY3JpYmUoJ2ltcGxpY2l0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIG5vdCBleGlzdCBieSBkZWZhdWx0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGQuaW1wbGljaXRXYWl0TXMuc2hvdWxkLmVxdWFsKDApO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBzZXR0YWJsZSB0aHJvdWdoIGB0aW1lb3V0c2AnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYXdhaXQgZC50aW1lb3V0cygnaW1wbGljaXQnLCAyMCk7XG4gICAgICAgICAgZC5pbXBsaWNpdFdhaXRNcy5zaG91bGQuZXF1YWwoMjApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3RpbWVvdXRzIChXM0MpJywgZnVuY3Rpb24gKCkge1xuICAgICAgYmVmb3JlRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbihudWxsLCBudWxsLCB3M2NDYXBzKTtcbiAgICAgIH0pO1xuICAgICAgYWZ0ZXJFYWNoKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXdhaXQgZC5kZWxldGVTZXNzaW9uKCk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgZ2V0IHRpbWVvdXRzIHRoYXQgd2Ugc2V0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCBkLnRpbWVvdXRzKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgMTAwMCk7XG4gICAgICAgIGF3YWl0IGQuZ2V0VGltZW91dHMoKS5zaG91bGQuZXZlbnR1YWxseS5oYXZlLnByb3BlcnR5KCdpbXBsaWNpdCcsIDEwMDApO1xuICAgICAgICBhd2FpdCBkLnRpbWVvdXRzKCdjb21tYW5kJywgMjAwMCk7XG4gICAgICAgIGF3YWl0IGQuZ2V0VGltZW91dHMoKS5zaG91bGQuZXZlbnR1YWxseS5kZWVwLmVxdWFsKHtcbiAgICAgICAgICBpbXBsaWNpdDogMTAwMCxcbiAgICAgICAgICBjb21tYW5kOiAyMDAwLFxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgZC50aW1lb3V0cyh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIDMwMDApO1xuICAgICAgICBhd2FpdCBkLmdldFRpbWVvdXRzKCkuc2hvdWxkLmV2ZW50dWFsbHkuZGVlcC5lcXVhbCh7XG4gICAgICAgICAgaW1wbGljaXQ6IDMwMDAsXG4gICAgICAgICAgY29tbWFuZDogMjAwMCxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdyZXNldCBjb21wYXRpYmlsaXR5JywgZnVuY3Rpb24gKCkge1xuICAgICAgaXQoJ3Nob3VsZCBub3QgYWxsb3cgYm90aCBmdWxsUmVzZXQgYW5kIG5vUmVzZXQgdG8gYmUgdHJ1ZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IG5ld0NhcHMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0Q2Fwcywge1xuICAgICAgICAgIGZ1bGxSZXNldDogdHJ1ZSxcbiAgICAgICAgICBub1Jlc2V0OiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCBkLmNyZWF0ZVNlc3Npb24obmV3Q2Fwcykuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKFxuICAgICAgICAgICAgL25vUmVzZXQuK2Z1bGxSZXNldC8pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgncHJveHlpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgc2Vzc0lkO1xuICAgICAgYmVmb3JlRWFjaChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIFtzZXNzSWRdID0gYXdhaXQgZC5jcmVhdGVTZXNzaW9uKGRlZmF1bHRDYXBzKTtcbiAgICAgIH0pO1xuICAgICAgZGVzY3JpYmUoJyNwcm94eUFjdGl2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCBleGlzdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkLnByb3h5QWN0aXZlLnNob3VsZC5iZS5hbi5pbnN0YW5jZW9mKEZ1bmN0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGZhbHNlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGQucHJveHlBY3RpdmUoc2Vzc0lkKS5zaG91bGQuYmUuZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIHdoZW4gc2Vzc2lvbklkIGlzIHdyb25nJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICgoKSA9PiB7IGQucHJveHlBY3RpdmUoJ2FhYScpOyB9KS5zaG91bGQudGhyb3c7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCcjZ2V0UHJveHlBdm9pZExpc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KCdzaG91bGQgZXhpc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZC5nZXRQcm94eUF2b2lkTGlzdC5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihGdW5jdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBhcnJheScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBkLmdldFByb3h5QXZvaWRMaXN0KHNlc3NJZCkuc2hvdWxkLmJlLmFuLmluc3RhbmNlb2YoQXJyYXkpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIHNlc3Npb25JZCBpcyB3cm9uZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAoKCkgPT4geyBkLmdldFByb3h5QXZvaWRMaXN0KCdhYWEnKTsgfSkuc2hvdWxkLnRocm93O1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBkZXNjcmliZSgnI2NhblByb3h5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIGhhdmUgYSAjY2FuUHJveHkgbWV0aG9kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGQuY2FuUHJveHkuc2hvdWxkLmJlLmFuLmluc3RhbmNlb2YoRnVuY3Rpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gZmFsc2UgZnJvbSAjY2FuUHJveHknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZC5jYW5Qcm94eShzZXNzSWQpLnNob3VsZC5iZS5mYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3Igd2hlbiBzZXNzaW9uSWQgaXMgd3JvbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgKCgpID0+IHsgZC5jYW5Qcm94eSgpOyB9KS5zaG91bGQudGhyb3c7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCcjcHJveHlSb3V0ZUlzQXZvaWRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBmb3JtIG9mIGF2b2lkYW5jZSBsaXN0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnN0IGF2b2lkU3R1YiA9IHNpbm9uLnN0dWIoZCwgJ2dldFByb3h5QXZvaWRMaXN0Jyk7XG4gICAgICAgICAgYXZvaWRTdHViLnJldHVybnMoW1snUE9TVCcsIC9cXC9mb28vXSwgWydHRVQnXV0pO1xuICAgICAgICAgICgoKSA9PiB7IGQucHJveHlSb3V0ZUlzQXZvaWRlZCgpOyB9KS5zaG91bGQudGhyb3c7XG4gICAgICAgICAgYXZvaWRTdHViLnJldHVybnMoW1snUE9TVCcsIC9cXC9mb28vXSwgWydHRVQnLCAvXmZvby8sICdiYXInXV0pO1xuICAgICAgICAgICgoKSA9PiB7IGQucHJveHlSb3V0ZUlzQXZvaWRlZCgpOyB9KS5zaG91bGQudGhyb3c7XG4gICAgICAgICAgYXZvaWRTdHViLnJlc3RvcmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgcmVqZWN0IGJhZCBodHRwIG1ldGhvZHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgYXZvaWRTdHViID0gc2lub24uc3R1YihkLCAnZ2V0UHJveHlBdm9pZExpc3QnKTtcbiAgICAgICAgICBhdm9pZFN0dWIucmV0dXJucyhbWydQT1NUJywgL15mb28vXSwgWydCQVpFVEUnLCAvXmJhci9dXSk7XG4gICAgICAgICAgKCgpID0+IHsgZC5wcm94eVJvdXRlSXNBdm9pZGVkKCk7IH0pLnNob3VsZC50aHJvdztcbiAgICAgICAgICBhdm9pZFN0dWIucmVzdG9yZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCByZWplY3Qgbm9uLXJlZ2V4IHJvdXRlcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb25zdCBhdm9pZFN0dWIgPSBzaW5vbi5zdHViKGQsICdnZXRQcm94eUF2b2lkTGlzdCcpO1xuICAgICAgICAgIGF2b2lkU3R1Yi5yZXR1cm5zKFtbJ1BPU1QnLCAvXmZvby9dLCBbJ0dFVCcsICcvYmFyJ11dKTtcbiAgICAgICAgICAoKCkgPT4geyBkLnByb3h5Um91dGVJc0F2b2lkZWQoKTsgfSkuc2hvdWxkLnRocm93O1xuICAgICAgICAgIGF2b2lkU3R1Yi5yZXN0b3JlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiB0cnVlIGZvciByb3V0ZXMgaW4gdGhlIGF2b2lkIGxpc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgYXZvaWRTdHViID0gc2lub24uc3R1YihkLCAnZ2V0UHJveHlBdm9pZExpc3QnKTtcbiAgICAgICAgICBhdm9pZFN0dWIucmV0dXJucyhbWydQT1NUJywgL15cXC9mb28vXV0pO1xuICAgICAgICAgIGQucHJveHlSb3V0ZUlzQXZvaWRlZChudWxsLCAnUE9TVCcsICcvZm9vL2JhcicpLnNob3VsZC5iZS50cnVlO1xuICAgICAgICAgIGF2b2lkU3R1Yi5yZXN0b3JlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIHN0cmlwIGF3YXkgYW55IHdkL2h1YiBwcmVmaXgnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgYXZvaWRTdHViID0gc2lub24uc3R1YihkLCAnZ2V0UHJveHlBdm9pZExpc3QnKTtcbiAgICAgICAgICBhdm9pZFN0dWIucmV0dXJucyhbWydQT1NUJywgL15cXC9mb28vXV0pO1xuICAgICAgICAgIGQucHJveHlSb3V0ZUlzQXZvaWRlZChudWxsLCAnUE9TVCcsICcvd2QvaHViL2Zvby9iYXInKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgICAgICBhdm9pZFN0dWIucmVzdG9yZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gZmFsc2UgZm9yIHJvdXRlcyBub3QgaW4gdGhlIGF2b2lkIGxpc3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgYXZvaWRTdHViID0gc2lub24uc3R1YihkLCAnZ2V0UHJveHlBdm9pZExpc3QnKTtcbiAgICAgICAgICBhdm9pZFN0dWIucmV0dXJucyhbWydQT1NUJywgL15cXC9mb28vXV0pO1xuICAgICAgICAgIGQucHJveHlSb3V0ZUlzQXZvaWRlZChudWxsLCAnR0VUJywgJy9mb28vYmFyJykuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgICAgIGQucHJveHlSb3V0ZUlzQXZvaWRlZChudWxsLCAnUE9TVCcsICcvYm9vJykuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgICAgIGF2b2lkU3R1Yi5yZXN0b3JlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnZXZlbnQgdGltaW5nIGZyYW1ld29yaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBiZWZvcmVTdGFydFRpbWU7XG4gICAgICBiZWZvcmVFYWNoKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYmVmb3JlU3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgZC5zaG91bGRWYWxpZGF0ZUNhcHMgPSBmYWxzZTtcbiAgICAgICAgYXdhaXQgZC5leGVjdXRlQ29tbWFuZCgnY3JlYXRlU2Vzc2lvbicsIGRlZmF1bHRDYXBzKTtcbiAgICAgIH0pO1xuICAgICAgZGVzY3JpYmUoJyNldmVudEhpc3RvcnknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KCdzaG91bGQgaGF2ZSBhbiBldmVudEhpc3RvcnkgcHJvcGVydHknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2hvdWxkLmV4aXN0KGQuZXZlbnRIaXN0b3J5KTtcbiAgICAgICAgICBzaG91bGQuZXhpc3QoZC5ldmVudEhpc3RvcnkuY29tbWFuZHMpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGhhdmUgYSBzZXNzaW9uIHN0YXJ0IHRpbWluZyBhZnRlciBzZXNzaW9uIHN0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxldCB7bmV3U2Vzc2lvblJlcXVlc3RlZCwgbmV3U2Vzc2lvblN0YXJ0ZWR9ID0gZC5ldmVudEhpc3Rvcnk7XG4gICAgICAgICAgbmV3U2Vzc2lvblJlcXVlc3RlZC5zaG91bGQuaGF2ZS5sZW5ndGgoMSk7XG4gICAgICAgICAgbmV3U2Vzc2lvblN0YXJ0ZWQuc2hvdWxkLmhhdmUubGVuZ3RoKDEpO1xuICAgICAgICAgIG5ld1Nlc3Npb25SZXF1ZXN0ZWRbMF0uc2hvdWxkLmJlLmEoJ251bWJlcicpO1xuICAgICAgICAgIG5ld1Nlc3Npb25TdGFydGVkWzBdLnNob3VsZC5iZS5hKCdudW1iZXInKTtcbiAgICAgICAgICAobmV3U2Vzc2lvblJlcXVlc3RlZFswXSA+PSBiZWZvcmVTdGFydFRpbWUpLnNob3VsZC5iZS50cnVlO1xuICAgICAgICAgIChuZXdTZXNzaW9uU3RhcnRlZFswXSA+PSBuZXdTZXNzaW9uUmVxdWVzdGVkWzBdKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBpbmNsdWRlIGEgY29tbWFuZHMgbGlzdCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhd2FpdCBkLmV4ZWN1dGVDb21tYW5kKCdnZXRTdGF0dXMnLCBbXSk7XG4gICAgICAgICAgZC5ldmVudEhpc3RvcnkuY29tbWFuZHMubGVuZ3RoLnNob3VsZC5lcXVhbCgyKTtcbiAgICAgICAgICBkLmV2ZW50SGlzdG9yeS5jb21tYW5kc1sxXS5jbWQuc2hvdWxkLmVxdWFsKCdnZXRTdGF0dXMnKTtcbiAgICAgICAgICBkLmV2ZW50SGlzdG9yeS5jb21tYW5kc1sxXS5zdGFydFRpbWUuc2hvdWxkLmJlLmEoJ251bWJlcicpO1xuICAgICAgICAgIGQuZXZlbnRIaXN0b3J5LmNvbW1hbmRzWzFdLmVuZFRpbWUuc2hvdWxkLmJlLmEoJ251bWJlcicpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgZGVzY3JpYmUoJyNsb2dFdmVudCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCBhbGxvdyBsb2dnaW5nIGFyYml0cmFyeSBldmVudHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZC5sb2dFdmVudCgnZm9vJyk7XG4gICAgICAgICAgZC5ldmVudEhpc3RvcnkuZm9vWzBdLnNob3VsZC5iZS5hKCdudW1iZXInKTtcbiAgICAgICAgICAoZC5ldmVudEhpc3RvcnkuZm9vWzBdID49IGJlZm9yZVN0YXJ0VGltZSkuc2hvdWxkLmJlLnRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICBpdCgnc2hvdWxkIG5vdCBhbGxvdyByZXNlcnZlZCBvciBvZGRseSBmb3JtZWQgZXZlbnQgbmFtZXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICAgIGQubG9nRXZlbnQoJ2NvbW1hbmRzJyk7XG4gICAgICAgICAgfSkuc2hvdWxkLnRocm93KCk7XG4gICAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICAgIGQubG9nRXZlbnQoMSk7XG4gICAgICAgICAgfSkuc2hvdWxkLnRocm93KCk7XG4gICAgICAgICAgKCgpID0+IHtcbiAgICAgICAgICAgIGQubG9nRXZlbnQoe30pO1xuICAgICAgICAgIH0pLnNob3VsZC50aHJvdygpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBhbGxvdyBsb2dnaW5nIHRoZSBzYW1lIGV2ZW50IG11bHRpcGxlIHRpbWVzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkLmxvZ0V2ZW50KCdiYXInKTtcbiAgICAgICAgZC5sb2dFdmVudCgnYmFyJyk7XG4gICAgICAgIGQuZXZlbnRIaXN0b3J5LmJhci5zaG91bGQuaGF2ZS5sZW5ndGgoMik7XG4gICAgICAgIGQuZXZlbnRIaXN0b3J5LmJhclsxXS5zaG91bGQuYmUuYSgnbnVtYmVyJyk7XG4gICAgICAgIChkLmV2ZW50SGlzdG9yeS5iYXJbMV0gPj0gZC5ldmVudEhpc3RvcnkuYmFyWzBdKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgZGVzY3JpYmUoJ2dldFNlc3Npb24gZGVjb3JhdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCBkZWNvcmF0ZSBnZXRTZXNzaW9uIHJlc3BvbnNlIGlmIG9wdC1pbiBjYXAgaXMgcHJvdmlkZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbGV0IHJlcyA9IGF3YWl0IGQuZ2V0U2Vzc2lvbigpO1xuICAgICAgICAgIHNob3VsZC5ub3QuZXhpc3QocmVzLmV2ZW50cyk7XG5cbiAgICAgICAgICBkLmNhcHMuZXZlbnRUaW1pbmdzID0gdHJ1ZTtcbiAgICAgICAgICByZXMgPSBhd2FpdCBkLmdldFNlc3Npb24oKTtcbiAgICAgICAgICBzaG91bGQuZXhpc3QocmVzLmV2ZW50cyk7XG4gICAgICAgICAgc2hvdWxkLmV4aXN0KHJlcy5ldmVudHMubmV3U2Vzc2lvblJlcXVlc3RlZCk7XG4gICAgICAgICAgcmVzLmV2ZW50cy5uZXdTZXNzaW9uUmVxdWVzdGVkWzBdLnNob3VsZC5iZS5hKCdudW1iZXInKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnLnJlc2V0JywgZnVuY3Rpb24gKCkge1xuICAgICAgaXQoJ3Nob3VsZCByZXNldCBhcyBXM0MgaWYgdGhlIG9yaWdpbmFsIHNlc3Npb24gd2FzIFczQycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgY2FwcyA9IHtcbiAgICAgICAgICBhbHdheXNNYXRjaDogT2JqZWN0LmFzc2lnbih7fSwge1xuICAgICAgICAgICAgYXBwOiAnRmFrZScsXG4gICAgICAgICAgICBkZXZpY2VOYW1lOiAnRmFrZScsXG4gICAgICAgICAgICBhdXRvbWF0aW9uTmFtZTogJ0Zha2UnLFxuICAgICAgICAgICAgcGxhdGZvcm1OYW1lOiAnRmFrZScsXG4gICAgICAgICAgfSwgZGVmYXVsdENhcHMpLFxuICAgICAgICAgIGZpcnN0TWF0Y2g6IFt7fV0sXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IGQuY3JlYXRlU2Vzc2lvbih1bmRlZmluZWQsIHVuZGVmaW5lZCwgY2Fwcyk7XG4gICAgICAgIGQucHJvdG9jb2wuc2hvdWxkLmVxdWFsKCdXM0MnKTtcbiAgICAgICAgYXdhaXQgZC5yZXNldCgpO1xuICAgICAgICBkLnByb3RvY29sLnNob3VsZC5lcXVhbCgnVzNDJyk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgcmVzZXQgYXMgTUpTT05XUCBpZiB0aGUgb3JpZ2luYWwgc2Vzc2lvbiB3YXMgTUpTT05XUCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgY2FwcyA9IE9iamVjdC5hc3NpZ24oe30sIHtcbiAgICAgICAgICBhcHA6ICdGYWtlJyxcbiAgICAgICAgICBkZXZpY2VOYW1lOiAnRmFrZScsXG4gICAgICAgICAgYXV0b21hdGlvbk5hbWU6ICdGYWtlJyxcbiAgICAgICAgICBwbGF0Zm9ybU5hbWU6ICdGYWtlJyxcbiAgICAgICAgfSwgZGVmYXVsdENhcHMpO1xuICAgICAgICBhd2FpdCBkLmNyZWF0ZVNlc3Npb24oY2Fwcyk7XG4gICAgICAgIGQucHJvdG9jb2wuc2hvdWxkLmVxdWFsKCdNSlNPTldQJyk7XG4gICAgICAgIGF3YWl0IGQucmVzZXQoKTtcbiAgICAgICAgZC5wcm90b2NvbC5zaG91bGQuZXF1YWwoJ01KU09OV1AnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRGV2aWNlU2V0dGluZ3MnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQoJ3Nob3VsZCBub3QgaG9sZCBvbiB0byByZWZlcmVuY2Ugb2YgZGVmYXVsdHMgaW4gY29uc3RydWN0b3InLCBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgb2JqID0ge2ZvbzogJ2Jhcid9O1xuICAgICAgbGV0IGQxID0gbmV3IERldmljZVNldHRpbmdzKG9iaik7XG4gICAgICBsZXQgZDIgPSBuZXcgRGV2aWNlU2V0dGluZ3Mob2JqKTtcbiAgICAgIGQxLl9zZXR0aW5ncy5mb28gPSAnYmF6JztcbiAgICAgIGQxLl9zZXR0aW5ncy5zaG91bGQubm90LmVxbChkMi5fc2V0dGluZ3MpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZURyaXZlclVuaXRUZXN0cztcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
