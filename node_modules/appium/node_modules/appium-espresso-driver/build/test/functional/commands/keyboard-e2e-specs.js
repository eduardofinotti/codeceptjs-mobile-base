'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _helpersSession = require('../helpers/session');

var _desired = require('../desired');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('keyboard', function () {
  this.timeout(_helpersSession.MOCHA_TIMEOUT);

  var idCounter = 0;

  var performActions = function performActions() {
    var actionsRoot,
        _iteratorNormalCompletion,
        _didIteratorError,
        _iteratorError,
        _len,
        actionsArrays,
        _key,
        _iterator,
        _step,
        actions,
        sessionId,
        options,
        args$2$0 = arguments;

    return _regeneratorRuntime.async(function performActions$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          actionsRoot = [];
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          context$2$0.prev = 4;

          for (_len = args$2$0.length, actionsArrays = Array(_len), _key = 0; _key < _len; _key++) {
            actionsArrays[_key] = args$2$0[_key];
          }

          for (_iterator = _getIterator(actionsArrays); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            actions = _step.value;

            actionsRoot.push({
              type: 'key',
              id: 'id_' + idCounter++,
              actions: actions
            });
          }

          context$2$0.next = 13;
          break;

        case 9:
          context$2$0.prev = 9;
          context$2$0.t0 = context$2$0['catch'](4);
          _didIteratorError = true;
          _iteratorError = context$2$0.t0;

        case 13:
          context$2$0.prev = 13;
          context$2$0.prev = 14;

          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }

        case 16:
          context$2$0.prev = 16;

          if (!_didIteratorError) {
            context$2$0.next = 19;
            break;
          }

          throw _iteratorError;

        case 19:
          return context$2$0.finish(16);

        case 20:
          return context$2$0.finish(13);

        case 21:
          context$2$0.next = 23;
          return _regeneratorRuntime.awrap(driver.getSessionId());

        case 23:
          sessionId = context$2$0.sent;
          options = {
            method: 'POST',
            uri: 'http://' + _helpersSession.HOST + ':' + _helpersSession.PORT + '/wd/hub/session/' + sessionId + '/actions',
            body: { actions: actionsRoot },
            json: true
          };
          return context$2$0.abrupt('return', (0, _requestPromise2['default'])(options));

        case 26:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[4, 9, 13, 21], [14,, 16, 20]]);
  };

  var driver = undefined;
  before(function callee$1$0() {
    var caps;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          caps = _Object$assign({
            appActivity: 'io.appium.android.apis.view.AutoComplete4'
          }, _desired.APIDEMO_CAPS);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _helpersSession.initSession)(caps));

        case 3:
          driver = context$2$0.sent;

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _helpersSession.deleteSession)());

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should send keys to the correct element', function callee$1$0() {
    var el;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.elementByXPath('//android.widget.AutoCompleteTextView'));

        case 2:
          el = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(el.click());

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(el.sendKeys('hello'));

        case 7:
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(el.clear());

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should send keys to the correct element', function callee$1$0() {
    var el;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.elementByXPath('//android.widget.AutoCompleteTextView'));

        case 2:
          el = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(el.setImmediateValue('hello world'));

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(el.text().should.eventually.equal('hello world'));

        case 7:
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(el.setImmediateValue('!!!'));

        case 9:
          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(el.text().should.eventually.equal('hello world!!!'));

        case 11:
          context$2$0.next = 13;
          return _regeneratorRuntime.awrap(el.clear());

        case 13:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should perform key events', function callee$1$0() {
    var autocompleteEl, keyActions;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.elementByXPath("//android.widget.AutoCompleteTextView"));

        case 2:
          autocompleteEl = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(autocompleteEl.click());

        case 5:
          keyActions = [{ "type": "keyDown", "value": '' }, { "type": "keyDown", "value": "h" }, { "type": "keyUp", "value": "h" }, { "type": "keyDown", "value": "a" }, { "type": "keyUp", "value": "a" }, { "type": "pause", "duration": 2000 }, { "type": "keyUp", "value": '' }, { "type": "keyDown", "value": "t" }, { "type": "keyUp", "value": "t" }, { "type": "keyDown", "value": "S" }, { "type": "keyUp", "value": "S" }];
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(performActions(keyActions));

        case 8:
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(autocompleteEl.text().should.eventually.equal('HAtS'));

        case 10:
          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(autocompleteEl.clear());

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy9rZXlib2FyZC1lMmUtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztvQkFBaUIsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7OEJBQ3pCLGlCQUFpQjs7Ozs4QkFDaUMsb0JBQW9COzt1QkFDN0QsWUFBWTs7QUFHekMsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUd6QixRQUFRLENBQUMsVUFBVSxFQUFFLFlBQVk7QUFDL0IsTUFBSSxDQUFDLE9BQU8sK0JBQWUsQ0FBQzs7QUFFNUIsTUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDOztBQUVsQixNQUFNLGNBQWMsR0FBRyxTQUFqQixjQUFjO1FBQ1osV0FBVzs7Ozs7UUFEdUIsYUFBYTs7OztRQUc1QyxPQUFPO1FBUVosU0FBUztRQUNQLE9BQU87Ozs7OztBQVhQLHFCQUFXLEdBQUcsRUFBRTs7Ozs7O3VDQURrQixhQUFhO0FBQWIseUJBQWE7OztBQUdyRCx3Q0FBb0IsYUFBYSxxR0FBRTtBQUExQixtQkFBTzs7QUFDZCx1QkFBVyxDQUFDLElBQUksQ0FBQztBQUNmLGtCQUFJLEVBQUUsS0FBSztBQUNYLGdCQUFFLFVBQVEsU0FBUyxFQUFFLEFBQUU7QUFDdkIscUJBQU8sRUFBUCxPQUFPO2FBQ1IsQ0FBQyxDQUFDO1dBQ0o7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkNBRXFCLE1BQU0sQ0FBQyxZQUFZLEVBQUU7OztBQUF2QyxtQkFBUztBQUNQLGlCQUFPLEdBQUc7QUFDZCxrQkFBTSxFQUFFLE1BQU07QUFDZCxlQUFHLHVGQUEyQyxTQUFTLGFBQVU7QUFDakUsZ0JBQUksRUFBRSxFQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUM7QUFDNUIsZ0JBQUksRUFBRSxJQUFJO1dBQ1g7OENBQ00saUNBQVEsT0FBTyxDQUFDOzs7Ozs7O0dBQ3hCLENBQUM7O0FBRUYsTUFBSSxNQUFNLFlBQUEsQ0FBQztBQUNYLFFBQU0sQ0FBQztRQUNELElBQUk7Ozs7QUFBSixjQUFJLEdBQUcsZUFBYztBQUN2Qix1QkFBVyxFQUFFLDJDQUEyQztXQUN6RCx3QkFBZTs7MkNBQ0QsaUNBQVksSUFBSSxDQUFDOzs7QUFBaEMsZ0JBQU07Ozs7Ozs7R0FDUCxDQUFDLENBQUM7QUFDSCxPQUFLLENBQUM7Ozs7OzJDQUNFLG9DQUFlOzs7Ozs7O0dBQ3RCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMseUNBQXlDLEVBQUU7UUFDeEMsRUFBRTs7Ozs7MkNBQVMsTUFBTSxDQUFDLGNBQWMsQ0FBQyx1Q0FBdUMsQ0FBQzs7O0FBQXpFLFlBQUU7OzJDQUNBLEVBQUUsQ0FBQyxLQUFLLEVBQUU7Ozs7MkNBQ1YsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7Ozs7MkNBQ3BCLEVBQUUsQ0FBQyxLQUFLLEVBQUU7Ozs7Ozs7R0FDakIsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyx5Q0FBeUMsRUFBRTtRQUN4QyxFQUFFOzs7OzsyQ0FBUyxNQUFNLENBQUMsY0FBYyxDQUFDLHVDQUF1QyxDQUFDOzs7QUFBekUsWUFBRTs7MkNBQ0EsRUFBRSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQzs7OzsyQ0FDbkMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQzs7OzsyQ0FDaEQsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQzs7OzsyQ0FDM0IsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDOzs7OzJDQUNuRCxFQUFFLENBQUMsS0FBSyxFQUFFOzs7Ozs7O0dBQ2pCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsMkJBQTJCLEVBQUU7UUFDMUIsY0FBYyxFQUVaLFVBQVU7Ozs7OzJDQUZXLE1BQU0sQ0FBQyxjQUFjLENBQUMsdUNBQXVDLENBQUM7OztBQUFyRix3QkFBYzs7MkNBQ1osY0FBYyxDQUFDLEtBQUssRUFBRTs7O0FBQ3RCLG9CQUFVLEdBQUcsQ0FDakIsRUFBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxHQUFRLEVBQUMsRUFDdEMsRUFBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUMsRUFDakMsRUFBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUMsRUFDL0IsRUFBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUMsRUFDakMsRUFBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUMsRUFDL0IsRUFBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUMsRUFDbkMsRUFBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxHQUFRLEVBQUMsRUFDcEMsRUFBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUMsRUFDakMsRUFBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUMsRUFDL0IsRUFBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUMsRUFDakMsRUFBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUMsQ0FDaEM7OzJDQUNLLGNBQWMsQ0FBQyxVQUFVLENBQUM7Ozs7MkNBQzFCLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7Ozs7MkNBQ3JELGNBQWMsQ0FBQyxLQUFLLEVBQUU7Ozs7Ozs7R0FDN0IsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy9rZXlib2FyZC1lMmUtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3JlcXVlc3QtcHJvbWlzZSc7XG5pbXBvcnQgeyBpbml0U2Vzc2lvbiwgZGVsZXRlU2Vzc2lvbiwgTU9DSEFfVElNRU9VVCwgSE9TVCwgUE9SVCB9IGZyb20gJy4uL2hlbHBlcnMvc2Vzc2lvbic7XG5pbXBvcnQgeyBBUElERU1PX0NBUFMgfSBmcm9tICcuLi9kZXNpcmVkJztcblxuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5cbmRlc2NyaWJlKCdrZXlib2FyZCcsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy50aW1lb3V0KE1PQ0hBX1RJTUVPVVQpO1xuXG4gIGxldCBpZENvdW50ZXIgPSAwO1xuXG4gIGNvbnN0IHBlcmZvcm1BY3Rpb25zID0gYXN5bmMgZnVuY3Rpb24gKC4uLmFjdGlvbnNBcnJheXMpIHtcbiAgICBjb25zdCBhY3Rpb25zUm9vdCA9IFtdO1xuXG4gICAgZm9yIChsZXQgYWN0aW9ucyBvZiBhY3Rpb25zQXJyYXlzKSB7XG4gICAgICBhY3Rpb25zUm9vdC5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2tleScsXG4gICAgICAgIGlkOiBgaWRfJHtpZENvdW50ZXIrK31gLFxuICAgICAgICBhY3Rpb25zLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IHNlc3Npb25JZCA9IGF3YWl0IGRyaXZlci5nZXRTZXNzaW9uSWQoKTtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICB1cmk6IGBodHRwOi8vJHtIT1NUfToke1BPUlR9L3dkL2h1Yi9zZXNzaW9uLyR7c2Vzc2lvbklkfS9hY3Rpb25zYCxcbiAgICAgIGJvZHk6IHthY3Rpb25zOiBhY3Rpb25zUm9vdH0sXG4gICAgICBqc29uOiB0cnVlLFxuICAgIH07XG4gICAgcmV0dXJuIHJlcXVlc3Qob3B0aW9ucyk7XG4gIH07XG5cbiAgbGV0IGRyaXZlcjtcbiAgYmVmb3JlKGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgY2FwcyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgYXBwQWN0aXZpdHk6ICdpby5hcHBpdW0uYW5kcm9pZC5hcGlzLnZpZXcuQXV0b0NvbXBsZXRlNCdcbiAgICB9LCBBUElERU1PX0NBUFMpO1xuICAgIGRyaXZlciA9IGF3YWl0IGluaXRTZXNzaW9uKGNhcHMpO1xuICB9KTtcbiAgYWZ0ZXIoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGF3YWl0IGRlbGV0ZVNlc3Npb24oKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBzZW5kIGtleXMgdG8gdGhlIGNvcnJlY3QgZWxlbWVudCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZWwgPSBhd2FpdCBkcml2ZXIuZWxlbWVudEJ5WFBhdGgoJy8vYW5kcm9pZC53aWRnZXQuQXV0b0NvbXBsZXRlVGV4dFZpZXcnKTtcbiAgICBhd2FpdCBlbC5jbGljaygpO1xuICAgIGF3YWl0IGVsLnNlbmRLZXlzKCdoZWxsbycpO1xuICAgIGF3YWl0IGVsLmNsZWFyKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgc2VuZCBrZXlzIHRvIHRoZSBjb3JyZWN0IGVsZW1lbnQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGVsID0gYXdhaXQgZHJpdmVyLmVsZW1lbnRCeVhQYXRoKCcvL2FuZHJvaWQud2lkZ2V0LkF1dG9Db21wbGV0ZVRleHRWaWV3Jyk7XG4gICAgYXdhaXQgZWwuc2V0SW1tZWRpYXRlVmFsdWUoJ2hlbGxvIHdvcmxkJyk7XG4gICAgYXdhaXQgZWwudGV4dCgpLnNob3VsZC5ldmVudHVhbGx5LmVxdWFsKCdoZWxsbyB3b3JsZCcpO1xuICAgIGF3YWl0IGVsLnNldEltbWVkaWF0ZVZhbHVlKCchISEnKTtcbiAgICBhd2FpdCBlbC50ZXh0KCkuc2hvdWxkLmV2ZW50dWFsbHkuZXF1YWwoJ2hlbGxvIHdvcmxkISEhJyk7XG4gICAgYXdhaXQgZWwuY2xlYXIoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBwZXJmb3JtIGtleSBldmVudHMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGF1dG9jb21wbGV0ZUVsID0gYXdhaXQgZHJpdmVyLmVsZW1lbnRCeVhQYXRoKFwiLy9hbmRyb2lkLndpZGdldC5BdXRvQ29tcGxldGVUZXh0Vmlld1wiKTtcbiAgICBhd2FpdCBhdXRvY29tcGxldGVFbC5jbGljaygpO1xuICAgIGNvbnN0IGtleUFjdGlvbnMgPSBbXG4gICAgICB7XCJ0eXBlXCI6IFwia2V5RG93blwiLCBcInZhbHVlXCI6IFwiXFx1RTAwOFwifSxcbiAgICAgIHtcInR5cGVcIjogXCJrZXlEb3duXCIsIFwidmFsdWVcIjogXCJoXCJ9LFxuICAgICAge1widHlwZVwiOiBcImtleVVwXCIsIFwidmFsdWVcIjogXCJoXCJ9LFxuICAgICAge1widHlwZVwiOiBcImtleURvd25cIiwgXCJ2YWx1ZVwiOiBcImFcIn0sXG4gICAgICB7XCJ0eXBlXCI6IFwia2V5VXBcIiwgXCJ2YWx1ZVwiOiBcImFcIn0sXG4gICAgICB7XCJ0eXBlXCI6IFwicGF1c2VcIiwgXCJkdXJhdGlvblwiOiAyMDAwfSxcbiAgICAgIHtcInR5cGVcIjogXCJrZXlVcFwiLCBcInZhbHVlXCI6IFwiXFx1RTAwOFwifSxcbiAgICAgIHtcInR5cGVcIjogXCJrZXlEb3duXCIsIFwidmFsdWVcIjogXCJ0XCJ9LFxuICAgICAge1widHlwZVwiOiBcImtleVVwXCIsIFwidmFsdWVcIjogXCJ0XCJ9LFxuICAgICAge1widHlwZVwiOiBcImtleURvd25cIiwgXCJ2YWx1ZVwiOiBcIlNcIn0sXG4gICAgICB7XCJ0eXBlXCI6IFwia2V5VXBcIiwgXCJ2YWx1ZVwiOiBcIlNcIn0sXG4gICAgXTtcbiAgICBhd2FpdCBwZXJmb3JtQWN0aW9ucyhrZXlBY3Rpb25zKTtcbiAgICBhd2FpdCBhdXRvY29tcGxldGVFbC50ZXh0KCkuc2hvdWxkLmV2ZW50dWFsbHkuZXF1YWwoJ0hBdFMnKTtcbiAgICBhd2FpdCBhdXRvY29tcGxldGVFbC5jbGVhcigpO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
