'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumSdb = require('appium-sdb');

var _appiumSdb2 = _interopRequireDefault(_appiumSdb);

var helpers = {};

helpers.getDeviceInfoFromCaps = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var sdb, udid, emPort, status, result, devices, i;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSdb2['default'].createSDB({
          sdbPort: opts.sdbPort
        }));

      case 2:
        sdb = context$1$0.sent;
        udid = undefined;

        if (opts.udid) {
          udid = opts.udid;
        } else {
          udid = opts.deviceName;
        }

        emPort = null;
        status = false;

        if (!(udid.indexOf("192.168.250.250") > -1 || udid.indexOf("192.168.1.11") > -1)) {
          context$1$0.next = 12;
          break;
        }

        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(sdb.ConnectDevice(udid));

      case 10:
        result = context$1$0.sent;

        if (result) {
          udid = udid + ":26101";
        }

      case 12:

        _logger2['default'].info("Retrieving device list");

        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(sdb.getDevicesWithRetry());

      case 15:
        devices = context$1$0.sent;

        if (devices.length > 1) {
          for (i = 0; i < devices.length; i++) {
            if (udid === devices[i].udid) {
              status = true;
            }
          }
        }
        if (!status) {
          udid = devices[0].udid;
        }
        emPort = sdb.getPortFromEmulatorString(udid);

        _logger2['default'].info('Using device: ' + udid);
        return context$1$0.abrupt('return', { udid: udid, emPort: emPort });

      case 21:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.createSDB = function callee$0$0(udid, emPort, sdbPort, suppressKillServer) {
  var sdb;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSdb2['default'].createSDB({ sdbPort: sdbPort, suppressKillServer: suppressKillServer }));

      case 2:
        sdb = context$1$0.sent;

        sdb.setDeviceId(udid);
        if (emPort) {
          sdb.setEmulatorPort(emPort);
        }

        return context$1$0.abrupt('return', sdb);

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.truncateDecimals = function (number, digits) {
  var multiplier = Math.pow(10, digits);
  var adjustedNum = number * multiplier;
  var truncatedNum = Math[adjustedNum < 0 ? 'ceil' : 'floor'](adjustedNum);

  return truncatedNum / multiplier;
};

helpers.removeNullProperties = function (obj) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(_lodash2['default'].keys(obj)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;

      if (_lodash2['default'].isNull(obj[key]) || _lodash2['default'].isUndefined(obj[key])) {
        delete obj[key];
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

exports['default'] = helpers;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFXLEdBQUcsQ0FBQyxHQUFHLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQzs7QUFFekUsU0FBTyxZQUFZLEdBQUcsVUFBVSxDQUFDO0NBQ2xDLENBQUM7O0FBRUYsT0FBTyxDQUFDLG9CQUFvQixHQUFHLFVBQVUsR0FBRyxFQUFFOzs7Ozs7QUFDNUMsc0NBQWdCLG9CQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsNEdBQUU7VUFBcEIsR0FBRzs7QUFDVixVQUFJLG9CQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxvQkFBRSxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7QUFDakQsZUFBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7T0FDakI7S0FDRjs7Ozs7Ozs7Ozs7Ozs7O0NBQ0YsQ0FBQzs7cUJBRWEsT0FBTyIsImZpbGUiOiJsaWIvdGl6ZW4taGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBTREIgZnJvbSAnYXBwaXVtLXNkYic7XG5cbmxldCBoZWxwZXJzID0ge307XG5cbmhlbHBlcnMuZ2V0RGV2aWNlSW5mb0Zyb21DYXBzID0gYXN5bmMgZnVuY3Rpb24gKG9wdHMgPSB7fSkge1xuICBsZXQgc2RiID0gYXdhaXQgU0RCLmNyZWF0ZVNEQih7XG4gICAgc2RiUG9ydDogb3B0cy5zZGJQb3J0XG4gIH0pO1xuICBsZXQgdWRpZDtcbiAgaWYgKG9wdHMudWRpZCkge1xuICAgIHVkaWQgPSBvcHRzLnVkaWQ7XG4gIH0gZWxzZSB7XG4gICAgdWRpZCA9IG9wdHMuZGV2aWNlTmFtZTtcbiAgfVxuXG4gIGxldCBlbVBvcnQgPSBudWxsO1xuICBsZXQgc3RhdHVzID0gZmFsc2U7XG5cbiAgaWYgKHVkaWQuaW5kZXhPZihcIjE5Mi4xNjguMjUwLjI1MFwiKSA+IC0xIHx8IHVkaWQuaW5kZXhPZihcIjE5Mi4xNjguMS4xMVwiKSA+IC0xKSB7XG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHNkYi5Db25uZWN0RGV2aWNlKHVkaWQpO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHVkaWQgPSB1ZGlkICsgXCI6MjYxMDFcIjtcbiAgICB9XG4gIH1cblxuICBsb2dnZXIuaW5mbyhcIlJldHJpZXZpbmcgZGV2aWNlIGxpc3RcIik7XG5cbiAgbGV0IGRldmljZXMgPSBhd2FpdCBzZGIuZ2V0RGV2aWNlc1dpdGhSZXRyeSgpO1xuICBpZiAoZGV2aWNlcy5sZW5ndGggPiAxKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXZpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodWRpZCA9PT0gZGV2aWNlc1tpXS51ZGlkKSB7XG4gICAgICAgIHN0YXR1cyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghc3RhdHVzKSB7XG4gICAgdWRpZCA9IGRldmljZXNbMF0udWRpZDtcbiAgfVxuICBlbVBvcnQgPSBzZGIuZ2V0UG9ydEZyb21FbXVsYXRvclN0cmluZyh1ZGlkKTtcblxuICBsb2dnZXIuaW5mbyhgVXNpbmcgZGV2aWNlOiAke3VkaWR9YCk7XG4gIHJldHVybiB7IHVkaWQsIGVtUG9ydCB9O1xufTtcblxuaGVscGVycy5jcmVhdGVTREIgPSBhc3luYyBmdW5jdGlvbiAodWRpZCwgZW1Qb3J0LCBzZGJQb3J0LCBzdXBwcmVzc0tpbGxTZXJ2ZXIpIHtcbiAgbGV0IHNkYiA9IGF3YWl0IFNEQi5jcmVhdGVTREIoe3NkYlBvcnQsIHN1cHByZXNzS2lsbFNlcnZlcn0pO1xuXG4gIHNkYi5zZXREZXZpY2VJZCh1ZGlkKTtcbiAgaWYgKGVtUG9ydCkge1xuICAgIHNkYi5zZXRFbXVsYXRvclBvcnQoZW1Qb3J0KTtcbiAgfVxuXG4gIHJldHVybiBzZGI7XG59O1xuXG5oZWxwZXJzLnRydW5jYXRlRGVjaW1hbHMgPSBmdW5jdGlvbiAobnVtYmVyLCBkaWdpdHMpIHtcbiAgbGV0IG11bHRpcGxpZXIgPSBNYXRoLnBvdygxMCwgZGlnaXRzKTtcbiAgbGV0IGFkanVzdGVkTnVtID0gbnVtYmVyICogbXVsdGlwbGllcjtcbiAgbGV0IHRydW5jYXRlZE51bSA9IE1hdGhbYWRqdXN0ZWROdW0gPCAwID8gJ2NlaWwnIDogJ2Zsb29yJ10oYWRqdXN0ZWROdW0pO1xuXG4gIHJldHVybiB0cnVuY2F0ZWROdW0gLyBtdWx0aXBsaWVyO1xufTtcblxuaGVscGVycy5yZW1vdmVOdWxsUHJvcGVydGllcyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgZm9yIChsZXQga2V5IG9mIF8ua2V5cyhvYmopKSB7XG4gICAgaWYgKF8uaXNOdWxsKG9ialtrZXldKSB8fCBfLmlzVW5kZWZpbmVkKG9ialtrZXldKSkge1xuICAgICAgZGVsZXRlIG9ialtrZXldO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgaGVscGVycztcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
