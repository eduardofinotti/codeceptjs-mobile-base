'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _net = require('net');

var _net2 = _interopRequireDefault(_net);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _commandsIndex = require('./commands/index');

var _commandsIndex2 = _interopRequireDefault(_commandsIndex);

var _appiumBaseDriver = require('appium-base-driver');

var _asyncbox = require('asyncbox');

var _teen_process = require('teen_process');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var COMMAND_TYPES = {
  ACTION: 'action',
  SHUTDOWN: 'shutdown'
};

var TizenBootstrap = (function () {
  function TizenBootstrap(sdb) {
    var systemPort = arguments.length <= 1 || arguments[1] === undefined ? 8888 : arguments[1];
    var webSocket = arguments.length <= 2 || arguments[2] === undefined ? undefined : arguments[2];

    _classCallCheck(this, TizenBootstrap);

    this.appPackage;
    this.sdb = sdb;
    this.systemPort = systemPort;
    this.webSocket = webSocket;
    this.ignoreUnexpectedShutdown = false;
    this.isUiAutomatorInstalled = false;
    this.uiautomator = 'uiautomator';
    this.isRestartApp = false;

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _getIterator(_lodash2['default'].pairs(_commandsIndex2['default'])), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _step$value = _slicedToArray(_step.value, 2);

        var cmd = _step$value[0];
        var fn = _step$value[1];

        TizenBootstrap.prototype[cmd] = fn;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  _createClass(TizenBootstrap, [{
    key: 'start',
    value: function start(appPackage) {
      return _regeneratorRuntime.async(function start$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.appPackage = appPackage;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.init());

          case 3:
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.sdb.forwardPort(this.systemPort, 8888));

          case 5:
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(6000));

          case 7:
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.connectSocket());

          case 9:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'connectSocket',
    value: function connectSocket() {
      return _regeneratorRuntime.async(function connectSocket$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(new _Promise(function (resolve, reject) {
              try {
                if (!_this.socketClient) {
                  _this.socketClient = _net2['default'].connect(_this.systemPort);
                  _this.socketClient.setEncoding('utf8');
                  _this.socketClient.on('error', function (err) {
                    if (!_this.ignoreUnexpectedShutdown) {
                      throw new Error('Tizen bootstrap socket crashed: ' + err);
                    }
                  });
                  _this.socketClient.once('connect', function () {
                    _logger2['default'].info("Tizen bootstrap socket is now connected");
                    resolve();
                  });
                } else {
                  _logger2['default'].info("SocketClient already Created");
                  resolve();
                }
              } catch (err) {
                reject(err);
              }
            }));

          case 3:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 6:
            context$2$0.prev = 6;
            context$2$0.t0 = context$2$0['catch'](0);

            _logger2['default'].errorAndThrow('Error occured while reconnection TizenBootstrap. Original error: ' + context$2$0.t0);

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 6]]);
    }
  }, {
    key: 'sendCommand',
    value: function sendCommand(type) {
      var extra = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var isStartedApp;
      return _regeneratorRuntime.async(function sendCommand$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(this.appPackage && type !== COMMAND_TYPES.SHUTDOWN)) {
              context$2$0.next = 14;
              break;
            }

            if (!this.isRestartApp) {
              context$2$0.next = 5;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(5000));

          case 4:
            this.isRestartApp = false;

          case 5:
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.sdb.isStartedApp(this.appPackage));

          case 7:
            isStartedApp = context$2$0.sent;

            if (isStartedApp) {
              context$2$0.next = 14;
              break;
            }

            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.sdb.startApp(this.appPackage));

          case 11:
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(3000));

          case 13:
            this.isRestartApp = false;

          case 14:
            if (this.socketClient) {
              context$2$0.next = 17;
              break;
            }

            context$2$0.next = 17;
            return _regeneratorRuntime.awrap(this.connectSocket());

          case 17:
            context$2$0.next = 19;
            return _regeneratorRuntime.awrap(new _Promise(function (resolve, reject) {
              var cmd = _Object$assign({ cmd: type }, extra);
              var cmdJson = JSON.stringify(cmd) + ' \n';
              _logger2['default'].debug('Sending command to tizen: ' + _lodash2['default'].trunc(cmdJson, 1000).trim());

              try {
                _this2.socketClient.removeAllListeners('timeout');
                _this2.socketClient.removeAllListeners('end');
                _this2.socketClient.write(cmdJson);
                _this2.socketClient.on('data', function (data) {
                  var streamData = '';
                  _logger2['default'].debug("Received command result from bootstrap : " + data);
                  try {
                    streamData = JSON.parse(streamData + data);
                    _this2.socketClient.removeAllListeners('data');
                    if (streamData.status === 0) {
                      resolve(streamData.value);
                    }
                    reject((0, _appiumBaseDriver.errorFromCode)(streamData.status));
                  } catch (ign) {
                    _logger2['default'].debug("Stream still not complete, waiting");
                    streamData += data;
                  }
                });
                _this2.socketClient.setTimeout(15000);
                _this2.socketClient.on('timeout', function () {
                  _this2.socketClient.destroy();
                  _this2.socketClient = null;
                  _this2.isRestartApp = true;
                  reject((0, _appiumBaseDriver.errorFromCode)(-1, "No response from Server"));
                });
                _this2.socketClient.on('end', function () {
                  _this2.socketClient.destroy();
                  _this2.socketClient = null;
                  _this2.isRestartApp = true;
                  reject((0, _appiumBaseDriver.errorFromCode)(-1, "Socket ended by Server"));
                });
              } catch (err) {
                reject((0, _appiumBaseDriver.errorFromCode)(-1, err));
              }
            }));

          case 19:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 20:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'sendAction',
    value: function sendAction(action) {
      var params = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var extra;
      return _regeneratorRuntime.async(function sendAction$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            extra = { action: action, params: params };
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.sendCommand(COMMAND_TYPES.ACTION, extra));

          case 3:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'sendInputAction',
    value: function sendInputAction(action) {
      var params = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
      var actions, actionPath, i;
      return _regeneratorRuntime.async(function sendInputAction$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (action === 'touchDown') {
              action = 'down';
            } else if (action === 'touchUp') {
              action = 'up';
            } else if (action === 'touchMove') {
              action = 'move';
            }

            actions = [];
            actionPath = "dbus-send --system --type=signal /org/tizen/appium org.tizen.appium.Input";

            actions.push(actionPath);
            actions.push('string:\'' + action + '\'');

            for (i = 0; i < params.length; i++) {
              if (params[i]) {
                actions.push('string:\'' + params[i] + '\'');
              } else if (params[i] === 0) {
                actions.push('string:\'' + params[i] + '\'');
              } else {
                actions.push("string:'null'");
              }
            }

            if (params.length === 0) {
              actions.push("string:'null'");
              actions.push("string:'null'");
            } else if (params.length === 1) {
              actions.push("string:'null'");
            }

            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.sdb.shell(actions));

          case 9:
            return context$2$0.abrupt('return', true);

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'shutdown',
    value: function shutdown() {
      var uiautomatorStatus;
      return _regeneratorRuntime.async(function shutdown$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.socketClient) {
              this.socketClient.end();
              this.socketClient.destroy();
              this.socketClient = null;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.sdb.processExists(this.uiautomator));

          case 3:
            uiautomatorStatus = context$2$0.sent;

            if (!uiautomatorStatus) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.sdb.killProcess(this.uiautomator));

          case 7:
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.sdb.removePortForward(this.systemPort));

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'init',
    value: function init() {
      var uiautomatorStatus;
      return _regeneratorRuntime.async(function init$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.sdb.root());

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.sdb.fileExists('/usr/bin/' + this.uiautomator));

          case 4:
            this.isUiAutomatorInstalled = context$2$0.sent;

            if (this.isUiAutomatorInstalled) {
              context$2$0.next = 8;
              break;
            }

            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.pushUiAutomator());

          case 8:
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.sdb.processExists(this.uiautomator));

          case 10:
            uiautomatorStatus = context$2$0.sent;

            if (uiautomatorStatus) {
              context$2$0.next = 15;
              break;
            }

            (0, _teen_process.exec)(this.sdb.executable.path, ['shell', '/usr/bin/' + this.uiautomator]);
            context$2$0.next = 20;
            break;

          case 15:
            context$2$0.next = 17;
            return _regeneratorRuntime.awrap(this.sdb.killProcess(this.uiautomator));

          case 17:
            context$2$0.next = 19;
            return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(1000));

          case 19:
            (0, _teen_process.exec)(this.sdb.executable.path, ['shell', '/usr/bin/' + this.uiautomator]);

          case 20:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'pushUiAutomator',
    value: function pushUiAutomator() {
      var arch, file;
      return _regeneratorRuntime.async(function pushUiAutomator$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.sdb.shell('uname -a'));

          case 2:
            arch = context$2$0.sent;
            file = this.uiautomator;

            if (arch.indexOf('i686') != -1) {
              file += '_i586';
            } else if (arch.indexOf('x86_64') != -1) {
              file += '_x86_64';
            } else {
              file += '_armv7l';
            }

            _logger2['default'].debug('Target Architecture : ' + arch);
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.sdb.push(__dirname + ('/../' + file), '/usr/bin/' + this.uiautomator));

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'removeUiAutomator',
    value: function removeUiAutomator() {
      return _regeneratorRuntime.async(function removeUiAutomator$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.sdb.shell('rm /usr/bin/uiautomator'));

          case 2:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'ignoreUnexpectedShutdown',
    set: function set(ignore) {
      _logger2['default'].debug((ignore ? 'Ignoring' : 'Watching for') + ' bootstrap disconnect');
      this._ignoreUnexpectedShutdown = ignore;
    },
    get: function get() {
      return this._ignoreUnexpectedShutdown;
    }
  }]);

  return TizenBootstrap;
})();

exports.TizenBootstrap = TizenBootstrap;
exports.COMMAND_TYPES = COMMAND_TYPES;
exports['default'] = TizenBootstrap;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
