'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumSupport = require('appium-support');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _jimp = require('jimp');

var _jimp2 = _interopRequireDefault(_jimp);

var swipeStepsPerSec = 28;

var commands = {},
    extensions = {};

commands.pressKeyCode = function callee$0$0(keycode) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.bootstrap.sendAction("pressKeyCode", { keycode: keycode }));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.keys = function callee$0$0(keys) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        keys = _lodash2['default'].isArray(keys) ? keys.join('') : keys;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.inputText(keys));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.flick = function callee$0$0(element, xSpeed, ySpeed, xOffset, yOffset, speed) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!element) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.fakeFlickElement(element, xOffset, yOffset, speed));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.fakeFlick(xSpeed, ySpeed));

      case 8:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.fakeFlick = function callee$0$0(xSpeed, ySpeed) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.bootstrap.sendInputAction('flick', [xSpeed, ySpeed]));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.fakeFlickElement = function callee$0$0(elementId, xoffset, yoffset, speed) {
  var steps, xStart, yStart, _location, xEnd, yEnd, params;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        steps = 1250.0 / speed + 1;
        xStart = 1;
        yStart = 1;

        if (elementId === this.sessionId) {
          elementId = null;
        }

        if (!elementId) {
          context$1$0.next = 10;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.getLocationValueByElementId(elementId));

      case 7:
        _location = context$1$0.sent;

        xStart = _location[0];
        yStart = _location[1];

      case 10:
        xEnd = xStart + xoffset;
        yEnd = yStart + yoffset;
        params = [xStart, yStart, xEnd, yEnd, steps];
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(this.doSwipe(params));

      case 15:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.swipe = function callee$0$0(startX, startY, endX, endY, duration) {
  var swipeOpts;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (startX === 'null') {
          startX = 1;
        }
        if (startY === 'null') {
          startY = 1;
        }
        swipeOpts = [startX, startY, endX, endY, Math.round(duration * swipeStepsPerSec)];
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.doSwipe(swipeOpts));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.doSwipe = function callee$0$0(swipeOpts) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.bootstrap.sendInputAction("swipe", swipeOpts));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.pullFile = function callee$0$0(remotePath) {
  var rootDir, filePath, localFile, data, b64data;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        rootDir = _path2['default'].resolve(__dirname, '..', '..');
        filePath = _path2['default'].resolve(rootDir, 'file');
        localFile = filePath + '/appiumfile.tmp';
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.sdb.pull(remotePath, localFile));

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(localFile));

      case 7:
        data = context$1$0.sent;
        b64data = new Buffer(data).toString('base64');
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(localFile));

      case 11:
        if (!context$1$0.sent) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(localFile));

      case 14:
        return context$1$0.abrupt('return', b64data);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

function takeScreenShot(sdb) {
  return _regeneratorRuntime.async(function takeScreenShot$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(sdb.takeScreenShot());

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getScreenshotData(sdb) {
  var rootDir, filePath, localFile, pngDir, png;
  return _regeneratorRuntime.async(function getScreenshotData$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        rootDir = _path2['default'].resolve(__dirname, '..', '..');
        filePath = _path2['default'].resolve(rootDir, 'file');
        localFile = filePath + '/screenShot.tmp';
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(localFile));

      case 5:
        if (!context$1$0.sent) {
          context$1$0.next = 8;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(localFile));

      case 8:
        context$1$0.prev = 8;
        pngDir = '/tmp/';
        png = _path2['default'].posix.resolve(pngDir, 'dump_screen.png');
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(sdb.pull(png, localFile));

      case 13:
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(_jimp2['default'].read(localFile));

      case 15:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 16:
        context$1$0.prev = 16;
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(localFile));

      case 19:
        if (!context$1$0.sent) {
          context$1$0.next = 22;
          break;
        }

        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(localFile));

      case 22:
        return context$1$0.finish(16);

      case 23:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[8,, 16, 23]]);
}

commands.getScreenshot = function callee$0$0() {
  var result, image, getBuffer, imgBuffer;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(takeScreenShot(this.sdb));

      case 2:
        result = context$1$0.sent;

        if (!result) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(getScreenshotData(this.sdb));

      case 6:
        image = context$1$0.sent;
        getBuffer = _bluebird2['default'].promisify(image.getBuffer, { context: image });
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(getBuffer(_jimp2['default'].MIME_PNG));

      case 10:
        imgBuffer = context$1$0.sent;
        return context$1$0.abrupt('return', imgBuffer.toString('base64'));

      case 14:
        return context$1$0.abrupt('return', null);

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands);
exports.commands = commands;
exports['default'] = extensions;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
