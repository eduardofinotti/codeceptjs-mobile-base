'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _config = require('./config');

var _appiumBaseDriver = require('appium-base-driver');

var _appiumFakeDriver = require('appium-fake-driver');

var _appiumAndroidDriver = require('appium-android-driver');

var _appiumIosDriver = require('appium-ios-driver');

var _appiumUiautomator2Driver = require('appium-uiautomator2-driver');

var _appiumSelendroidDriver = require('appium-selendroid-driver');

var _appiumXcuitestDriver = require('appium-xcuitest-driver');

var _appiumYouiengineDriver = require('appium-youiengine-driver');

var _appiumWindowsDriver = require('appium-windows-driver');

var _appiumMacDriver = require('appium-mac-driver');

var _appiumEspressoDriver = require('appium-espresso-driver');

var _appiumTizenDriver = require('appium-tizen-driver');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _asyncLock = require('async-lock');

var _asyncLock2 = _interopRequireDefault(_asyncLock);

var _utils = require('./utils');

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var AUTOMATION_NAMES = {
  APPIUM: 'Appium',
  SELENDROID: 'Selendroid',
  UIAUTOMATOR2: 'UiAutomator2',
  XCUITEST: 'XCUITest',
  YOUIENGINE: 'YouiEngine',
  ESPRESSO: 'Espresso',
  TIZEN: 'Tizen',
  FAKE: 'Fake'
};
var DRIVER_MAP = {
  SelendroidDriver: {
    driverClass: _appiumSelendroidDriver.SelendroidDriver,
    automationName: AUTOMATION_NAMES.SELENDROID,
    version: (0, _utils.getPackageVersion)('appium-selendroid-driver')
  },
  AndroidUiautomator2Driver: {
    driverClass: _appiumUiautomator2Driver.AndroidUiautomator2Driver,
    automationName: AUTOMATION_NAMES.UIAUTOMATOR2,
    version: (0, _utils.getPackageVersion)('appium-uiautomator2-driver')
  },
  XCUITestDriver: {
    driverClass: _appiumXcuitestDriver.XCUITestDriver,
    automationName: AUTOMATION_NAMES.XCUITEST,
    version: (0, _utils.getPackageVersion)('appium-xcuitest-driver')
  },
  YouiEngineDriver: {
    driverClass: _appiumYouiengineDriver.YouiEngineDriver,
    automationName: AUTOMATION_NAMES.YOUIENGINE,
    version: (0, _utils.getPackageVersion)('appium-youiengine-driver')
  },
  FakeDriver: {
    driverClass: _appiumFakeDriver.FakeDriver,
    version: (0, _utils.getPackageVersion)('appium-fake-driver')
  },
  AndroidDriver: {
    driverClass: _appiumAndroidDriver.AndroidDriver,
    version: (0, _utils.getPackageVersion)('appium-android-driver')
  },
  IosDriver: {
    driverClass: _appiumIosDriver.IosDriver,
    version: (0, _utils.getPackageVersion)('appium-ios-driver')
  },
  WindowsDriver: {
    driverClass: _appiumWindowsDriver.WindowsDriver,
    version: (0, _utils.getPackageVersion)('appium-windows-driver')
  },
  MacDriver: {
    driverClass: _appiumMacDriver.MacDriver,
    version: (0, _utils.getPackageVersion)('appium-mac-driver')
  },
  EspressoDriver: {
    driverClass: _appiumEspressoDriver.EspressoDriver,
    automationName: AUTOMATION_NAMES.ESPRESSO,
    version: (0, _utils.getPackageVersion)('appium-espresso-driver')
  },
  TizenDriver: {
    driverClass: _appiumTizenDriver.TizenDriver,
    automationName: AUTOMATION_NAMES.TIZEN,
    version: (0, _utils.getPackageVersion)('appium-tizen-driver')
  }
};

var PLATFORMS_MAP = {
  fake: function fake() {
    return _appiumFakeDriver.FakeDriver;
  },
  android: function android(caps) {
    var platformVersion = _semver2['default'].valid(_semver2['default'].coerce(caps.platformVersion));
    if (platformVersion && _semver2['default'].satisfies(platformVersion, '>=6.0.0')) {
      _logger2['default'].warn("Consider setting 'automationName' capability to " + ('\'' + AUTOMATION_NAMES.UIAUTOMATOR2 + '\' ') + "on Android >= 6, since UIAutomator framework " + "is not maintained anymore by the OS vendor.");
    }

    return _appiumAndroidDriver.AndroidDriver;
  },
  ios: function ios(caps) {
    var platformVersion = _semver2['default'].valid(_semver2['default'].coerce(caps.platformVersion));
    if (platformVersion && _semver2['default'].satisfies(platformVersion, '>=10.0.0')) {
      _logger2['default'].info("Requested iOS support with version >= 10, " + ('using \'' + AUTOMATION_NAMES.XCUITEST + '\' ') + "driver instead of UIAutomation-based driver, since the " + "latter is unsupported on iOS 10 and up.");
      return _appiumXcuitestDriver.XCUITestDriver;
    }

    return _appiumIosDriver.IosDriver;
  },
  windows: function windows() {
    return _appiumWindowsDriver.WindowsDriver;
  },
  mac: function mac() {
    return _appiumMacDriver.MacDriver;
  },
  tizen: function tizen() {
    return _appiumTizenDriver.TizenDriver;
  }
};

var desiredCapabilityConstraints = {
  automationName: {
    presence: false,
    isString: true,
    inclusionCaseInsensitive: _lodash2['default'].values(AUTOMATION_NAMES)
  },
  platformName: {
    presence: true,
    isString: true,
    inclusionCaseInsensitive: _lodash2['default'].keys(PLATFORMS_MAP)
  }
};

var sessionsListGuard = new _asyncLock2['default']();
var pendingDriversGuard = new _asyncLock2['default']();

var AppiumDriver = (function (_BaseDriver) {
  _inherits(AppiumDriver, _BaseDriver);

  function AppiumDriver(args) {
    _classCallCheck(this, AppiumDriver);

    _get(Object.getPrototypeOf(AppiumDriver.prototype), 'constructor', this).call(this);

    this.desiredCapConstraints = desiredCapabilityConstraints;

    // the main Appium Driver has no new command timeout
    this.newCommandTimeoutMs = 0;

    this.args = _Object$assign({}, args);

    // Access to sessions list must be guarded with a Semaphore, because
    // it might be changed by other async calls at any time
    // It is not recommended to access this property directly from the outside
    this.sessions = {};

    // Access to pending drivers list must be guarded with a Semaphore, because
    // it might be changed by other async calls at any time
    // It is not recommended to access this property directly from the outside
    this.pendingDrivers = {};
  }

  // help decide which commands should be proxied to sub-drivers and which
  // should be handled by this, our umbrella driver

  /**
   * Cancel commands queueing for the umbrella Appium driver
   */

  _createClass(AppiumDriver, [{
    key: 'sessionExists',
    value: function sessionExists(sessionId) {
      var dstSession = this.sessions[sessionId];
      return dstSession && dstSession.sessionId !== null;
    }
  }, {
    key: 'driverForSession',
    value: function driverForSession(sessionId) {
      return this.sessions[sessionId];
    }
  }, {
    key: 'getDriverForCaps',
    value: function getDriverForCaps(caps) {
      if (!_lodash2['default'].isString(caps.platformName)) {
        throw new Error("You must include a platformName capability");
      }

      // we don't necessarily have an `automationName` capability,
      if (_lodash2['default'].isString(caps.automationName)) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _getIterator(_lodash2['default'].values(DRIVER_MAP)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = _step.value;
            var automationName = _step$value.automationName;
            var driverClass = _step$value.driverClass;

            if (_lodash2['default'].toLower(automationName) === caps.automationName.toLowerCase()) {
              return driverClass;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      var driverSelector = PLATFORMS_MAP[caps.platformName.toLowerCase()];
      if (driverSelector) {
        return driverSelector(caps);
      }

      var msg = _lodash2['default'].isString(caps.automationName) ? 'Could not find a driver for automationName \'' + caps.automationName + '\' and platformName ' + ('\'' + caps.platformName + '\'.') : 'Could not find a driver for platformName \'' + caps.platformName + '\'.';
      throw new Error(msg + ' Please check your desired capabilities.');
    }
  }, {
    key: 'getDriverVersion',
    value: function getDriverVersion(driver) {
      var _ref = DRIVER_MAP[driver.name] || {};

      var version = _ref.version;

      if (version) {
        return version;
      }
      _logger2['default'].warn('Unable to get version of driver \'' + driver.name + '\'');
    }
  }, {
    key: 'getStatus',
    value: function getStatus() {
      var config, gitSha, status;
      return _regeneratorRuntime.async(function getStatus$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap((0, _config.getAppiumConfig)());

          case 2:
            config = context$2$0.sent;
            gitSha = config['git-sha'];
            status = { build: { version: config.version } };

            if (!_lodash2['default'].isEmpty(gitSha)) {
              status.build.revision = gitSha;
            }
            return context$2$0.abrupt('return', status);

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getSessions',
    value: function getSessions() {
      var sessions;
      return _regeneratorRuntime.async(function getSessions$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(sessionsListGuard.acquire(AppiumDriver.name, function () {
              return _this.sessions;
            }));

          case 2:
            sessions = context$2$0.sent;
            return context$2$0.abrupt('return', _lodash2['default'].toPairs(sessions).map(function (_ref2) {
              var _ref22 = _slicedToArray(_ref2, 2);

              var id = _ref22[0];
              var driver = _ref22[1];

              return { id: id, capabilities: driver.caps };
            }));

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'printNewSessionAnnouncement',
    value: function printNewSessionAnnouncement(driver, caps) {
      var driverVersion = this.getDriverVersion(driver);
      var introString = driverVersion ? 'Creating new ' + driver.name + ' (v' + driverVersion + ') session' : 'Creating new ' + driver.name + ' session';
      _logger2['default'].info(introString);
      _logger2['default'].info('Capabilities:');
      (0, _utils.inspectObject)(caps);
    }

    /**
     * Create a new session
     * @param {Object} jsonwpCaps JSONWP formatted desired capabilities
     * @param {Object} reqCaps Required capabilities (JSONWP standard)
     * @param {Object} w3cCapabilities W3C capabilities
     * @return {Array} Unique session ID and capabilities
     */
  }, {
    key: 'createSession',
    value: function createSession(jsonwpCaps, reqCaps, w3cCapabilities) {
      var defaultCapabilities, protocol, innerSessionId, dCaps;
      return _regeneratorRuntime.async(function createSession$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            defaultCapabilities = this.args.defaultCapabilities;
            protocol = undefined;
            innerSessionId = undefined, dCaps = undefined;
            context$2$0.prev = 3;
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap((function callee$2$0() {
              var parsedCaps, desiredCaps, processedJsonwpCapabilities, processedW3CCapabilities, error, InnerDriver, sessionIdsToDelete, runningDriversData, otherPendingDriversData, d, _ref3, _ref32;

              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                var _this2 = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    parsedCaps = (0, _utils.parseCapsForInnerDriver)(jsonwpCaps, w3cCapabilities, this.desiredCapConstraints, defaultCapabilities);
                    desiredCaps = parsedCaps.desiredCaps;
                    processedJsonwpCapabilities = parsedCaps.processedJsonwpCapabilities;
                    processedW3CCapabilities = parsedCaps.processedW3CCapabilities;
                    error = parsedCaps.error;

                    protocol = parsedCaps.protocol;

                    // If the parsing of the caps produced an error, throw it in here

                    if (!error) {
                      context$3$0.next = 8;
                      break;
                    }

                    throw error;

                  case 8:
                    InnerDriver = this.getDriverForCaps(desiredCaps);

                    this.printNewSessionAnnouncement(InnerDriver, desiredCaps);

                    if (!this.args.sessionOverride) {
                      context$3$0.next = 23;
                      break;
                    }

                    context$3$0.next = 13;
                    return _regeneratorRuntime.awrap(sessionsListGuard.acquire(AppiumDriver.name, function () {
                      return _lodash2['default'].keys(_this2.sessions);
                    }));

                  case 13:
                    sessionIdsToDelete = context$3$0.sent;

                    if (!sessionIdsToDelete.length) {
                      context$3$0.next = 23;
                      break;
                    }

                    _logger2['default'].info('Session override is on. Deleting other ' + sessionIdsToDelete.length + ' active session' + (sessionIdsToDelete.length ? '' : 's') + '.');
                    context$3$0.prev = 16;
                    context$3$0.next = 19;
                    return _regeneratorRuntime.awrap(_bluebird2['default'].map(sessionIdsToDelete, function (id) {
                      return _this2.deleteSession(id);
                    }));

                  case 19:
                    context$3$0.next = 23;
                    break;

                  case 21:
                    context$3$0.prev = 21;
                    context$3$0.t0 = context$3$0['catch'](16);

                  case 23:
                    runningDriversData = undefined, otherPendingDriversData = undefined;
                    d = new InnerDriver(this.args);

                    if (this.args.relaxedSecurityEnabled) {
                      _logger2['default'].info('Applying relaxed security to \'' + InnerDriver.name + '\' as per server command line argument');
                      d.relaxedSecurityEnabled = true;
                    }
                    // This assignment is required for correct web sockets functionality inside the driver
                    d.server = this.server;
                    context$3$0.prev = 27;
                    context$3$0.next = 30;
                    return _regeneratorRuntime.awrap(this.curSessionDataForDriver(InnerDriver));

                  case 30:
                    runningDriversData = context$3$0.sent;
                    context$3$0.next = 36;
                    break;

                  case 33:
                    context$3$0.prev = 33;
                    context$3$0.t1 = context$3$0['catch'](27);
                    throw new _appiumBaseDriver.errors.SessionNotCreatedError(context$3$0.t1.message);

                  case 36:
                    context$3$0.next = 38;
                    return _regeneratorRuntime.awrap(pendingDriversGuard.acquire(AppiumDriver.name, function () {
                      _this2.pendingDrivers[InnerDriver.name] = _this2.pendingDrivers[InnerDriver.name] || [];
                      otherPendingDriversData = _this2.pendingDrivers[InnerDriver.name].map(function (drv) {
                        return drv.driverData;
                      });
                      _this2.pendingDrivers[InnerDriver.name].push(d);
                    }));

                  case 38:
                    context$3$0.prev = 38;
                    context$3$0.next = 41;
                    return _regeneratorRuntime.awrap(d.createSession(processedJsonwpCapabilities, reqCaps, processedW3CCapabilities, [].concat(_toConsumableArray(runningDriversData), _toConsumableArray(otherPendingDriversData))));

                  case 41:
                    _ref3 = context$3$0.sent;
                    _ref32 = _slicedToArray(_ref3, 2);
                    innerSessionId = _ref32[0];
                    dCaps = _ref32[1];

                    protocol = d.protocol;
                    context$3$0.next = 48;
                    return _regeneratorRuntime.awrap(sessionsListGuard.acquire(AppiumDriver.name, function () {
                      _this2.sessions[innerSessionId] = d;
                    }));

                  case 48:
                    context$3$0.prev = 48;
                    context$3$0.next = 51;
                    return _regeneratorRuntime.awrap(pendingDriversGuard.acquire(AppiumDriver.name, function () {
                      _lodash2['default'].pull(_this2.pendingDrivers[InnerDriver.name], d);
                    }));

                  case 51:
                    return context$3$0.finish(48);

                  case 52:

                    // this is an async function but we don't await it because it handles
                    // an out-of-band promise which is fulfilled if the inner driver
                    // unexpectedly shuts down
                    this.attachUnexpectedShutdownHandler(d, innerSessionId);

                    _logger2['default'].info('New ' + InnerDriver.name + ' session created successfully, session ' + (innerSessionId + ' added to master session list'));

                    // set the New Command Timeout for the inner driver
                    d.startNewCommandTimeout();

                  case 55:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this3, [[16, 21], [27, 33], [38,, 48, 52]]);
            })());

          case 6:
            context$2$0.next = 11;
            break;

          case 8:
            context$2$0.prev = 8;
            context$2$0.t0 = context$2$0['catch'](3);
            return context$2$0.abrupt('return', {
              protocol: protocol,
              error: context$2$0.t0
            });

          case 11:
            return context$2$0.abrupt('return', {
              protocol: protocol,
              value: [innerSessionId, dCaps, protocol]
            });

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[3, 8]]);
    }
  }, {
    key: 'attachUnexpectedShutdownHandler',
    value: function attachUnexpectedShutdownHandler(driver, innerSessionId) {
      return _regeneratorRuntime.async(function attachUnexpectedShutdownHandler$(context$2$0) {
        var _this4 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(driver.onUnexpectedShutdown);

          case 3:
            throw new Error('Unexpected shutdown');

          case 6:
            context$2$0.prev = 6;
            context$2$0.t0 = context$2$0['catch'](0);

            if (!(context$2$0.t0 instanceof _bluebird2['default'].CancellationError)) {
              context$2$0.next = 10;
              break;
            }

            return context$2$0.abrupt('return');

          case 10:
            _logger2['default'].warn('Closing session, cause was \'' + context$2$0.t0.message + '\'');
            _logger2['default'].info('Removing session ' + innerSessionId + ' from our master session list');
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(sessionsListGuard.acquire(AppiumDriver.name, function () {
              delete _this4.sessions[innerSessionId];
            }));

          case 14:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 6]]);
    }
  }, {
    key: 'curSessionDataForDriver',
    value: function curSessionDataForDriver(InnerDriver) {
      var sessions, data, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, datum;

      return _regeneratorRuntime.async(function curSessionDataForDriver$(context$2$0) {
        var _this5 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(sessionsListGuard.acquire(AppiumDriver.name, function () {
              return _this5.sessions;
            }));

          case 2:
            sessions = context$2$0.sent;
            data = _lodash2['default'].values(sessions).filter(function (s) {
              return s.constructor.name === InnerDriver.name;
            }).map(function (s) {
              return s.driverData;
            });
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            context$2$0.prev = 7;
            _iterator2 = _getIterator(data);

          case 9:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              context$2$0.next = 16;
              break;
            }

            datum = _step2.value;

            if (datum) {
              context$2$0.next = 13;
              break;
            }

            throw new Error('Problem getting session data for driver type ' + (InnerDriver.name + '; does it implement \'get ') + 'driverData\'?');

          case 13:
            _iteratorNormalCompletion2 = true;
            context$2$0.next = 9;
            break;

          case 16:
            context$2$0.next = 22;
            break;

          case 18:
            context$2$0.prev = 18;
            context$2$0.t0 = context$2$0['catch'](7);
            _didIteratorError2 = true;
            _iteratorError2 = context$2$0.t0;

          case 22:
            context$2$0.prev = 22;
            context$2$0.prev = 23;

            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }

          case 25:
            context$2$0.prev = 25;

            if (!_didIteratorError2) {
              context$2$0.next = 28;
              break;
            }

            throw _iteratorError2;

          case 28:
            return context$2$0.finish(25);

          case 29:
            return context$2$0.finish(22);

          case 30:
            return context$2$0.abrupt('return', data);

          case 31:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[7, 18, 22, 30], [23,, 25, 29]]);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession(sessionId) {
      var protocol, _ret2;

      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        var _this7 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            protocol = undefined;
            context$2$0.prev = 1;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap((function callee$2$0() {
              var otherSessionsData, dstSession;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                var _this6 = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    otherSessionsData = null;
                    dstSession = null;
                    context$3$0.next = 4;
                    return _regeneratorRuntime.awrap(sessionsListGuard.acquire(AppiumDriver.name, function () {
                      if (!_this6.sessions[sessionId]) {
                        return;
                      }
                      var curConstructorName = _this6.sessions[sessionId].constructor.name;
                      otherSessionsData = _lodash2['default'].toPairs(_this6.sessions).filter(function (_ref4) {
                        var _ref42 = _slicedToArray(_ref4, 2);

                        var key = _ref42[0];
                        var value = _ref42[1];
                        return value.constructor.name === curConstructorName && key !== sessionId;
                      }).map(function (_ref5) {
                        var _ref52 = _slicedToArray(_ref5, 2);

                        var value = _ref52[1];
                        return value.driverData;
                      });
                      dstSession = _this6.sessions[sessionId];
                      protocol = dstSession.protocol;
                      _logger2['default'].info('Removing session ' + sessionId + ' from our master session list');
                      // regardless of whether the deleteSession completes successfully or not
                      // make the session unavailable, because who knows what state it might
                      // be in otherwise
                      delete _this6.sessions[sessionId];
                    }));

                  case 4:
                    context$3$0.t0 = protocol;
                    context$3$0.next = 7;
                    return _regeneratorRuntime.awrap(dstSession.deleteSession(sessionId, otherSessionsData));

                  case 7:
                    context$3$0.t1 = context$3$0.sent;
                    context$3$0.t2 = {
                      protocol: context$3$0.t0,
                      value: context$3$0.t1
                    };
                    return context$3$0.abrupt('return', {
                      v: context$3$0.t2
                    });

                  case 10:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this7);
            })());

          case 4:
            _ret2 = context$2$0.sent;

            if (!(typeof _ret2 === 'object')) {
              context$2$0.next = 7;
              break;
            }

            return context$2$0.abrupt('return', _ret2.v);

          case 7:
            context$2$0.next = 13;
            break;

          case 9:
            context$2$0.prev = 9;
            context$2$0.t0 = context$2$0['catch'](1);

            _logger2['default'].error('Had trouble ending session ' + sessionId + ': ' + context$2$0.t0.message);
            return context$2$0.abrupt('return', {
              protocol: protocol,
              error: context$2$0.t0
            });

          case 13:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 9]]);
    }
  }, {
    key: 'executeCommand',
    value: function executeCommand(cmd) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var _get2, sessionId, dstSession, res;

      return _regeneratorRuntime.async(function executeCommand$(context$2$0) {
        var _this8 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(cmd === 'getStatus')) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.getStatus());

          case 3:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 4:
            if (!isAppiumDriverCommand(cmd)) {
              context$2$0.next = 8;
              break;
            }

            context$2$0.next = 7;
            return _regeneratorRuntime.awrap((_get2 = _get(Object.getPrototypeOf(AppiumDriver.prototype), 'executeCommand', this)).call.apply(_get2, [this, cmd].concat(args)));

          case 7:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 8:
            sessionId = _lodash2['default'].last(args);
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(sessionsListGuard.acquire(AppiumDriver.name, function () {
              return _this8.sessions[sessionId];
            }));

          case 11:
            dstSession = context$2$0.sent;

            if (dstSession) {
              context$2$0.next = 14;
              break;
            }

            throw new Error('The session with id \'' + sessionId + '\' does not exist');

          case 14:
            res = {
              protocol: dstSession.protocol
            };
            context$2$0.prev = 15;
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(dstSession.executeCommand.apply(dstSession, [cmd].concat(args)));

          case 18:
            res.value = context$2$0.sent;
            context$2$0.next = 24;
            break;

          case 21:
            context$2$0.prev = 21;
            context$2$0.t0 = context$2$0['catch'](15);

            res.error = context$2$0.t0;

          case 24:
            return context$2$0.abrupt('return', res);

          case 25:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[15, 21]]);
    }
  }, {
    key: 'proxyActive',
    value: function proxyActive(sessionId) {
      var dstSession = this.sessions[sessionId];
      return dstSession && _lodash2['default'].isFunction(dstSession.proxyActive) && dstSession.proxyActive(sessionId);
    }
  }, {
    key: 'getProxyAvoidList',
    value: function getProxyAvoidList(sessionId) {
      var dstSession = this.sessions[sessionId];
      return dstSession ? dstSession.getProxyAvoidList() : [];
    }
  }, {
    key: 'canProxy',
    value: function canProxy(sessionId) {
      var dstSession = this.sessions[sessionId];
      return dstSession && dstSession.canProxy(sessionId);
    }
  }, {
    key: 'isCommandsQueueEnabled',
    get: function get() {
      return false;
    }
  }]);

  return AppiumDriver;
})(_appiumBaseDriver.BaseDriver);

function isAppiumDriverCommand(cmd) {
  return !(0, _appiumBaseDriver.isSessionCommand)(cmd) || cmd === "deleteSession";
}

exports.AppiumDriver = AppiumDriver;

// Parse the caps into a format that the InnerDriver will accept

// Remove the session on unexpected shutdown, so that we are in a position
// to open another session later on.
// TODO: this should be removed and replaced by a onShutdown callback.
// this is a cancellable promise
// if we get here, we've had an unexpected shutdown, so error

// if we cancelled the unexpected shutdown promise, that means we
// no longer care about it, and can safely ignore it

// getStatus command should not be put into queue. If we do it as part of super.executeCommand, it will be added to queue.
// There will be lot of status commands in queue during createSession command, as createSession can take up to or more than a minute.
//# sourceMappingURL=data:application/json;charset=utf8;base64,
