'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumBaseDriver = require('appium-base-driver');

var _findRoot = require('find-root');

var _findRoot2 = _interopRequireDefault(_findRoot);

var W3C_APPIUM_PREFIX = 'appium';

function inspectObject(args) {
  function getValueArray(obj) {
    var indent = arguments.length <= 1 || arguments[1] === undefined ? '  ' : arguments[1];

    if (!_lodash2['default'].isObject(obj)) {
      return [obj];
    }

    var strArr = ['{'];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _getIterator(_lodash2['default'].toPairs(obj)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _step$value = _slicedToArray(_step.value, 2);

        var arg = _step$value[0];
        var value = _step$value[1];

        if (!_lodash2['default'].isObject(value)) {
          strArr.push(indent + '  ' + arg + ': ' + value);
        } else {
          value = getValueArray(value, indent + '  ');
          strArr.push(indent + '  ' + arg + ': ' + value.shift());
          strArr.push.apply(strArr, _toConsumableArray(value));
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    strArr.push(indent + '}');
    return strArr;
  }
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = _getIterator(_lodash2['default'].toPairs(args)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _step2$value = _slicedToArray(_step2.value, 2);

      var arg = _step2$value[0];
      var value = _step2$value[1];

      value = getValueArray(value);
      _logger2['default'].info('  ' + arg + ': ' + value.shift());
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = _getIterator(value), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var val = _step3.value;

          _logger2['default'].info(val);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3['return']) {
            _iterator3['return']();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
        _iterator2['return']();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
}

/**
 * Takes the caps that were provided in the request and translates them
 * into caps that can be used by the inner drivers.
 *
 * @param {Object} jsonwpCapabilities
 * @param {Object} w3cCapabilities
 * @param {Object} constraints
 * @param {Object} defaultCapabilities
 */
function parseCapsForInnerDriver(jsonwpCapabilities, w3cCapabilities) {
  var constraints = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
  var defaultCapabilities = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

  // Check if the caller sent JSONWP caps, W3C caps, or both
  var hasW3CCaps = _lodash2['default'].isPlainObject(w3cCapabilities) && (_lodash2['default'].has(w3cCapabilities, 'alwaysMatch') || _lodash2['default'].has(w3cCapabilities, 'firstMatch'));
  var hasJSONWPCaps = _lodash2['default'].isPlainObject(jsonwpCapabilities);
  var protocol = null;
  var desiredCaps = {};
  var processedW3CCapabilities = null;
  var processedJsonwpCapabilities = null;

  if (!hasJSONWPCaps && !hasW3CCaps) {
    return {
      protocol: _appiumBaseDriver.BaseDriver.DRIVER_PROTOCOL.W3C,
      error: new Error('Either JSONWP or W3C capabilities should be provided')
    };
  }

  var _BaseDriver$DRIVER_PROTOCOL = _appiumBaseDriver.BaseDriver.DRIVER_PROTOCOL;
  var W3C = _BaseDriver$DRIVER_PROTOCOL.W3C;
  var MJSONWP = _BaseDriver$DRIVER_PROTOCOL.MJSONWP;

  // Make copies of the capabilities that include the default capabilities
  if (hasW3CCaps) {
    w3cCapabilities = _extends({}, w3cCapabilities, {
      alwaysMatch: _extends({}, defaultCapabilities, w3cCapabilities.alwaysMatch)
    });
  }

  if (hasJSONWPCaps) {
    jsonwpCapabilities = _extends({}, defaultCapabilities, jsonwpCapabilities);
  }

  // Get MJSONWP caps
  if (hasJSONWPCaps) {
    protocol = MJSONWP;
    desiredCaps = jsonwpCapabilities;
    processedJsonwpCapabilities = removeW3CPrefixes(_extends({}, desiredCaps));
  }

  // Get W3C caps
  if (hasW3CCaps) {
    protocol = W3C;
    // Call the process capabilities algorithm to find matching caps on the W3C
    // (see: https://github.com/jlipps/simple-wd-spec#processing-capabilities)
    var isFixingNeededForW3cCaps = false;
    try {
      desiredCaps = (0, _appiumBaseDriver.processCapabilities)(w3cCapabilities, constraints, true);
    } catch (error) {
      if (!hasJSONWPCaps) {
        return {
          desiredCaps: desiredCaps,
          processedJsonwpCapabilities: processedJsonwpCapabilities,
          processedW3CCapabilities: processedW3CCapabilities,
          protocol: protocol,
          error: error
        };
      }
      _logger2['default'].info('Could not parse W3C capabilities: ' + error.message);
      isFixingNeededForW3cCaps = true;
    }

    if (hasJSONWPCaps && !isFixingNeededForW3cCaps) {
      var differingKeys = _lodash2['default'].difference(_lodash2['default'].keys(processedJsonwpCapabilities), _lodash2['default'].keys(removeW3CPrefixes(desiredCaps)));
      if (!_lodash2['default'].isEmpty(differingKeys)) {
        _logger2['default'].info('The following capabilities were provided in the JSONWP desired capabilities that are missing ' + ('in W3C capabilities: ' + JSON.stringify(differingKeys)));
        isFixingNeededForW3cCaps = true;
      }
    }

    if (isFixingNeededForW3cCaps && hasJSONWPCaps) {
      _logger2['default'].info('Trying to fix W3C capabilities by merging them with JSONWP caps');
      w3cCapabilities = fixW3cCapabilities(w3cCapabilities, jsonwpCapabilities);
      try {
        desiredCaps = (0, _appiumBaseDriver.processCapabilities)(w3cCapabilities, constraints, true);
      } catch (error) {
        _logger2['default'].warn('Could not parse fixed W3C capabilities: ' + error.message + '. Falling back to JSONWP protocol');
        return {
          desiredCaps: processedJsonwpCapabilities,
          processedJsonwpCapabilities: processedJsonwpCapabilities,
          processedW3CCapabilities: null,
          protocol: MJSONWP
        };
      }
    }

    // Create a new w3c capabilities payload that contains only the matching caps in `alwaysMatch`
    processedW3CCapabilities = {
      alwaysMatch: _extends({}, insertAppiumPrefixes(desiredCaps)),
      firstMatch: [{}]
    };
  }

  return { desiredCaps: desiredCaps, processedJsonwpCapabilities: processedJsonwpCapabilities, processedW3CCapabilities: processedW3CCapabilities, protocol: protocol };
}

/**
 * This helper method tries to fix corrupted W3C capabilities by
 * merging them to existing JSONWP capabilities.
 *
 * @param {Object} w3cCaps W3C capabilities
 * @param {Object} jsonwpCaps JSONWP capabilities
 * @returns {Object} Fixed W3C capabilities
 */
function fixW3cCapabilities(w3cCaps, jsonwpCaps) {
  var result = {
    firstMatch: w3cCaps.firstMatch || [],
    alwaysMatch: w3cCaps.alwaysMatch || {}
  };
  var keysToInsert = _lodash2['default'].keys(jsonwpCaps);
  var removeMatchingKeys = function removeMatchingKeys(match) {
    _lodash2['default'].pull(keysToInsert, match);
    var colonIndex = match.indexOf(':');
    if (colonIndex >= 0 && match.length > colonIndex) {
      _lodash2['default'].pull(keysToInsert, match.substring(colonIndex + 1));
    }
    if (keysToInsert.includes(W3C_APPIUM_PREFIX + ':' + match)) {
      _lodash2['default'].pull(keysToInsert, W3C_APPIUM_PREFIX + ':' + match);
    }
  };

  var _iteratorNormalCompletion4 = true;
  var _didIteratorError4 = false;
  var _iteratorError4 = undefined;

  try {
    for (var _iterator4 = _getIterator(result.firstMatch), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
      var firstMatchEntry = _step4.value;
      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = _getIterator(_lodash2['default'].toPairs(firstMatchEntry)), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var pair = _step7.value;

          removeMatchingKeys(pair[0]);
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7['return']) {
            _iterator7['return']();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError4 = true;
    _iteratorError4 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion4 && _iterator4['return']) {
        _iterator4['return']();
      }
    } finally {
      if (_didIteratorError4) {
        throw _iteratorError4;
      }
    }
  }

  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = _getIterator(_lodash2['default'].toPairs(result.alwaysMatch)), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var pair = _step5.value;

      removeMatchingKeys(pair[0]);
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5['return']) {
        _iterator5['return']();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }

  var _iteratorNormalCompletion6 = true;
  var _didIteratorError6 = false;
  var _iteratorError6 = undefined;

  try {
    for (var _iterator6 = _getIterator(keysToInsert), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
      var key = _step6.value;

      result.alwaysMatch[key] = jsonwpCaps[key];
    }
  } catch (err) {
    _didIteratorError6 = true;
    _iteratorError6 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion6 && _iterator6['return']) {
        _iterator6['return']();
      }
    } finally {
      if (_didIteratorError6) {
        throw _iteratorError6;
      }
    }
  }

  return result;
}

/**
 * Takes a capabilities objects and prefixes capabilities with `appium:`
 * @param {Object} caps Desired capabilities object
 */
function insertAppiumPrefixes(caps) {
  // Standard, non-prefixed capabilities (see https://www.w3.org/TR/webdriver/#dfn-table-of-standard-capabilities)
  var STANDARD_CAPS = ['browserName', 'browserVersion', 'platformName', 'acceptInsecureCerts', 'pageLoadStrategy', 'proxy', 'setWindowRect', 'timeouts', 'unhandledPromptBehavior'];

  var prefixedCaps = {};
  var _iteratorNormalCompletion8 = true;
  var _didIteratorError8 = false;
  var _iteratorError8 = undefined;

  try {
    for (var _iterator8 = _getIterator(_lodash2['default'].toPairs(caps)), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
      var _step8$value = _slicedToArray(_step8.value, 2);

      var _name = _step8$value[0];
      var value = _step8$value[1];

      if (STANDARD_CAPS.includes(_name) || _name.includes(':')) {
        prefixedCaps[_name] = value;
      } else {
        prefixedCaps[W3C_APPIUM_PREFIX + ':' + _name] = value;
      }
    }
  } catch (err) {
    _didIteratorError8 = true;
    _iteratorError8 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion8 && _iterator8['return']) {
        _iterator8['return']();
      }
    } finally {
      if (_didIteratorError8) {
        throw _iteratorError8;
      }
    }
  }

  return prefixedCaps;
}

function removeW3CPrefixes(caps) {
  if (!_lodash2['default'].isPlainObject(caps)) {
    return caps;
  }

  var fixedCaps = {};
  var _iteratorNormalCompletion9 = true;
  var _didIteratorError9 = false;
  var _iteratorError9 = undefined;

  try {
    for (var _iterator9 = _getIterator(_lodash2['default'].toPairs(caps)), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
      var _step9$value = _slicedToArray(_step9.value, 2);

      var _name2 = _step9$value[0];
      var value = _step9$value[1];

      var colonPos = _name2.indexOf(':');
      var key = colonPos > 0 ? _name2.substring(colonPos + 1) : _name2;
      fixedCaps[key] = value;
    }
  } catch (err) {
    _didIteratorError9 = true;
    _iteratorError9 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion9 && _iterator9['return']) {
        _iterator9['return']();
      }
    } finally {
      if (_didIteratorError9) {
        throw _iteratorError9;
      }
    }
  }

  return fixedCaps;
}

function getPackageVersion(pkgName) {
  var pkgInfo = require(pkgName + '/package.json') || {};
  return pkgInfo.version;
}

var rootDir = (0, _findRoot2['default'])(__dirname);

exports.inspectObject = inspectObject;
exports.parseCapsForInnerDriver = parseCapsForInnerDriver;
exports.insertAppiumPrefixes = insertAppiumPrefixes;
exports.rootDir = rootDir;
exports.getPackageVersion = getPackageVersion;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
